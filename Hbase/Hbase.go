/* Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package Hbase

import (
	"fmt"
	"github.com/jinntrance/goh/thrift"
	"math"
)

// This is a temporary safety measure to ensure that the `math'
// import does not trip up any generated output that may not
// happen to use the math import due to not having emited enums.
//
// Future clean-ups will deprecate the need for this.
var _ = fmt.Print
var _ = math.MinInt32

type IHbase interface {
	/**
	 * Brings a table on-line (enables it)
	 * 
	 * Parameters:
	 *  - TableName: name of the table
	 */
	EnableTable(tableName Bytes) (io *IOError, err error)
	/**
	 * Disables a table (takes it off-line) If it is being served, the master
	 * will tell the servers to stop serving it.
	 * 
	 * Parameters:
	 *  - TableName: name of the table
	 */
	DisableTable(tableName Bytes) (io *IOError, err error)
	/**
	 * @return true if table is on-line
	 * 
	 * Parameters:
	 *  - TableName: name of the table to check
	 */
	IsTableEnabled(tableName Bytes) (retval171 bool, io *IOError, err error)
	/**
	 * Parameters:
	 *  - TableNameOrRegionName
	 */
	Compact(tableNameOrRegionName Bytes) (io *IOError, err error)
	/**
	 * Parameters:
	 *  - TableNameOrRegionName
	 */
	MajorCompact(tableNameOrRegionName Bytes) (io *IOError, err error)
	/**
	 * List all the userspace tables.
	 * 
	 * @return returns a list of names
	 */
	GetTableNames() (retval174 []Text, io *IOError, err error)
	/**
	 * List all the column families assoicated with a table.
	 * 
	 * @return list of column family descriptors
	 * 
	 * Parameters:
	 *  - TableName: table name
	 */
	GetColumnDescriptors(tableName Text) (retval175 map[string]*ColumnDescriptor, io *IOError, err error)
	/**
	 * List the regions associated with a table.
	 * 
	 * @return list of region descriptors
	 * 
	 * Parameters:
	 *  - TableName: table name
	 */
	GetTableRegions(tableName Text) (retval176 []*TRegionInfo, io *IOError, err error)
	/**
	 * Create a table with the specified column families.  The name
	 * field for each ColumnDescriptor must be set and must end in a
	 * colon (:). All other fields are optional and will get default
	 * values if not explicitly specified.
	 * 
	 * @throws IllegalArgument if an input parameter is invalid
	 * 
	 * @throws AlreadyExists if the table name already exists
	 * 
	 * Parameters:
	 *  - TableName: name of table to create
	 *  - ColumnFamilies: list of column family descriptors
	 */
	CreateTable(tableName Text, columnFamilies []*ColumnDescriptor) (io *IOError, ia *IllegalArgument, exist *AlreadyExists, err error)
	/**
	 * Deletes a table
	 * 
	 * @throws IOError if table doesn't exist on server or there was some other
	 * problem
	 * 
	 * Parameters:
	 *  - TableName: name of table to delete
	 */
	DeleteTable(tableName Text) (io *IOError, err error)
	/**
	 * Get a single TCell for the specified table, row, and column at the
	 * latest timestamp. Returns an empty list if no such value exists.
	 * 
	 * @return value for specified row/column
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Column: column name
	 *  - Attributes: Get attributes
	 */
	Get(tableName Text, row Text, column Text, attributes map[string]Text) (retval179 []*TCell, io *IOError, err error)
	/**
	 * Get the specified number of versions for the specified table,
	 * row, and column.
	 * 
	 * @return list of cells for specified row/column
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Column: column name
	 *  - NumVersions: number of versions to retrieve
	 *  - Attributes: Get attributes
	 */
	GetVer(tableName Text, row Text, column Text, numVersions int32, attributes map[string]Text) (retval180 []*TCell, io *IOError, err error)
	/**
	 * Get the specified number of versions for the specified table,
	 * row, and column.  Only versions less than or equal to the specified
	 * timestamp will be returned.
	 * 
	 * @return list of cells for specified row/column
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Column: column name
	 *  - Timestamp: timestamp
	 *  - NumVersions: number of versions to retrieve
	 *  - Attributes: Get attributes
	 */
	GetVerTs(tableName Text, row Text, column Text, timestamp int64, numVersions int32, attributes map[string]Text) (retval181 []*TCell, io *IOError, err error)
	/**
	 * Get all the data for the specified table and row at the latest
	 * timestamp. Returns an empty list if the row does not exist.
	 * 
	 * @return TRowResult containing the row and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Attributes: Get attributes
	 */
	GetRow(tableName Text, row Text, attributes map[string]Text) (retval182 []*TRowResult, io *IOError, err error)
	/**
	 * Get the specified columns for the specified table and row at the latest
	 * timestamp. Returns an empty list if the row does not exist.
	 * 
	 * @return TRowResult containing the row and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Columns: List of columns to return, null for all columns
	 *  - Attributes: Get attributes
	 */
	GetRowWithColumns(tableName Text, row Text, columns []Text, attributes map[string]Text) (retval183 []*TRowResult, io *IOError, err error)
	/**
	 * Get all the data for the specified table and row at the specified
	 * timestamp. Returns an empty list if the row does not exist.
	 * 
	 * @return TRowResult containing the row and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of the table
	 *  - Row: row key
	 *  - Timestamp: timestamp
	 *  - Attributes: Get attributes
	 */
	GetRowTs(tableName Text, row Text, timestamp int64, attributes map[string]Text) (retval184 []*TRowResult, io *IOError, err error)
	/**
	 * Get the specified columns for the specified table and row at the specified
	 * timestamp. Returns an empty list if the row does not exist.
	 * 
	 * @return TRowResult containing the row and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Columns: List of columns to return, null for all columns
	 *  - Timestamp
	 *  - Attributes: Get attributes
	 */
	GetRowWithColumnsTs(tableName Text, row Text, columns []Text, timestamp int64, attributes map[string]Text) (retval185 []*TRowResult, io *IOError, err error)
	/**
	 * Get the specified num versions of the specified columns for the specified table and row.
	 * Returns an empty list if the row does not exist.
	 * 
	 * @return TRowResult containing the row and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Columns: List of columns to return, null for all columns
	 *  - NumVersions: number of versions to retrieve
	 *  - Attributes: Get attributes
	 */
	GetRowWithColumnsMaxVer(tableName Text, row Text, columns []Text, numVersions int32, attributes map[string]Text) (retval186 []*TRowResultWithMultiColVer, io *IOError, err error)
	/**
	 * Get the specified num versions of  the specified columns for the specified table and
	 * row at the specified timestamp. Returns an empty list if the row does not exist.
	 * 
	 * @return TRowResult containing the row and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Columns: List of columns to return, null for all columns
	 *  - Timestamp
	 *  - NumVersions: number of versions to retrieve
	 *  - Attributes: Get attributes
	 */
	GetRowWithColumnsTsMaxVer(tableName Text, row Text, columns []Text, timestamp int64, numVersions int32, attributes map[string]Text) (retval187 []*TRowResultWithMultiColVer, io *IOError, err error)
	/**
	 * Get all the data for the specified table and rows at the latest
	 * timestamp. Returns an empty list if no rows exist.
	 * 
	 * @return TRowResult containing the rows and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Rows: row keys
	 *  - Attributes: Get attributes
	 */
	GetRows(tableName Text, rows []Text, attributes map[string]Text) (retval188 []*TRowResult, io *IOError, err error)
	/**
	 * Get the specified columns for the specified table and rows at the latest
	 * timestamp. Returns an empty list if no rows exist.
	 * 
	 * @return TRowResult containing the rows and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Rows: row keys
	 *  - Columns: List of columns to return, null for all columns
	 *  - Attributes: Get attributes
	 */
	GetRowsWithColumns(tableName Text, rows []Text, columns []Text, attributes map[string]Text) (retval189 []*TRowResult, io *IOError, err error)
	/**
	 * Get all the data for the specified table and rows at the specified
	 * timestamp. Returns an empty list if no rows exist.
	 * 
	 * @return TRowResult containing the rows and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of the table
	 *  - Rows: row keys
	 *  - Timestamp: timestamp
	 *  - Attributes: Get attributes
	 */
	GetRowsTs(tableName Text, rows []Text, timestamp int64, attributes map[string]Text) (retval190 []*TRowResult, io *IOError, err error)
	/**
	 * Get the specified columns for the specified table and rows at the specified
	 * timestamp. Returns an empty list if no rows exist.
	 * 
	 * @return TRowResult containing the rows and map of columns to TCells
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Rows: row keys
	 *  - Columns: List of columns to return, null for all columns
	 *  - Timestamp
	 *  - Attributes: Get attributes
	 */
	GetRowsWithColumnsTs(tableName Text, rows []Text, columns []Text, timestamp int64, attributes map[string]Text) (retval191 []*TRowResult, io *IOError, err error)
	/**
	 * Apply a series of mutations (updates/deletes) to a row in a
	 * single transaction.  If an exception is thrown, then the
	 * transaction is aborted.  Default current timestamp is used, and
	 * all entries will have an identical timestamp.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Mutations: list of mutation commands
	 *  - Attributes: Mutation attributes
	 */
	MutateRow(tableName Text, row Text, mutations []*Mutation, attributes map[string]Text) (io *IOError, ia *IllegalArgument, err error)
	/**
	 * Apply a series of mutations (updates/deletes) to a row in a
	 * single transaction.  If an exception is thrown, then the
	 * transaction is aborted.  The specified timestamp is used, and
	 * all entries will have an identical timestamp.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Mutations: list of mutation commands
	 *  - Timestamp: timestamp
	 *  - Attributes: Mutation attributes
	 */
	MutateRowTs(tableName Text, row Text, mutations []*Mutation, timestamp int64, attributes map[string]Text) (io *IOError, ia *IllegalArgument, err error)
	/**
	 * Apply a series of batches (each a series of mutations on a single row)
	 * in a single transaction.  If an exception is thrown, then the
	 * transaction is aborted.  Default current timestamp is used, and
	 * all entries will have an identical timestamp.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - RowBatches: list of row batches
	 *  - Attributes: Mutation attributes
	 */
	MutateRows(tableName Text, rowBatches []*BatchMutation, attributes map[string]Text) (io *IOError, ia *IllegalArgument, err error)
	/**
	 * Apply a series of batches (each a series of mutations on a single row)
	 * in a single transaction.  If an exception is thrown, then the
	 * transaction is aborted.  The specified timestamp is used, and
	 * all entries will have an identical timestamp.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - RowBatches: list of row batches
	 *  - Timestamp: timestamp
	 *  - Attributes: Mutation attributes
	 */
	MutateRowsTs(tableName Text, rowBatches []*BatchMutation, timestamp int64, attributes map[string]Text) (io *IOError, ia *IllegalArgument, err error)
	/**
	 * Atomically increment the column value specified.  Returns the next value post increment.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row to increment
	 *  - Column: name of column
	 *  - Value: amount to increment by
	 */
	AtomicIncrement(tableName Text, row Text, column Text, value int64) (retval196 int64, io *IOError, ia *IllegalArgument, err error)
	/**
	 * Delete all cells that match the passed row and column.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: Row to update
	 *  - Column: name of column whose value is to be deleted
	 *  - Attributes: Delete attributes
	 */
	DeleteAll(tableName Text, row Text, column Text, attributes map[string]Text) (io *IOError, err error)
	/**
	 * Delete all cells that match the passed row and column and whose
	 * timestamp is equal-to or older than the passed timestamp.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: Row to update
	 *  - Column: name of column whose value is to be deleted
	 *  - Timestamp: timestamp
	 *  - Attributes: Delete attributes
	 */
	DeleteAllTs(tableName Text, row Text, column Text, timestamp int64, attributes map[string]Text) (io *IOError, err error)
	/**
	 * Completely delete the row's cells.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: key of the row to be completely deleted.
	 *  - Attributes: Delete attributes
	 */
	DeleteAllRow(tableName Text, row Text, attributes map[string]Text) (io *IOError, err error)
	/**
	 * Increment a cell by the ammount.
	 * Increments can be applied async if hbase.regionserver.thrift.coalesceIncrement is set to true.
	 * False is the default.  Turn to true if you need the extra performance and can accept some
	 * data loss if a thrift server dies with increments still in the queue.
	 * 
	 * Parameters:
	 *  - Increment: The single increment to apply
	 */
	Increment(increment *TIncrement) (io *IOError, err error)
	/**
	 * Parameters:
	 *  - Increments: The list of increments
	 */
	IncrementRows(increments []*TIncrement) (io *IOError, err error)
	/**
	 * Completely delete the row's cells marked with a timestamp
	 * equal-to or older than the passed timestamp.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: key of the row to be completely deleted.
	 *  - Timestamp: timestamp
	 *  - Attributes: Delete attributes
	 */
	DeleteAllRowTs(tableName Text, row Text, timestamp int64, attributes map[string]Text) (io *IOError, err error)
	/**
	 * Get a scanner on the current table, using the Scan instance
	 * for the scan parameters.
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Scan: Scan instance
	 *  - Attributes: Scan attributes
	 */
	ScannerOpenWithScan(tableName Text, scan *TScan, attributes map[string]Text) (retval203 ScannerID, io *IOError, err error)
	/**
	 * Get a scanner on the current table starting at the specified row and
	 * ending at the last row in the table.  Return the specified columns.
	 * 
	 * @return scanner id to be used with other scanner procedures
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - StartRow: Starting row in table to scan.
	 * Send "" (empty string) to start at the first row.
	 *  - Columns: columns to scan. If column name is a column family, all
	 * columns of the specified column family are returned. It's also possible
	 * to pass a regex in the column qualifier.
	 *  - Attributes: Scan attributes
	 */
	ScannerOpen(tableName Text, startRow Text, columns []Text, attributes map[string]Text) (retval204 ScannerID, io *IOError, err error)
	/**
	 * Get a scanner on the current table starting and stopping at the
	 * specified rows.  ending at the last row in the table.  Return the
	 * specified columns.
	 * 
	 * @return scanner id to be used with other scanner procedures
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - StartRow: Starting row in table to scan.
	 * Send "" (empty string) to start at the first row.
	 *  - StopRow: row to stop scanning on. This row is *not* included in the
	 * scanner's results
	 *  - Columns: columns to scan. If column name is a column family, all
	 * columns of the specified column family are returned. It's also possible
	 * to pass a regex in the column qualifier.
	 *  - Attributes: Scan attributes
	 */
	ScannerOpenWithStop(tableName Text, startRow Text, stopRow Text, columns []Text, attributes map[string]Text) (retval205 ScannerID, io *IOError, err error)
	/**
	 * Open a scanner for a given prefix.  That is all rows will have the specified
	 * prefix. No other rows will be returned.
	 * 
	 * @return scanner id to use with other scanner calls
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - StartAndPrefix: the prefix (and thus start row) of the keys you want
	 *  - Columns: the columns you want returned
	 *  - Attributes: Scan attributes
	 */
	ScannerOpenWithPrefix(tableName Text, startAndPrefix Text, columns []Text, attributes map[string]Text) (retval206 ScannerID, io *IOError, err error)
	/**
	 * Get a scanner on the current table starting at the specified row and
	 * ending at the last row in the table.  Return the specified columns.
	 * Only values with the specified timestamp are returned.
	 * 
	 * @return scanner id to be used with other scanner procedures
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - StartRow: Starting row in table to scan.
	 * Send "" (empty string) to start at the first row.
	 *  - Columns: columns to scan. If column name is a column family, all
	 * columns of the specified column family are returned. It's also possible
	 * to pass a regex in the column qualifier.
	 *  - Timestamp: timestamp
	 *  - Attributes: Scan attributes
	 */
	ScannerOpenTs(tableName Text, startRow Text, columns []Text, timestamp int64, attributes map[string]Text) (retval207 ScannerID, io *IOError, err error)
	/**
	 * Get a scanner on the current table starting and stopping at the
	 * specified rows.  ending at the last row in the table.  Return the
	 * specified columns.  Only values with the specified timestamp are
	 * returned.
	 * 
	 * @return scanner id to be used with other scanner procedures
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - StartRow: Starting row in table to scan.
	 * Send "" (empty string) to start at the first row.
	 *  - StopRow: row to stop scanning on. This row is *not* included in the
	 * scanner's results
	 *  - Columns: columns to scan. If column name is a column family, all
	 * columns of the specified column family are returned. It's also possible
	 * to pass a regex in the column qualifier.
	 *  - Timestamp: timestamp
	 *  - Attributes: Scan attributes
	 */
	ScannerOpenWithStopTs(tableName Text, startRow Text, stopRow Text, columns []Text, timestamp int64, attributes map[string]Text) (retval208 ScannerID, io *IOError, err error)
	/**
	 * Returns the scanner's current row value and advances to the next
	 * row in the table.  When there are no more rows in the table, or a key
	 * greater-than-or-equal-to the scanner's specified stopRow is reached,
	 * an empty list is returned.
	 * 
	 * @return a TRowResult containing the current row and a map of the columns to TCells.
	 * 
	 * @throws IllegalArgument if ScannerID is invalid
	 * 
	 * @throws NotFound when the scanner reaches the end
	 * 
	 * Parameters:
	 *  - Id: id of a scanner returned by scannerOpen
	 */
	ScannerGet(id ScannerID) (retval209 []*TRowResult, io *IOError, ia *IllegalArgument, err error)
	/**
	 * Returns, starting at the scanner's current row value nbRows worth of
	 * rows and advances to the next row in the table.  When there are no more
	 * rows in the table, or a key greater-than-or-equal-to the scanner's
	 * specified stopRow is reached,  an empty list is returned.
	 * 
	 * @return a TRowResult containing the current row and a map of the columns to TCells.
	 * 
	 * @throws IllegalArgument if ScannerID is invalid
	 * 
	 * @throws NotFound when the scanner reaches the end
	 * 
	 * Parameters:
	 *  - Id: id of a scanner returned by scannerOpen
	 *  - NbRows: number of results to return
	 */
	ScannerGetList(id ScannerID, nbRows int32) (retval210 []*TRowResult, io *IOError, ia *IllegalArgument, err error)
	/**
	 * Closes the server-state associated with an open scanner.
	 * 
	 * @throws IllegalArgument if ScannerID is invalid
	 * 
	 * Parameters:
	 *  - Id: id of a scanner returned by scannerOpen
	 */
	ScannerClose(id ScannerID) (io *IOError, ia *IllegalArgument, err error)
	/**
	 * Get the row just before the specified one.
	 * 
	 * @return value for specified row/column
	 * 
	 * Parameters:
	 *  - TableName: name of table
	 *  - Row: row key
	 *  - Family: column name
	 */
	GetRowOrBefore(tableName Text, row Text, family Text) (retval212 []*TCell, io *IOError, err error)
	/**
	 * Get the regininfo for the specified row. It scans
	 * the metatable to find region's start and end keys.
	 * 
	 * @return value for specified row/column
	 * 
	 * Parameters:
	 *  - Row: row key
	 */
	GetRegionInfo(row Text) (retval213 *TRegionInfo, io *IOError, err error)
}

type HbaseClient struct {
	Transport       thrift.TTransport
	ProtocolFactory thrift.TProtocolFactory
	InputProtocol   thrift.TProtocol
	OutputProtocol  thrift.TProtocol
	SeqId           int32
}

func NewHbaseClientFactory(t thrift.TTransport, f thrift.TProtocolFactory) *HbaseClient {
	return &HbaseClient{Transport: t,
		ProtocolFactory: f,
		InputProtocol:   f.GetProtocol(t),
		OutputProtocol:  f.GetProtocol(t),
		SeqId:           0,
	}
}

func NewHbaseClientProtocol(t thrift.TTransport, iprot thrift.TProtocol, oprot thrift.TProtocol) *HbaseClient {
	return &HbaseClient{Transport: t,
		ProtocolFactory: nil,
		InputProtocol:   iprot,
		OutputProtocol:  oprot,
		SeqId:           0,
	}
}

/**
 * Brings a table on-line (enables it)
 * 
 * Parameters:
 *  - TableName: name of the table
 */
func (p *HbaseClient) EnableTable(tableName Bytes) (io *IOError, err error) {
	err = p.SendEnableTable(tableName)
	if err != nil {
		return
	}
	return p.RecvEnableTable()
}

func (p *HbaseClient) SendEnableTable(tableName Bytes) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("enableTable", thrift.CALL, p.SeqId)
	args215 := NewEnableTableArgs()
	args215.TableName = tableName
	err = args215.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvEnableTable() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error217 := thrift.NewTApplicationExceptionDefault()
		var error218 error
		error218, err = error217.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error218
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result216 := NewEnableTableResult()
	err = result216.Read(iprot)
	iprot.ReadMessageEnd()
	if result216.Io != nil {
		io = result216.Io
	}
	return
}

/**
 * Disables a table (takes it off-line) If it is being served, the master
 * will tell the servers to stop serving it.
 * 
 * Parameters:
 *  - TableName: name of the table
 */
func (p *HbaseClient) DisableTable(tableName Bytes) (io *IOError, err error) {
	err = p.SendDisableTable(tableName)
	if err != nil {
		return
	}
	return p.RecvDisableTable()
}

func (p *HbaseClient) SendDisableTable(tableName Bytes) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("disableTable", thrift.CALL, p.SeqId)
	args220 := NewDisableTableArgs()
	args220.TableName = tableName
	err = args220.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvDisableTable() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error222 := thrift.NewTApplicationExceptionDefault()
		var error223 error
		error223, err = error222.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error223
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result221 := NewDisableTableResult()
	err = result221.Read(iprot)
	iprot.ReadMessageEnd()
	if result221.Io != nil {
		io = result221.Io
	}
	return
}

/**
 * @return true if table is on-line
 * 
 * Parameters:
 *  - TableName: name of the table to check
 */
func (p *HbaseClient) IsTableEnabled(tableName Bytes) (retval224 bool, io *IOError, err error) {
	err = p.SendIsTableEnabled(tableName)
	if err != nil {
		return
	}
	return p.RecvIsTableEnabled()
}

func (p *HbaseClient) SendIsTableEnabled(tableName Bytes) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("isTableEnabled", thrift.CALL, p.SeqId)
	args225 := NewIsTableEnabledArgs()
	args225.TableName = tableName
	err = args225.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvIsTableEnabled() (value bool, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error227 := thrift.NewTApplicationExceptionDefault()
		var error228 error
		error228, err = error227.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error228
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result226 := NewIsTableEnabledResult()
	err = result226.Read(iprot)
	iprot.ReadMessageEnd()
	value = result226.Success
	if result226.Io != nil {
		io = result226.Io
	}
	return
}

/**
 * Parameters:
 *  - TableNameOrRegionName
 */
func (p *HbaseClient) Compact(tableNameOrRegionName Bytes) (io *IOError, err error) {
	err = p.SendCompact(tableNameOrRegionName)
	if err != nil {
		return
	}
	return p.RecvCompact()
}

func (p *HbaseClient) SendCompact(tableNameOrRegionName Bytes) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("compact", thrift.CALL, p.SeqId)
	args230 := NewCompactArgs()
	args230.TableNameOrRegionName = tableNameOrRegionName
	err = args230.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvCompact() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error232 := thrift.NewTApplicationExceptionDefault()
		var error233 error
		error233, err = error232.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error233
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result231 := NewCompactResult()
	err = result231.Read(iprot)
	iprot.ReadMessageEnd()
	if result231.Io != nil {
		io = result231.Io
	}
	return
}

/**
 * Parameters:
 *  - TableNameOrRegionName
 */
func (p *HbaseClient) MajorCompact(tableNameOrRegionName Bytes) (io *IOError, err error) {
	err = p.SendMajorCompact(tableNameOrRegionName)
	if err != nil {
		return
	}
	return p.RecvMajorCompact()
}

func (p *HbaseClient) SendMajorCompact(tableNameOrRegionName Bytes) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("majorCompact", thrift.CALL, p.SeqId)
	args235 := NewMajorCompactArgs()
	args235.TableNameOrRegionName = tableNameOrRegionName
	err = args235.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvMajorCompact() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error237 := thrift.NewTApplicationExceptionDefault()
		var error238 error
		error238, err = error237.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error238
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result236 := NewMajorCompactResult()
	err = result236.Read(iprot)
	iprot.ReadMessageEnd()
	if result236.Io != nil {
		io = result236.Io
	}
	return
}

/**
 * List all the userspace tables.
 * 
 * @return returns a list of names
 */
func (p *HbaseClient) GetTableNames() (retval239 []Text, io *IOError, err error) {
	err = p.SendGetTableNames()
	if err != nil {
		return
	}
	return p.RecvGetTableNames()
}

func (p *HbaseClient) SendGetTableNames() (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getTableNames", thrift.CALL, p.SeqId)
	args240 := NewGetTableNamesArgs()
	err = args240.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetTableNames() (value []Text, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error242 := thrift.NewTApplicationExceptionDefault()
		var error243 error
		error243, err = error242.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error243
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result241 := NewGetTableNamesResult()
	err = result241.Read(iprot)
	iprot.ReadMessageEnd()
	value = result241.Success
	if result241.Io != nil {
		io = result241.Io
	}
	return
}

/**
 * List all the column families assoicated with a table.
 * 
 * @return list of column family descriptors
 * 
 * Parameters:
 *  - TableName: table name
 */
func (p *HbaseClient) GetColumnDescriptors(tableName Text) (retval244 map[string]*ColumnDescriptor, io *IOError, err error) {
	err = p.SendGetColumnDescriptors(tableName)
	if err != nil {
		return
	}
	return p.RecvGetColumnDescriptors()
}

func (p *HbaseClient) SendGetColumnDescriptors(tableName Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getColumnDescriptors", thrift.CALL, p.SeqId)
	args245 := NewGetColumnDescriptorsArgs()
	args245.TableName = tableName
	err = args245.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetColumnDescriptors() (value map[string]*ColumnDescriptor, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error247 := thrift.NewTApplicationExceptionDefault()
		var error248 error
		error248, err = error247.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error248
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result246 := NewGetColumnDescriptorsResult()
	err = result246.Read(iprot)
	iprot.ReadMessageEnd()
	value = result246.Success
	if result246.Io != nil {
		io = result246.Io
	}
	return
}

/**
 * List the regions associated with a table.
 * 
 * @return list of region descriptors
 * 
 * Parameters:
 *  - TableName: table name
 */
func (p *HbaseClient) GetTableRegions(tableName Text) (retval249 []*TRegionInfo, io *IOError, err error) {
	err = p.SendGetTableRegions(tableName)
	if err != nil {
		return
	}
	return p.RecvGetTableRegions()
}

func (p *HbaseClient) SendGetTableRegions(tableName Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getTableRegions", thrift.CALL, p.SeqId)
	args250 := NewGetTableRegionsArgs()
	args250.TableName = tableName
	err = args250.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetTableRegions() (value []*TRegionInfo, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error252 := thrift.NewTApplicationExceptionDefault()
		var error253 error
		error253, err = error252.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error253
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result251 := NewGetTableRegionsResult()
	err = result251.Read(iprot)
	iprot.ReadMessageEnd()
	value = result251.Success
	if result251.Io != nil {
		io = result251.Io
	}
	return
}

/**
 * Create a table with the specified column families.  The name
 * field for each ColumnDescriptor must be set and must end in a
 * colon (:). All other fields are optional and will get default
 * values if not explicitly specified.
 * 
 * @throws IllegalArgument if an input parameter is invalid
 * 
 * @throws AlreadyExists if the table name already exists
 * 
 * Parameters:
 *  - TableName: name of table to create
 *  - ColumnFamilies: list of column family descriptors
 */
func (p *HbaseClient) CreateTable(tableName Text, columnFamilies []*ColumnDescriptor) (io *IOError, ia *IllegalArgument, exist *AlreadyExists, err error) {
	err = p.SendCreateTable(tableName, columnFamilies)
	if err != nil {
		return
	}
	return p.RecvCreateTable()
}

func (p *HbaseClient) SendCreateTable(tableName Text, columnFamilies []*ColumnDescriptor) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("createTable", thrift.CALL, p.SeqId)
	args255 := NewCreateTableArgs()
	args255.TableName = tableName
	args255.ColumnFamilies = columnFamilies
	err = args255.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvCreateTable() (io *IOError, ia *IllegalArgument, exist *AlreadyExists, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error257 := thrift.NewTApplicationExceptionDefault()
		var error258 error
		error258, err = error257.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error258
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result256 := NewCreateTableResult()
	err = result256.Read(iprot)
	iprot.ReadMessageEnd()
	if result256.Io != nil {
		io = result256.Io
	}
	if result256.Ia != nil {
		ia = result256.Ia
	}
	if result256.Exist != nil {
		exist = result256.Exist
	}
	return
}

/**
 * Deletes a table
 * 
 * @throws IOError if table doesn't exist on server or there was some other
 * problem
 * 
 * Parameters:
 *  - TableName: name of table to delete
 */
func (p *HbaseClient) DeleteTable(tableName Text) (io *IOError, err error) {
	err = p.SendDeleteTable(tableName)
	if err != nil {
		return
	}
	return p.RecvDeleteTable()
}

func (p *HbaseClient) SendDeleteTable(tableName Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("deleteTable", thrift.CALL, p.SeqId)
	args260 := NewDeleteTableArgs()
	args260.TableName = tableName
	err = args260.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvDeleteTable() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error262 := thrift.NewTApplicationExceptionDefault()
		var error263 error
		error263, err = error262.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error263
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result261 := NewDeleteTableResult()
	err = result261.Read(iprot)
	iprot.ReadMessageEnd()
	if result261.Io != nil {
		io = result261.Io
	}
	return
}

/**
 * Get a single TCell for the specified table, row, and column at the
 * latest timestamp. Returns an empty list if no such value exists.
 * 
 * @return value for specified row/column
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Column: column name
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) Get(tableName Text, row Text, column Text, attributes map[string]Text) (retval264 []*TCell, io *IOError, err error) {
	err = p.SendGet(tableName, row, column, attributes)
	if err != nil {
		return
	}
	return p.RecvGet()
}

func (p *HbaseClient) SendGet(tableName Text, row Text, column Text, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("get", thrift.CALL, p.SeqId)
	args265 := NewGetArgs()
	args265.TableName = tableName
	args265.Row = row
	args265.Column = column
	args265.Attributes = attributes
	err = args265.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGet() (value []*TCell, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error267 := thrift.NewTApplicationExceptionDefault()
		var error268 error
		error268, err = error267.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error268
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result266 := NewGetResult()
	err = result266.Read(iprot)
	iprot.ReadMessageEnd()
	value = result266.Success
	if result266.Io != nil {
		io = result266.Io
	}
	return
}

/**
 * Get the specified number of versions for the specified table,
 * row, and column.
 * 
 * @return list of cells for specified row/column
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Column: column name
 *  - NumVersions: number of versions to retrieve
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetVer(tableName Text, row Text, column Text, numVersions int32, attributes map[string]Text) (retval269 []*TCell, io *IOError, err error) {
	err = p.SendGetVer(tableName, row, column, numVersions, attributes)
	if err != nil {
		return
	}
	return p.RecvGetVer()
}

func (p *HbaseClient) SendGetVer(tableName Text, row Text, column Text, numVersions int32, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getVer", thrift.CALL, p.SeqId)
	args270 := NewGetVerArgs()
	args270.TableName = tableName
	args270.Row = row
	args270.Column = column
	args270.NumVersions = numVersions
	args270.Attributes = attributes
	err = args270.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetVer() (value []*TCell, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error272 := thrift.NewTApplicationExceptionDefault()
		var error273 error
		error273, err = error272.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error273
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result271 := NewGetVerResult()
	err = result271.Read(iprot)
	iprot.ReadMessageEnd()
	value = result271.Success
	if result271.Io != nil {
		io = result271.Io
	}
	return
}

/**
 * Get the specified number of versions for the specified table,
 * row, and column.  Only versions less than or equal to the specified
 * timestamp will be returned.
 * 
 * @return list of cells for specified row/column
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Column: column name
 *  - Timestamp: timestamp
 *  - NumVersions: number of versions to retrieve
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetVerTs(tableName Text, row Text, column Text, timestamp int64, numVersions int32, attributes map[string]Text) (retval274 []*TCell, io *IOError, err error) {
	err = p.SendGetVerTs(tableName, row, column, timestamp, numVersions, attributes)
	if err != nil {
		return
	}
	return p.RecvGetVerTs()
}

func (p *HbaseClient) SendGetVerTs(tableName Text, row Text, column Text, timestamp int64, numVersions int32, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getVerTs", thrift.CALL, p.SeqId)
	args275 := NewGetVerTsArgs()
	args275.TableName = tableName
	args275.Row = row
	args275.Column = column
	args275.Timestamp = timestamp
	args275.NumVersions = numVersions
	args275.Attributes = attributes
	err = args275.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetVerTs() (value []*TCell, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error277 := thrift.NewTApplicationExceptionDefault()
		var error278 error
		error278, err = error277.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error278
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result276 := NewGetVerTsResult()
	err = result276.Read(iprot)
	iprot.ReadMessageEnd()
	value = result276.Success
	if result276.Io != nil {
		io = result276.Io
	}
	return
}

/**
 * Get all the data for the specified table and row at the latest
 * timestamp. Returns an empty list if the row does not exist.
 * 
 * @return TRowResult containing the row and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRow(tableName Text, row Text, attributes map[string]Text) (retval279 []*TRowResult, io *IOError, err error) {
	err = p.SendGetRow(tableName, row, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRow()
}

func (p *HbaseClient) SendGetRow(tableName Text, row Text, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRow", thrift.CALL, p.SeqId)
	args280 := NewGetRowArgs()
	args280.TableName = tableName
	args280.Row = row
	args280.Attributes = attributes
	err = args280.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRow() (value []*TRowResult, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error282 := thrift.NewTApplicationExceptionDefault()
		var error283 error
		error283, err = error282.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error283
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result281 := NewGetRowResult()
	err = result281.Read(iprot)
	iprot.ReadMessageEnd()
	value = result281.Success
	if result281.Io != nil {
		io = result281.Io
	}
	return
}

/**
 * Get the specified columns for the specified table and row at the latest
 * timestamp. Returns an empty list if the row does not exist.
 * 
 * @return TRowResult containing the row and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Columns: List of columns to return, null for all columns
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRowWithColumns(tableName Text, row Text, columns []Text, attributes map[string]Text) (retval284 []*TRowResult, io *IOError, err error) {
	err = p.SendGetRowWithColumns(tableName, row, columns, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRowWithColumns()
}

func (p *HbaseClient) SendGetRowWithColumns(tableName Text, row Text, columns []Text, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRowWithColumns", thrift.CALL, p.SeqId)
	args285 := NewGetRowWithColumnsArgs()
	args285.TableName = tableName
	args285.Row = row
	args285.Columns = columns
	args285.Attributes = attributes
	err = args285.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRowWithColumns() (value []*TRowResult, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error287 := thrift.NewTApplicationExceptionDefault()
		var error288 error
		error288, err = error287.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error288
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result286 := NewGetRowWithColumnsResult()
	err = result286.Read(iprot)
	iprot.ReadMessageEnd()
	value = result286.Success
	if result286.Io != nil {
		io = result286.Io
	}
	return
}

/**
 * Get all the data for the specified table and row at the specified
 * timestamp. Returns an empty list if the row does not exist.
 * 
 * @return TRowResult containing the row and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of the table
 *  - Row: row key
 *  - Timestamp: timestamp
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRowTs(tableName Text, row Text, timestamp int64, attributes map[string]Text) (retval289 []*TRowResult, io *IOError, err error) {
	err = p.SendGetRowTs(tableName, row, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRowTs()
}

func (p *HbaseClient) SendGetRowTs(tableName Text, row Text, timestamp int64, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRowTs", thrift.CALL, p.SeqId)
	args290 := NewGetRowTsArgs()
	args290.TableName = tableName
	args290.Row = row
	args290.Timestamp = timestamp
	args290.Attributes = attributes
	err = args290.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRowTs() (value []*TRowResult, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error292 := thrift.NewTApplicationExceptionDefault()
		var error293 error
		error293, err = error292.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error293
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result291 := NewGetRowTsResult()
	err = result291.Read(iprot)
	iprot.ReadMessageEnd()
	value = result291.Success
	if result291.Io != nil {
		io = result291.Io
	}
	return
}

/**
 * Get the specified columns for the specified table and row at the specified
 * timestamp. Returns an empty list if the row does not exist.
 * 
 * @return TRowResult containing the row and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Columns: List of columns to return, null for all columns
 *  - Timestamp
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRowWithColumnsTs(tableName Text, row Text, columns []Text, timestamp int64, attributes map[string]Text) (retval294 []*TRowResult, io *IOError, err error) {
	err = p.SendGetRowWithColumnsTs(tableName, row, columns, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRowWithColumnsTs()
}

func (p *HbaseClient) SendGetRowWithColumnsTs(tableName Text, row Text, columns []Text, timestamp int64, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRowWithColumnsTs", thrift.CALL, p.SeqId)
	args295 := NewGetRowWithColumnsTsArgs()
	args295.TableName = tableName
	args295.Row = row
	args295.Columns = columns
	args295.Timestamp = timestamp
	args295.Attributes = attributes
	err = args295.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRowWithColumnsTs() (value []*TRowResult, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error297 := thrift.NewTApplicationExceptionDefault()
		var error298 error
		error298, err = error297.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error298
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result296 := NewGetRowWithColumnsTsResult()
	err = result296.Read(iprot)
	iprot.ReadMessageEnd()
	value = result296.Success
	if result296.Io != nil {
		io = result296.Io
	}
	return
}

/**
 * Get the specified num versions of the specified columns for the specified table and row.
 * Returns an empty list if the row does not exist.
 * 
 * @return TRowResult containing the row and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Columns: List of columns to return, null for all columns
 *  - NumVersions: number of versions to retrieve
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRowWithColumnsMaxVer(tableName Text, row Text, columns []Text, numVersions int32, attributes map[string]Text) (retval299 []*TRowResultWithMultiColVer, io *IOError, err error) {
	err = p.SendGetRowWithColumnsMaxVer(tableName, row, columns, numVersions, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRowWithColumnsMaxVer()
}

func (p *HbaseClient) SendGetRowWithColumnsMaxVer(tableName Text, row Text, columns []Text, numVersions int32, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRowWithColumnsMaxVer", thrift.CALL, p.SeqId)
	args300 := NewGetRowWithColumnsMaxVerArgs()
	args300.TableName = tableName
	args300.Row = row
	args300.Columns = columns
	args300.NumVersions = numVersions
	args300.Attributes = attributes
	err = args300.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRowWithColumnsMaxVer() (value []*TRowResultWithMultiColVer, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error302 := thrift.NewTApplicationExceptionDefault()
		var error303 error
		error303, err = error302.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error303
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result301 := NewGetRowWithColumnsMaxVerResult()
	err = result301.Read(iprot)
	iprot.ReadMessageEnd()
	value = result301.Success
	if result301.Io != nil {
		io = result301.Io
	}
	return
}

/**
 * Get the specified num versions of  the specified columns for the specified table and
 * row at the specified timestamp. Returns an empty list if the row does not exist.
 * 
 * @return TRowResult containing the row and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Columns: List of columns to return, null for all columns
 *  - Timestamp
 *  - NumVersions: number of versions to retrieve
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRowWithColumnsTsMaxVer(tableName Text, row Text, columns []Text, timestamp int64, numVersions int32, attributes map[string]Text) (retval304 []*TRowResultWithMultiColVer, io *IOError, err error) {
	err = p.SendGetRowWithColumnsTsMaxVer(tableName, row, columns, timestamp, numVersions, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRowWithColumnsTsMaxVer()
}

func (p *HbaseClient) SendGetRowWithColumnsTsMaxVer(tableName Text, row Text, columns []Text, timestamp int64, numVersions int32, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRowWithColumnsTsMaxVer", thrift.CALL, p.SeqId)
	args305 := NewGetRowWithColumnsTsMaxVerArgs()
	args305.TableName = tableName
	args305.Row = row
	args305.Columns = columns
	args305.Timestamp = timestamp
	args305.NumVersions = numVersions
	args305.Attributes = attributes
	err = args305.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRowWithColumnsTsMaxVer() (value []*TRowResultWithMultiColVer, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error307 := thrift.NewTApplicationExceptionDefault()
		var error308 error
		error308, err = error307.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error308
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result306 := NewGetRowWithColumnsTsMaxVerResult()
	err = result306.Read(iprot)
	iprot.ReadMessageEnd()
	value = result306.Success
	if result306.Io != nil {
		io = result306.Io
	}
	return
}

/**
 * Get all the data for the specified table and rows at the latest
 * timestamp. Returns an empty list if no rows exist.
 * 
 * @return TRowResult containing the rows and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Rows: row keys
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRows(tableName Text, rows []Text, attributes map[string]Text) (retval309 []*TRowResult, io *IOError, err error) {
	err = p.SendGetRows(tableName, rows, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRows()
}

func (p *HbaseClient) SendGetRows(tableName Text, rows []Text, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRows", thrift.CALL, p.SeqId)
	args310 := NewGetRowsArgs()
	args310.TableName = tableName
	args310.Rows = rows
	args310.Attributes = attributes
	err = args310.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRows() (value []*TRowResult, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error312 := thrift.NewTApplicationExceptionDefault()
		var error313 error
		error313, err = error312.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error313
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result311 := NewGetRowsResult()
	err = result311.Read(iprot)
	iprot.ReadMessageEnd()
	value = result311.Success
	if result311.Io != nil {
		io = result311.Io
	}
	return
}

/**
 * Get the specified columns for the specified table and rows at the latest
 * timestamp. Returns an empty list if no rows exist.
 * 
 * @return TRowResult containing the rows and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Rows: row keys
 *  - Columns: List of columns to return, null for all columns
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRowsWithColumns(tableName Text, rows []Text, columns []Text, attributes map[string]Text) (retval314 []*TRowResult, io *IOError, err error) {
	err = p.SendGetRowsWithColumns(tableName, rows, columns, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRowsWithColumns()
}

func (p *HbaseClient) SendGetRowsWithColumns(tableName Text, rows []Text, columns []Text, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRowsWithColumns", thrift.CALL, p.SeqId)
	args315 := NewGetRowsWithColumnsArgs()
	args315.TableName = tableName
	args315.Rows = rows
	args315.Columns = columns
	args315.Attributes = attributes
	err = args315.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRowsWithColumns() (value []*TRowResult, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error317 := thrift.NewTApplicationExceptionDefault()
		var error318 error
		error318, err = error317.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error318
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result316 := NewGetRowsWithColumnsResult()
	err = result316.Read(iprot)
	iprot.ReadMessageEnd()
	value = result316.Success
	if result316.Io != nil {
		io = result316.Io
	}
	return
}

/**
 * Get all the data for the specified table and rows at the specified
 * timestamp. Returns an empty list if no rows exist.
 * 
 * @return TRowResult containing the rows and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of the table
 *  - Rows: row keys
 *  - Timestamp: timestamp
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRowsTs(tableName Text, rows []Text, timestamp int64, attributes map[string]Text) (retval319 []*TRowResult, io *IOError, err error) {
	err = p.SendGetRowsTs(tableName, rows, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRowsTs()
}

func (p *HbaseClient) SendGetRowsTs(tableName Text, rows []Text, timestamp int64, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRowsTs", thrift.CALL, p.SeqId)
	args320 := NewGetRowsTsArgs()
	args320.TableName = tableName
	args320.Rows = rows
	args320.Timestamp = timestamp
	args320.Attributes = attributes
	err = args320.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRowsTs() (value []*TRowResult, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error322 := thrift.NewTApplicationExceptionDefault()
		var error323 error
		error323, err = error322.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error323
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result321 := NewGetRowsTsResult()
	err = result321.Read(iprot)
	iprot.ReadMessageEnd()
	value = result321.Success
	if result321.Io != nil {
		io = result321.Io
	}
	return
}

/**
 * Get the specified columns for the specified table and rows at the specified
 * timestamp. Returns an empty list if no rows exist.
 * 
 * @return TRowResult containing the rows and map of columns to TCells
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Rows: row keys
 *  - Columns: List of columns to return, null for all columns
 *  - Timestamp
 *  - Attributes: Get attributes
 */
func (p *HbaseClient) GetRowsWithColumnsTs(tableName Text, rows []Text, columns []Text, timestamp int64, attributes map[string]Text) (retval324 []*TRowResult, io *IOError, err error) {
	err = p.SendGetRowsWithColumnsTs(tableName, rows, columns, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvGetRowsWithColumnsTs()
}

func (p *HbaseClient) SendGetRowsWithColumnsTs(tableName Text, rows []Text, columns []Text, timestamp int64, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRowsWithColumnsTs", thrift.CALL, p.SeqId)
	args325 := NewGetRowsWithColumnsTsArgs()
	args325.TableName = tableName
	args325.Rows = rows
	args325.Columns = columns
	args325.Timestamp = timestamp
	args325.Attributes = attributes
	err = args325.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRowsWithColumnsTs() (value []*TRowResult, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error327 := thrift.NewTApplicationExceptionDefault()
		var error328 error
		error328, err = error327.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error328
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result326 := NewGetRowsWithColumnsTsResult()
	err = result326.Read(iprot)
	iprot.ReadMessageEnd()
	value = result326.Success
	if result326.Io != nil {
		io = result326.Io
	}
	return
}

/**
 * Apply a series of mutations (updates/deletes) to a row in a
 * single transaction.  If an exception is thrown, then the
 * transaction is aborted.  Default current timestamp is used, and
 * all entries will have an identical timestamp.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Mutations: list of mutation commands
 *  - Attributes: Mutation attributes
 */
func (p *HbaseClient) MutateRow(tableName Text, row Text, mutations []*Mutation, attributes map[string]Text) (io *IOError, ia *IllegalArgument, err error) {
	err = p.SendMutateRow(tableName, row, mutations, attributes)
	if err != nil {
		return
	}
	return p.RecvMutateRow()
}

func (p *HbaseClient) SendMutateRow(tableName Text, row Text, mutations []*Mutation, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("mutateRow", thrift.CALL, p.SeqId)
	args330 := NewMutateRowArgs()
	args330.TableName = tableName
	args330.Row = row
	args330.Mutations = mutations
	args330.Attributes = attributes
	err = args330.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvMutateRow() (io *IOError, ia *IllegalArgument, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error332 := thrift.NewTApplicationExceptionDefault()
		var error333 error
		error333, err = error332.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error333
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result331 := NewMutateRowResult()
	err = result331.Read(iprot)
	iprot.ReadMessageEnd()
	if result331.Io != nil {
		io = result331.Io
	}
	if result331.Ia != nil {
		ia = result331.Ia
	}
	return
}

/**
 * Apply a series of mutations (updates/deletes) to a row in a
 * single transaction.  If an exception is thrown, then the
 * transaction is aborted.  The specified timestamp is used, and
 * all entries will have an identical timestamp.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Mutations: list of mutation commands
 *  - Timestamp: timestamp
 *  - Attributes: Mutation attributes
 */
func (p *HbaseClient) MutateRowTs(tableName Text, row Text, mutations []*Mutation, timestamp int64, attributes map[string]Text) (io *IOError, ia *IllegalArgument, err error) {
	err = p.SendMutateRowTs(tableName, row, mutations, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvMutateRowTs()
}

func (p *HbaseClient) SendMutateRowTs(tableName Text, row Text, mutations []*Mutation, timestamp int64, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("mutateRowTs", thrift.CALL, p.SeqId)
	args335 := NewMutateRowTsArgs()
	args335.TableName = tableName
	args335.Row = row
	args335.Mutations = mutations
	args335.Timestamp = timestamp
	args335.Attributes = attributes
	err = args335.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvMutateRowTs() (io *IOError, ia *IllegalArgument, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error337 := thrift.NewTApplicationExceptionDefault()
		var error338 error
		error338, err = error337.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error338
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result336 := NewMutateRowTsResult()
	err = result336.Read(iprot)
	iprot.ReadMessageEnd()
	if result336.Io != nil {
		io = result336.Io
	}
	if result336.Ia != nil {
		ia = result336.Ia
	}
	return
}

/**
 * Apply a series of batches (each a series of mutations on a single row)
 * in a single transaction.  If an exception is thrown, then the
 * transaction is aborted.  Default current timestamp is used, and
 * all entries will have an identical timestamp.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - RowBatches: list of row batches
 *  - Attributes: Mutation attributes
 */
func (p *HbaseClient) MutateRows(tableName Text, rowBatches []*BatchMutation, attributes map[string]Text) (io *IOError, ia *IllegalArgument, err error) {
	err = p.SendMutateRows(tableName, rowBatches, attributes)
	if err != nil {
		return
	}
	return p.RecvMutateRows()
}

func (p *HbaseClient) SendMutateRows(tableName Text, rowBatches []*BatchMutation, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("mutateRows", thrift.CALL, p.SeqId)
	args340 := NewMutateRowsArgs()
	args340.TableName = tableName
	args340.RowBatches = rowBatches
	args340.Attributes = attributes
	err = args340.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvMutateRows() (io *IOError, ia *IllegalArgument, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error342 := thrift.NewTApplicationExceptionDefault()
		var error343 error
		error343, err = error342.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error343
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result341 := NewMutateRowsResult()
	err = result341.Read(iprot)
	iprot.ReadMessageEnd()
	if result341.Io != nil {
		io = result341.Io
	}
	if result341.Ia != nil {
		ia = result341.Ia
	}
	return
}

/**
 * Apply a series of batches (each a series of mutations on a single row)
 * in a single transaction.  If an exception is thrown, then the
 * transaction is aborted.  The specified timestamp is used, and
 * all entries will have an identical timestamp.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - RowBatches: list of row batches
 *  - Timestamp: timestamp
 *  - Attributes: Mutation attributes
 */
func (p *HbaseClient) MutateRowsTs(tableName Text, rowBatches []*BatchMutation, timestamp int64, attributes map[string]Text) (io *IOError, ia *IllegalArgument, err error) {
	err = p.SendMutateRowsTs(tableName, rowBatches, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvMutateRowsTs()
}

func (p *HbaseClient) SendMutateRowsTs(tableName Text, rowBatches []*BatchMutation, timestamp int64, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("mutateRowsTs", thrift.CALL, p.SeqId)
	args345 := NewMutateRowsTsArgs()
	args345.TableName = tableName
	args345.RowBatches = rowBatches
	args345.Timestamp = timestamp
	args345.Attributes = attributes
	err = args345.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvMutateRowsTs() (io *IOError, ia *IllegalArgument, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error347 := thrift.NewTApplicationExceptionDefault()
		var error348 error
		error348, err = error347.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error348
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result346 := NewMutateRowsTsResult()
	err = result346.Read(iprot)
	iprot.ReadMessageEnd()
	if result346.Io != nil {
		io = result346.Io
	}
	if result346.Ia != nil {
		ia = result346.Ia
	}
	return
}

/**
 * Atomically increment the column value specified.  Returns the next value post increment.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row to increment
 *  - Column: name of column
 *  - Value: amount to increment by
 */
func (p *HbaseClient) AtomicIncrement(tableName Text, row Text, column Text, value int64) (retval349 int64, io *IOError, ia *IllegalArgument, err error) {
	err = p.SendAtomicIncrement(tableName, row, column, value)
	if err != nil {
		return
	}
	return p.RecvAtomicIncrement()
}

func (p *HbaseClient) SendAtomicIncrement(tableName Text, row Text, column Text, value int64) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("atomicIncrement", thrift.CALL, p.SeqId)
	args350 := NewAtomicIncrementArgs()
	args350.TableName = tableName
	args350.Row = row
	args350.Column = column
	args350.Value = value
	err = args350.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvAtomicIncrement() (value int64, io *IOError, ia *IllegalArgument, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error352 := thrift.NewTApplicationExceptionDefault()
		var error353 error
		error353, err = error352.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error353
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result351 := NewAtomicIncrementResult()
	err = result351.Read(iprot)
	iprot.ReadMessageEnd()
	value = result351.Success
	if result351.Io != nil {
		io = result351.Io
	}
	if result351.Ia != nil {
		ia = result351.Ia
	}
	return
}

/**
 * Delete all cells that match the passed row and column.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: Row to update
 *  - Column: name of column whose value is to be deleted
 *  - Attributes: Delete attributes
 */
func (p *HbaseClient) DeleteAll(tableName Text, row Text, column Text, attributes map[string]Text) (io *IOError, err error) {
	err = p.SendDeleteAll(tableName, row, column, attributes)
	if err != nil {
		return
	}
	return p.RecvDeleteAll()
}

func (p *HbaseClient) SendDeleteAll(tableName Text, row Text, column Text, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("deleteAll", thrift.CALL, p.SeqId)
	args355 := NewDeleteAllArgs()
	args355.TableName = tableName
	args355.Row = row
	args355.Column = column
	args355.Attributes = attributes
	err = args355.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvDeleteAll() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error357 := thrift.NewTApplicationExceptionDefault()
		var error358 error
		error358, err = error357.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error358
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result356 := NewDeleteAllResult()
	err = result356.Read(iprot)
	iprot.ReadMessageEnd()
	if result356.Io != nil {
		io = result356.Io
	}
	return
}

/**
 * Delete all cells that match the passed row and column and whose
 * timestamp is equal-to or older than the passed timestamp.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: Row to update
 *  - Column: name of column whose value is to be deleted
 *  - Timestamp: timestamp
 *  - Attributes: Delete attributes
 */
func (p *HbaseClient) DeleteAllTs(tableName Text, row Text, column Text, timestamp int64, attributes map[string]Text) (io *IOError, err error) {
	err = p.SendDeleteAllTs(tableName, row, column, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvDeleteAllTs()
}

func (p *HbaseClient) SendDeleteAllTs(tableName Text, row Text, column Text, timestamp int64, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("deleteAllTs", thrift.CALL, p.SeqId)
	args360 := NewDeleteAllTsArgs()
	args360.TableName = tableName
	args360.Row = row
	args360.Column = column
	args360.Timestamp = timestamp
	args360.Attributes = attributes
	err = args360.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvDeleteAllTs() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error362 := thrift.NewTApplicationExceptionDefault()
		var error363 error
		error363, err = error362.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error363
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result361 := NewDeleteAllTsResult()
	err = result361.Read(iprot)
	iprot.ReadMessageEnd()
	if result361.Io != nil {
		io = result361.Io
	}
	return
}

/**
 * Completely delete the row's cells.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: key of the row to be completely deleted.
 *  - Attributes: Delete attributes
 */
func (p *HbaseClient) DeleteAllRow(tableName Text, row Text, attributes map[string]Text) (io *IOError, err error) {
	err = p.SendDeleteAllRow(tableName, row, attributes)
	if err != nil {
		return
	}
	return p.RecvDeleteAllRow()
}

func (p *HbaseClient) SendDeleteAllRow(tableName Text, row Text, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("deleteAllRow", thrift.CALL, p.SeqId)
	args365 := NewDeleteAllRowArgs()
	args365.TableName = tableName
	args365.Row = row
	args365.Attributes = attributes
	err = args365.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvDeleteAllRow() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error367 := thrift.NewTApplicationExceptionDefault()
		var error368 error
		error368, err = error367.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error368
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result366 := NewDeleteAllRowResult()
	err = result366.Read(iprot)
	iprot.ReadMessageEnd()
	if result366.Io != nil {
		io = result366.Io
	}
	return
}

/**
 * Increment a cell by the ammount.
 * Increments can be applied async if hbase.regionserver.thrift.coalesceIncrement is set to true.
 * False is the default.  Turn to true if you need the extra performance and can accept some
 * data loss if a thrift server dies with increments still in the queue.
 * 
 * Parameters:
 *  - Increment: The single increment to apply
 */
func (p *HbaseClient) Increment(increment *TIncrement) (io *IOError, err error) {
	err = p.SendIncrement(increment)
	if err != nil {
		return
	}
	return p.RecvIncrement()
}

func (p *HbaseClient) SendIncrement(increment *TIncrement) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("increment", thrift.CALL, p.SeqId)
	args370 := NewIncrementArgs()
	args370.Increment = increment
	err = args370.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvIncrement() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error372 := thrift.NewTApplicationExceptionDefault()
		var error373 error
		error373, err = error372.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error373
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result371 := NewIncrementResult()
	err = result371.Read(iprot)
	iprot.ReadMessageEnd()
	if result371.Io != nil {
		io = result371.Io
	}
	return
}

/**
 * Parameters:
 *  - Increments: The list of increments
 */
func (p *HbaseClient) IncrementRows(increments []*TIncrement) (io *IOError, err error) {
	err = p.SendIncrementRows(increments)
	if err != nil {
		return
	}
	return p.RecvIncrementRows()
}

func (p *HbaseClient) SendIncrementRows(increments []*TIncrement) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("incrementRows", thrift.CALL, p.SeqId)
	args375 := NewIncrementRowsArgs()
	args375.Increments = increments
	err = args375.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvIncrementRows() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error377 := thrift.NewTApplicationExceptionDefault()
		var error378 error
		error378, err = error377.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error378
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result376 := NewIncrementRowsResult()
	err = result376.Read(iprot)
	iprot.ReadMessageEnd()
	if result376.Io != nil {
		io = result376.Io
	}
	return
}

/**
 * Completely delete the row's cells marked with a timestamp
 * equal-to or older than the passed timestamp.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: key of the row to be completely deleted.
 *  - Timestamp: timestamp
 *  - Attributes: Delete attributes
 */
func (p *HbaseClient) DeleteAllRowTs(tableName Text, row Text, timestamp int64, attributes map[string]Text) (io *IOError, err error) {
	err = p.SendDeleteAllRowTs(tableName, row, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvDeleteAllRowTs()
}

func (p *HbaseClient) SendDeleteAllRowTs(tableName Text, row Text, timestamp int64, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("deleteAllRowTs", thrift.CALL, p.SeqId)
	args380 := NewDeleteAllRowTsArgs()
	args380.TableName = tableName
	args380.Row = row
	args380.Timestamp = timestamp
	args380.Attributes = attributes
	err = args380.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvDeleteAllRowTs() (io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error382 := thrift.NewTApplicationExceptionDefault()
		var error383 error
		error383, err = error382.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error383
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result381 := NewDeleteAllRowTsResult()
	err = result381.Read(iprot)
	iprot.ReadMessageEnd()
	if result381.Io != nil {
		io = result381.Io
	}
	return
}

/**
 * Get a scanner on the current table, using the Scan instance
 * for the scan parameters.
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Scan: Scan instance
 *  - Attributes: Scan attributes
 */
func (p *HbaseClient) ScannerOpenWithScan(tableName Text, scan *TScan, attributes map[string]Text) (retval384 ScannerID, io *IOError, err error) {
	err = p.SendScannerOpenWithScan(tableName, scan, attributes)
	if err != nil {
		return
	}
	return p.RecvScannerOpenWithScan()
}

func (p *HbaseClient) SendScannerOpenWithScan(tableName Text, scan *TScan, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerOpenWithScan", thrift.CALL, p.SeqId)
	args385 := NewScannerOpenWithScanArgs()
	args385.TableName = tableName
	args385.Scan = scan
	args385.Attributes = attributes
	err = args385.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerOpenWithScan() (value ScannerID, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error387 := thrift.NewTApplicationExceptionDefault()
		var error388 error
		error388, err = error387.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error388
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result386 := NewScannerOpenWithScanResult()
	err = result386.Read(iprot)
	iprot.ReadMessageEnd()
	value = result386.Success
	if result386.Io != nil {
		io = result386.Io
	}
	return
}

/**
 * Get a scanner on the current table starting at the specified row and
 * ending at the last row in the table.  Return the specified columns.
 * 
 * @return scanner id to be used with other scanner procedures
 * 
 * Parameters:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Attributes: Scan attributes
 */
func (p *HbaseClient) ScannerOpen(tableName Text, startRow Text, columns []Text, attributes map[string]Text) (retval389 ScannerID, io *IOError, err error) {
	err = p.SendScannerOpen(tableName, startRow, columns, attributes)
	if err != nil {
		return
	}
	return p.RecvScannerOpen()
}

func (p *HbaseClient) SendScannerOpen(tableName Text, startRow Text, columns []Text, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerOpen", thrift.CALL, p.SeqId)
	args390 := NewScannerOpenArgs()
	args390.TableName = tableName
	args390.StartRow = startRow
	args390.Columns = columns
	args390.Attributes = attributes
	err = args390.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerOpen() (value ScannerID, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error392 := thrift.NewTApplicationExceptionDefault()
		var error393 error
		error393, err = error392.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error393
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result391 := NewScannerOpenResult()
	err = result391.Read(iprot)
	iprot.ReadMessageEnd()
	value = result391.Success
	if result391.Io != nil {
		io = result391.Io
	}
	return
}

/**
 * Get a scanner on the current table starting and stopping at the
 * specified rows.  ending at the last row in the table.  Return the
 * specified columns.
 * 
 * @return scanner id to be used with other scanner procedures
 * 
 * Parameters:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - StopRow: row to stop scanning on. This row is *not* included in the
 * scanner's results
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Attributes: Scan attributes
 */
func (p *HbaseClient) ScannerOpenWithStop(tableName Text, startRow Text, stopRow Text, columns []Text, attributes map[string]Text) (retval394 ScannerID, io *IOError, err error) {
	err = p.SendScannerOpenWithStop(tableName, startRow, stopRow, columns, attributes)
	if err != nil {
		return
	}
	return p.RecvScannerOpenWithStop()
}

func (p *HbaseClient) SendScannerOpenWithStop(tableName Text, startRow Text, stopRow Text, columns []Text, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerOpenWithStop", thrift.CALL, p.SeqId)
	args395 := NewScannerOpenWithStopArgs()
	args395.TableName = tableName
	args395.StartRow = startRow
	args395.StopRow = stopRow
	args395.Columns = columns
	args395.Attributes = attributes
	err = args395.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerOpenWithStop() (value ScannerID, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error397 := thrift.NewTApplicationExceptionDefault()
		var error398 error
		error398, err = error397.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error398
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result396 := NewScannerOpenWithStopResult()
	err = result396.Read(iprot)
	iprot.ReadMessageEnd()
	value = result396.Success
	if result396.Io != nil {
		io = result396.Io
	}
	return
}

/**
 * Open a scanner for a given prefix.  That is all rows will have the specified
 * prefix. No other rows will be returned.
 * 
 * @return scanner id to use with other scanner calls
 * 
 * Parameters:
 *  - TableName: name of table
 *  - StartAndPrefix: the prefix (and thus start row) of the keys you want
 *  - Columns: the columns you want returned
 *  - Attributes: Scan attributes
 */
func (p *HbaseClient) ScannerOpenWithPrefix(tableName Text, startAndPrefix Text, columns []Text, attributes map[string]Text) (retval399 ScannerID, io *IOError, err error) {
	err = p.SendScannerOpenWithPrefix(tableName, startAndPrefix, columns, attributes)
	if err != nil {
		return
	}
	return p.RecvScannerOpenWithPrefix()
}

func (p *HbaseClient) SendScannerOpenWithPrefix(tableName Text, startAndPrefix Text, columns []Text, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerOpenWithPrefix", thrift.CALL, p.SeqId)
	args400 := NewScannerOpenWithPrefixArgs()
	args400.TableName = tableName
	args400.StartAndPrefix = startAndPrefix
	args400.Columns = columns
	args400.Attributes = attributes
	err = args400.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerOpenWithPrefix() (value ScannerID, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error402 := thrift.NewTApplicationExceptionDefault()
		var error403 error
		error403, err = error402.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error403
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result401 := NewScannerOpenWithPrefixResult()
	err = result401.Read(iprot)
	iprot.ReadMessageEnd()
	value = result401.Success
	if result401.Io != nil {
		io = result401.Io
	}
	return
}

/**
 * Get a scanner on the current table starting at the specified row and
 * ending at the last row in the table.  Return the specified columns.
 * Only values with the specified timestamp are returned.
 * 
 * @return scanner id to be used with other scanner procedures
 * 
 * Parameters:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Timestamp: timestamp
 *  - Attributes: Scan attributes
 */
func (p *HbaseClient) ScannerOpenTs(tableName Text, startRow Text, columns []Text, timestamp int64, attributes map[string]Text) (retval404 ScannerID, io *IOError, err error) {
	err = p.SendScannerOpenTs(tableName, startRow, columns, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvScannerOpenTs()
}

func (p *HbaseClient) SendScannerOpenTs(tableName Text, startRow Text, columns []Text, timestamp int64, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerOpenTs", thrift.CALL, p.SeqId)
	args405 := NewScannerOpenTsArgs()
	args405.TableName = tableName
	args405.StartRow = startRow
	args405.Columns = columns
	args405.Timestamp = timestamp
	args405.Attributes = attributes
	err = args405.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerOpenTs() (value ScannerID, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error407 := thrift.NewTApplicationExceptionDefault()
		var error408 error
		error408, err = error407.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error408
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result406 := NewScannerOpenTsResult()
	err = result406.Read(iprot)
	iprot.ReadMessageEnd()
	value = result406.Success
	if result406.Io != nil {
		io = result406.Io
	}
	return
}

/**
 * Get a scanner on the current table starting and stopping at the
 * specified rows.  ending at the last row in the table.  Return the
 * specified columns.  Only values with the specified timestamp are
 * returned.
 * 
 * @return scanner id to be used with other scanner procedures
 * 
 * Parameters:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - StopRow: row to stop scanning on. This row is *not* included in the
 * scanner's results
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Timestamp: timestamp
 *  - Attributes: Scan attributes
 */
func (p *HbaseClient) ScannerOpenWithStopTs(tableName Text, startRow Text, stopRow Text, columns []Text, timestamp int64, attributes map[string]Text) (retval409 ScannerID, io *IOError, err error) {
	err = p.SendScannerOpenWithStopTs(tableName, startRow, stopRow, columns, timestamp, attributes)
	if err != nil {
		return
	}
	return p.RecvScannerOpenWithStopTs()
}

func (p *HbaseClient) SendScannerOpenWithStopTs(tableName Text, startRow Text, stopRow Text, columns []Text, timestamp int64, attributes map[string]Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerOpenWithStopTs", thrift.CALL, p.SeqId)
	args410 := NewScannerOpenWithStopTsArgs()
	args410.TableName = tableName
	args410.StartRow = startRow
	args410.StopRow = stopRow
	args410.Columns = columns
	args410.Timestamp = timestamp
	args410.Attributes = attributes
	err = args410.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerOpenWithStopTs() (value ScannerID, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error412 := thrift.NewTApplicationExceptionDefault()
		var error413 error
		error413, err = error412.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error413
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result411 := NewScannerOpenWithStopTsResult()
	err = result411.Read(iprot)
	iprot.ReadMessageEnd()
	value = result411.Success
	if result411.Io != nil {
		io = result411.Io
	}
	return
}

/**
 * Returns the scanner's current row value and advances to the next
 * row in the table.  When there are no more rows in the table, or a key
 * greater-than-or-equal-to the scanner's specified stopRow is reached,
 * an empty list is returned.
 * 
 * @return a TRowResult containing the current row and a map of the columns to TCells.
 * 
 * @throws IllegalArgument if ScannerID is invalid
 * 
 * @throws NotFound when the scanner reaches the end
 * 
 * Parameters:
 *  - Id: id of a scanner returned by scannerOpen
 */
func (p *HbaseClient) ScannerGet(id ScannerID) (retval414 []*TRowResult, io *IOError, ia *IllegalArgument, err error) {
	err = p.SendScannerGet(id)
	if err != nil {
		return
	}
	return p.RecvScannerGet()
}

func (p *HbaseClient) SendScannerGet(id ScannerID) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerGet", thrift.CALL, p.SeqId)
	args415 := NewScannerGetArgs()
	args415.Id = id
	err = args415.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerGet() (value []*TRowResult, io *IOError, ia *IllegalArgument, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error417 := thrift.NewTApplicationExceptionDefault()
		var error418 error
		error418, err = error417.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error418
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result416 := NewScannerGetResult()
	err = result416.Read(iprot)
	iprot.ReadMessageEnd()
	value = result416.Success
	if result416.Io != nil {
		io = result416.Io
	}
	if result416.Ia != nil {
		ia = result416.Ia
	}
	return
}

/**
 * Returns, starting at the scanner's current row value nbRows worth of
 * rows and advances to the next row in the table.  When there are no more
 * rows in the table, or a key greater-than-or-equal-to the scanner's
 * specified stopRow is reached,  an empty list is returned.
 * 
 * @return a TRowResult containing the current row and a map of the columns to TCells.
 * 
 * @throws IllegalArgument if ScannerID is invalid
 * 
 * @throws NotFound when the scanner reaches the end
 * 
 * Parameters:
 *  - Id: id of a scanner returned by scannerOpen
 *  - NbRows: number of results to return
 */
func (p *HbaseClient) ScannerGetList(id ScannerID, nbRows int32) (retval419 []*TRowResult, io *IOError, ia *IllegalArgument, err error) {
	err = p.SendScannerGetList(id, nbRows)
	if err != nil {
		return
	}
	return p.RecvScannerGetList()
}

func (p *HbaseClient) SendScannerGetList(id ScannerID, nbRows int32) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerGetList", thrift.CALL, p.SeqId)
	args420 := NewScannerGetListArgs()
	args420.Id = id
	args420.NbRows = nbRows
	err = args420.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerGetList() (value []*TRowResult, io *IOError, ia *IllegalArgument, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error422 := thrift.NewTApplicationExceptionDefault()
		var error423 error
		error423, err = error422.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error423
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result421 := NewScannerGetListResult()
	err = result421.Read(iprot)
	iprot.ReadMessageEnd()
	value = result421.Success
	if result421.Io != nil {
		io = result421.Io
	}
	if result421.Ia != nil {
		ia = result421.Ia
	}
	return
}

/**
 * Closes the server-state associated with an open scanner.
 * 
 * @throws IllegalArgument if ScannerID is invalid
 * 
 * Parameters:
 *  - Id: id of a scanner returned by scannerOpen
 */
func (p *HbaseClient) ScannerClose(id ScannerID) (io *IOError, ia *IllegalArgument, err error) {
	err = p.SendScannerClose(id)
	if err != nil {
		return
	}
	return p.RecvScannerClose()
}

func (p *HbaseClient) SendScannerClose(id ScannerID) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("scannerClose", thrift.CALL, p.SeqId)
	args425 := NewScannerCloseArgs()
	args425.Id = id
	err = args425.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvScannerClose() (io *IOError, ia *IllegalArgument, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error427 := thrift.NewTApplicationExceptionDefault()
		var error428 error
		error428, err = error427.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error428
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result426 := NewScannerCloseResult()
	err = result426.Read(iprot)
	iprot.ReadMessageEnd()
	if result426.Io != nil {
		io = result426.Io
	}
	if result426.Ia != nil {
		ia = result426.Ia
	}
	return
}

/**
 * Get the row just before the specified one.
 * 
 * @return value for specified row/column
 * 
 * Parameters:
 *  - TableName: name of table
 *  - Row: row key
 *  - Family: column name
 */
func (p *HbaseClient) GetRowOrBefore(tableName Text, row Text, family Text) (retval429 []*TCell, io *IOError, err error) {
	err = p.SendGetRowOrBefore(tableName, row, family)
	if err != nil {
		return
	}
	return p.RecvGetRowOrBefore()
}

func (p *HbaseClient) SendGetRowOrBefore(tableName Text, row Text, family Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRowOrBefore", thrift.CALL, p.SeqId)
	args430 := NewGetRowOrBeforeArgs()
	args430.TableName = tableName
	args430.Row = row
	args430.Family = family
	err = args430.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRowOrBefore() (value []*TCell, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error432 := thrift.NewTApplicationExceptionDefault()
		var error433 error
		error433, err = error432.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error433
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result431 := NewGetRowOrBeforeResult()
	err = result431.Read(iprot)
	iprot.ReadMessageEnd()
	value = result431.Success
	if result431.Io != nil {
		io = result431.Io
	}
	return
}

/**
 * Get the regininfo for the specified row. It scans
 * the metatable to find region's start and end keys.
 * 
 * @return value for specified row/column
 * 
 * Parameters:
 *  - Row: row key
 */
func (p *HbaseClient) GetRegionInfo(row Text) (retval434 *TRegionInfo, io *IOError, err error) {
	err = p.SendGetRegionInfo(row)
	if err != nil {
		return
	}
	return p.RecvGetRegionInfo()
}

func (p *HbaseClient) SendGetRegionInfo(row Text) (err error) {
	oprot := p.OutputProtocol
	if oprot != nil {
		oprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.OutputProtocol = oprot
	}
	p.SeqId++
	oprot.WriteMessageBegin("getRegionInfo", thrift.CALL, p.SeqId)
	args435 := NewGetRegionInfoArgs()
	args435.Row = row
	err = args435.Write(oprot)
	oprot.WriteMessageEnd()
	oprot.Transport().Flush()
	return
}

func (p *HbaseClient) RecvGetRegionInfo() (value *TRegionInfo, io *IOError, err error) {
	iprot := p.InputProtocol
	if iprot == nil {
		iprot = p.ProtocolFactory.GetProtocol(p.Transport)
		p.InputProtocol = iprot
	}
	_, mTypeId, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	if mTypeId == thrift.EXCEPTION {
		error437 := thrift.NewTApplicationExceptionDefault()
		var error438 error
		error438, err = error437.Read(iprot)
		if err != nil {
			return
		}
		if err = iprot.ReadMessageEnd(); err != nil {
			return
		}
		err = error438
		return
	}
	if p.SeqId != seqId {
		err = thrift.NewTApplicationException(thrift.BAD_SEQUENCE_ID, "ping failed: out of sequence response")
		return
	}
	result436 := NewGetRegionInfoResult()
	err = result436.Read(iprot)
	iprot.ReadMessageEnd()
	value = result436.Success
	if result436.Io != nil {
		io = result436.Io
	}
	return
}

type HbaseProcessor struct {
	handler      IHbase
	processorMap map[string]thrift.TProcessorFunction
}

func (p *HbaseProcessor) Handler() IHbase {
	return p.handler
}

func (p *HbaseProcessor) AddToProcessorMap(key string, processor thrift.TProcessorFunction) {
	p.processorMap[key] = processor
}

func (p *HbaseProcessor) GetProcessorFunction(key string) (processor thrift.TProcessorFunction, exists bool) {
	processor, exists = p.processorMap[key]
	return processor, exists
}

func (p *HbaseProcessor) ProcessorMap() map[string]thrift.TProcessorFunction {
	return p.processorMap
}

func NewHbaseProcessor(handler IHbase) *HbaseProcessor {

	self439 := &HbaseProcessor{handler: handler, processorMap: make(map[string]thrift.TProcessorFunction)}
	self439.processorMap["enableTable"] = &hbaseProcessorEnableTable{handler: handler}
	self439.processorMap["disableTable"] = &hbaseProcessorDisableTable{handler: handler}
	self439.processorMap["isTableEnabled"] = &hbaseProcessorIsTableEnabled{handler: handler}
	self439.processorMap["compact"] = &hbaseProcessorCompact{handler: handler}
	self439.processorMap["majorCompact"] = &hbaseProcessorMajorCompact{handler: handler}
	self439.processorMap["getTableNames"] = &hbaseProcessorGetTableNames{handler: handler}
	self439.processorMap["getColumnDescriptors"] = &hbaseProcessorGetColumnDescriptors{handler: handler}
	self439.processorMap["getTableRegions"] = &hbaseProcessorGetTableRegions{handler: handler}
	self439.processorMap["createTable"] = &hbaseProcessorCreateTable{handler: handler}
	self439.processorMap["deleteTable"] = &hbaseProcessorDeleteTable{handler: handler}
	self439.processorMap["get"] = &hbaseProcessorGet{handler: handler}
	self439.processorMap["getVer"] = &hbaseProcessorGetVer{handler: handler}
	self439.processorMap["getVerTs"] = &hbaseProcessorGetVerTs{handler: handler}
	self439.processorMap["getRow"] = &hbaseProcessorGetRow{handler: handler}
	self439.processorMap["getRowWithColumns"] = &hbaseProcessorGetRowWithColumns{handler: handler}
	self439.processorMap["getRowTs"] = &hbaseProcessorGetRowTs{handler: handler}
	self439.processorMap["getRowWithColumnsTs"] = &hbaseProcessorGetRowWithColumnsTs{handler: handler}
	self439.processorMap["getRowWithColumnsMaxVer"] = &hbaseProcessorGetRowWithColumnsMaxVer{handler: handler}
	self439.processorMap["getRowWithColumnsTsMaxVer"] = &hbaseProcessorGetRowWithColumnsTsMaxVer{handler: handler}
	self439.processorMap["getRows"] = &hbaseProcessorGetRows{handler: handler}
	self439.processorMap["getRowsWithColumns"] = &hbaseProcessorGetRowsWithColumns{handler: handler}
	self439.processorMap["getRowsTs"] = &hbaseProcessorGetRowsTs{handler: handler}
	self439.processorMap["getRowsWithColumnsTs"] = &hbaseProcessorGetRowsWithColumnsTs{handler: handler}
	self439.processorMap["mutateRow"] = &hbaseProcessorMutateRow{handler: handler}
	self439.processorMap["mutateRowTs"] = &hbaseProcessorMutateRowTs{handler: handler}
	self439.processorMap["mutateRows"] = &hbaseProcessorMutateRows{handler: handler}
	self439.processorMap["mutateRowsTs"] = &hbaseProcessorMutateRowsTs{handler: handler}
	self439.processorMap["atomicIncrement"] = &hbaseProcessorAtomicIncrement{handler: handler}
	self439.processorMap["deleteAll"] = &hbaseProcessorDeleteAll{handler: handler}
	self439.processorMap["deleteAllTs"] = &hbaseProcessorDeleteAllTs{handler: handler}
	self439.processorMap["deleteAllRow"] = &hbaseProcessorDeleteAllRow{handler: handler}
	self439.processorMap["increment"] = &hbaseProcessorIncrement{handler: handler}
	self439.processorMap["incrementRows"] = &hbaseProcessorIncrementRows{handler: handler}
	self439.processorMap["deleteAllRowTs"] = &hbaseProcessorDeleteAllRowTs{handler: handler}
	self439.processorMap["scannerOpenWithScan"] = &hbaseProcessorScannerOpenWithScan{handler: handler}
	self439.processorMap["scannerOpen"] = &hbaseProcessorScannerOpen{handler: handler}
	self439.processorMap["scannerOpenWithStop"] = &hbaseProcessorScannerOpenWithStop{handler: handler}
	self439.processorMap["scannerOpenWithPrefix"] = &hbaseProcessorScannerOpenWithPrefix{handler: handler}
	self439.processorMap["scannerOpenTs"] = &hbaseProcessorScannerOpenTs{handler: handler}
	self439.processorMap["scannerOpenWithStopTs"] = &hbaseProcessorScannerOpenWithStopTs{handler: handler}
	self439.processorMap["scannerGet"] = &hbaseProcessorScannerGet{handler: handler}
	self439.processorMap["scannerGetList"] = &hbaseProcessorScannerGetList{handler: handler}
	self439.processorMap["scannerClose"] = &hbaseProcessorScannerClose{handler: handler}
	self439.processorMap["getRowOrBefore"] = &hbaseProcessorGetRowOrBefore{handler: handler}
	self439.processorMap["getRegionInfo"] = &hbaseProcessorGetRegionInfo{handler: handler}
	return self439
}

func (p *HbaseProcessor) Process(iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	name, _, seqId, err := iprot.ReadMessageBegin()
	if err != nil {
		return
	}
	process, nameFound := p.GetProcessorFunction(name)
	if !nameFound || process == nil {
		iprot.Skip(thrift.STRUCT)
		iprot.ReadMessageEnd()
		x440 := thrift.NewTApplicationException(thrift.UNKNOWN_METHOD, "Unknown function "+name)
		oprot.WriteMessageBegin(name, thrift.EXCEPTION, seqId)
		x440.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return false, x440
	}
	return process.Process(seqId, iprot, oprot)
}

type hbaseProcessorEnableTable struct {
	handler IHbase
}

func (p *hbaseProcessorEnableTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewEnableTableArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("enableTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewEnableTableResult()
	if result.Io, err = p.handler.EnableTable(args.TableName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing enableTable: "+err.Error())
		oprot.WriteMessageBegin("enableTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("enableTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorDisableTable struct {
	handler IHbase
}

func (p *hbaseProcessorDisableTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDisableTableArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("disableTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDisableTableResult()
	if result.Io, err = p.handler.DisableTable(args.TableName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing disableTable: "+err.Error())
		oprot.WriteMessageBegin("disableTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("disableTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorIsTableEnabled struct {
	handler IHbase
}

func (p *hbaseProcessorIsTableEnabled) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewIsTableEnabledArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("isTableEnabled", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewIsTableEnabledResult()
	if result.Success, result.Io, err = p.handler.IsTableEnabled(args.TableName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing isTableEnabled: "+err.Error())
		oprot.WriteMessageBegin("isTableEnabled", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("isTableEnabled", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorCompact struct {
	handler IHbase
}

func (p *hbaseProcessorCompact) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCompactArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("compact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCompactResult()
	if result.Io, err = p.handler.Compact(args.TableNameOrRegionName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing compact: "+err.Error())
		oprot.WriteMessageBegin("compact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("compact", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorMajorCompact struct {
	handler IHbase
}

func (p *hbaseProcessorMajorCompact) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewMajorCompactArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("majorCompact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewMajorCompactResult()
	if result.Io, err = p.handler.MajorCompact(args.TableNameOrRegionName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing majorCompact: "+err.Error())
		oprot.WriteMessageBegin("majorCompact", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("majorCompact", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetTableNames struct {
	handler IHbase
}

func (p *hbaseProcessorGetTableNames) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetTableNamesArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTableNames", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetTableNamesResult()
	if result.Success, result.Io, err = p.handler.GetTableNames(); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTableNames: "+err.Error())
		oprot.WriteMessageBegin("getTableNames", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getTableNames", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetColumnDescriptors struct {
	handler IHbase
}

func (p *hbaseProcessorGetColumnDescriptors) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetColumnDescriptorsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getColumnDescriptors", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetColumnDescriptorsResult()
	if result.Success, result.Io, err = p.handler.GetColumnDescriptors(args.TableName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getColumnDescriptors: "+err.Error())
		oprot.WriteMessageBegin("getColumnDescriptors", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getColumnDescriptors", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetTableRegions struct {
	handler IHbase
}

func (p *hbaseProcessorGetTableRegions) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetTableRegionsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getTableRegions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetTableRegionsResult()
	if result.Success, result.Io, err = p.handler.GetTableRegions(args.TableName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getTableRegions: "+err.Error())
		oprot.WriteMessageBegin("getTableRegions", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getTableRegions", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorCreateTable struct {
	handler IHbase
}

func (p *hbaseProcessorCreateTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewCreateTableArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("createTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewCreateTableResult()
	if result.Io, result.Ia, result.Exist, err = p.handler.CreateTable(args.TableName, args.ColumnFamilies); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing createTable: "+err.Error())
		oprot.WriteMessageBegin("createTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("createTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorDeleteTable struct {
	handler IHbase
}

func (p *hbaseProcessorDeleteTable) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDeleteTableArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDeleteTableResult()
	if result.Io, err = p.handler.DeleteTable(args.TableName); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteTable: "+err.Error())
		oprot.WriteMessageBegin("deleteTable", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("deleteTable", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGet struct {
	handler IHbase
}

func (p *hbaseProcessorGet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetResult()
	if result.Success, result.Io, err = p.handler.Get(args.TableName, args.Row, args.Column, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing get: "+err.Error())
		oprot.WriteMessageBegin("get", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("get", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetVer struct {
	handler IHbase
}

func (p *hbaseProcessorGetVer) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetVerArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getVer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetVerResult()
	if result.Success, result.Io, err = p.handler.GetVer(args.TableName, args.Row, args.Column, args.NumVersions, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getVer: "+err.Error())
		oprot.WriteMessageBegin("getVer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getVer", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetVerTs struct {
	handler IHbase
}

func (p *hbaseProcessorGetVerTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetVerTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getVerTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetVerTsResult()
	if result.Success, result.Io, err = p.handler.GetVerTs(args.TableName, args.Row, args.Column, args.Timestamp, args.NumVersions, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getVerTs: "+err.Error())
		oprot.WriteMessageBegin("getVerTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getVerTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRow struct {
	handler IHbase
}

func (p *hbaseProcessorGetRow) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowResult()
	if result.Success, result.Io, err = p.handler.GetRow(args.TableName, args.Row, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRow: "+err.Error())
		oprot.WriteMessageBegin("getRow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowWithColumns struct {
	handler IHbase
}

func (p *hbaseProcessorGetRowWithColumns) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowWithColumnsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowWithColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowWithColumnsResult()
	if result.Success, result.Io, err = p.handler.GetRowWithColumns(args.TableName, args.Row, args.Columns, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowWithColumns: "+err.Error())
		oprot.WriteMessageBegin("getRowWithColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRowWithColumns", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowTs struct {
	handler IHbase
}

func (p *hbaseProcessorGetRowTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowTsResult()
	if result.Success, result.Io, err = p.handler.GetRowTs(args.TableName, args.Row, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowTs: "+err.Error())
		oprot.WriteMessageBegin("getRowTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRowTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowWithColumnsTs struct {
	handler IHbase
}

func (p *hbaseProcessorGetRowWithColumnsTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowWithColumnsTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowWithColumnsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowWithColumnsTsResult()
	if result.Success, result.Io, err = p.handler.GetRowWithColumnsTs(args.TableName, args.Row, args.Columns, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowWithColumnsTs: "+err.Error())
		oprot.WriteMessageBegin("getRowWithColumnsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRowWithColumnsTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowWithColumnsMaxVer struct {
	handler IHbase
}

func (p *hbaseProcessorGetRowWithColumnsMaxVer) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowWithColumnsMaxVerArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowWithColumnsMaxVer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowWithColumnsMaxVerResult()
	if result.Success, result.Io, err = p.handler.GetRowWithColumnsMaxVer(args.TableName, args.Row, args.Columns, args.NumVersions, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowWithColumnsMaxVer: "+err.Error())
		oprot.WriteMessageBegin("getRowWithColumnsMaxVer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRowWithColumnsMaxVer", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowWithColumnsTsMaxVer struct {
	handler IHbase
}

func (p *hbaseProcessorGetRowWithColumnsTsMaxVer) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowWithColumnsTsMaxVerArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowWithColumnsTsMaxVer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowWithColumnsTsMaxVerResult()
	if result.Success, result.Io, err = p.handler.GetRowWithColumnsTsMaxVer(args.TableName, args.Row, args.Columns, args.Timestamp, args.NumVersions, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowWithColumnsTsMaxVer: "+err.Error())
		oprot.WriteMessageBegin("getRowWithColumnsTsMaxVer", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRowWithColumnsTsMaxVer", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRows struct {
	handler IHbase
}

func (p *hbaseProcessorGetRows) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRows", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowsResult()
	if result.Success, result.Io, err = p.handler.GetRows(args.TableName, args.Rows, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRows: "+err.Error())
		oprot.WriteMessageBegin("getRows", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRows", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowsWithColumns struct {
	handler IHbase
}

func (p *hbaseProcessorGetRowsWithColumns) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowsWithColumnsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowsWithColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowsWithColumnsResult()
	if result.Success, result.Io, err = p.handler.GetRowsWithColumns(args.TableName, args.Rows, args.Columns, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowsWithColumns: "+err.Error())
		oprot.WriteMessageBegin("getRowsWithColumns", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRowsWithColumns", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowsTs struct {
	handler IHbase
}

func (p *hbaseProcessorGetRowsTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowsTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowsTsResult()
	if result.Success, result.Io, err = p.handler.GetRowsTs(args.TableName, args.Rows, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowsTs: "+err.Error())
		oprot.WriteMessageBegin("getRowsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRowsTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowsWithColumnsTs struct {
	handler IHbase
}

func (p *hbaseProcessorGetRowsWithColumnsTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowsWithColumnsTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowsWithColumnsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowsWithColumnsTsResult()
	if result.Success, result.Io, err = p.handler.GetRowsWithColumnsTs(args.TableName, args.Rows, args.Columns, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowsWithColumnsTs: "+err.Error())
		oprot.WriteMessageBegin("getRowsWithColumnsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRowsWithColumnsTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorMutateRow struct {
	handler IHbase
}

func (p *hbaseProcessorMutateRow) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewMutateRowArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("mutateRow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewMutateRowResult()
	if result.Io, result.Ia, err = p.handler.MutateRow(args.TableName, args.Row, args.Mutations, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mutateRow: "+err.Error())
		oprot.WriteMessageBegin("mutateRow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("mutateRow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorMutateRowTs struct {
	handler IHbase
}

func (p *hbaseProcessorMutateRowTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewMutateRowTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("mutateRowTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewMutateRowTsResult()
	if result.Io, result.Ia, err = p.handler.MutateRowTs(args.TableName, args.Row, args.Mutations, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mutateRowTs: "+err.Error())
		oprot.WriteMessageBegin("mutateRowTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("mutateRowTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorMutateRows struct {
	handler IHbase
}

func (p *hbaseProcessorMutateRows) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewMutateRowsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("mutateRows", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewMutateRowsResult()
	if result.Io, result.Ia, err = p.handler.MutateRows(args.TableName, args.RowBatches, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mutateRows: "+err.Error())
		oprot.WriteMessageBegin("mutateRows", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("mutateRows", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorMutateRowsTs struct {
	handler IHbase
}

func (p *hbaseProcessorMutateRowsTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewMutateRowsTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("mutateRowsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewMutateRowsTsResult()
	if result.Io, result.Ia, err = p.handler.MutateRowsTs(args.TableName, args.RowBatches, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing mutateRowsTs: "+err.Error())
		oprot.WriteMessageBegin("mutateRowsTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("mutateRowsTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorAtomicIncrement struct {
	handler IHbase
}

func (p *hbaseProcessorAtomicIncrement) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewAtomicIncrementArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("atomicIncrement", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewAtomicIncrementResult()
	if result.Success, result.Io, result.Ia, err = p.handler.AtomicIncrement(args.TableName, args.Row, args.Column, args.Value); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing atomicIncrement: "+err.Error())
		oprot.WriteMessageBegin("atomicIncrement", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("atomicIncrement", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorDeleteAll struct {
	handler IHbase
}

func (p *hbaseProcessorDeleteAll) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDeleteAllArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteAll", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDeleteAllResult()
	if result.Io, err = p.handler.DeleteAll(args.TableName, args.Row, args.Column, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteAll: "+err.Error())
		oprot.WriteMessageBegin("deleteAll", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("deleteAll", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorDeleteAllTs struct {
	handler IHbase
}

func (p *hbaseProcessorDeleteAllTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDeleteAllTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteAllTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDeleteAllTsResult()
	if result.Io, err = p.handler.DeleteAllTs(args.TableName, args.Row, args.Column, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteAllTs: "+err.Error())
		oprot.WriteMessageBegin("deleteAllTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("deleteAllTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorDeleteAllRow struct {
	handler IHbase
}

func (p *hbaseProcessorDeleteAllRow) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDeleteAllRowArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteAllRow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDeleteAllRowResult()
	if result.Io, err = p.handler.DeleteAllRow(args.TableName, args.Row, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteAllRow: "+err.Error())
		oprot.WriteMessageBegin("deleteAllRow", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("deleteAllRow", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorIncrement struct {
	handler IHbase
}

func (p *hbaseProcessorIncrement) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewIncrementArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("increment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewIncrementResult()
	if result.Io, err = p.handler.Increment(args.Increment); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing increment: "+err.Error())
		oprot.WriteMessageBegin("increment", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("increment", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorIncrementRows struct {
	handler IHbase
}

func (p *hbaseProcessorIncrementRows) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewIncrementRowsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("incrementRows", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewIncrementRowsResult()
	if result.Io, err = p.handler.IncrementRows(args.Increments); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing incrementRows: "+err.Error())
		oprot.WriteMessageBegin("incrementRows", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("incrementRows", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorDeleteAllRowTs struct {
	handler IHbase
}

func (p *hbaseProcessorDeleteAllRowTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewDeleteAllRowTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("deleteAllRowTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewDeleteAllRowTsResult()
	if result.Io, err = p.handler.DeleteAllRowTs(args.TableName, args.Row, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing deleteAllRowTs: "+err.Error())
		oprot.WriteMessageBegin("deleteAllRowTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("deleteAllRowTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerOpenWithScan struct {
	handler IHbase
}

func (p *hbaseProcessorScannerOpenWithScan) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerOpenWithScanArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerOpenWithScan", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerOpenWithScanResult()
	if result.Success, result.Io, err = p.handler.ScannerOpenWithScan(args.TableName, args.Scan, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpenWithScan: "+err.Error())
		oprot.WriteMessageBegin("scannerOpenWithScan", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerOpenWithScan", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerOpen struct {
	handler IHbase
}

func (p *hbaseProcessorScannerOpen) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerOpenArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerOpen", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerOpenResult()
	if result.Success, result.Io, err = p.handler.ScannerOpen(args.TableName, args.StartRow, args.Columns, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpen: "+err.Error())
		oprot.WriteMessageBegin("scannerOpen", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerOpen", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerOpenWithStop struct {
	handler IHbase
}

func (p *hbaseProcessorScannerOpenWithStop) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerOpenWithStopArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerOpenWithStop", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerOpenWithStopResult()
	if result.Success, result.Io, err = p.handler.ScannerOpenWithStop(args.TableName, args.StartRow, args.StopRow, args.Columns, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpenWithStop: "+err.Error())
		oprot.WriteMessageBegin("scannerOpenWithStop", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerOpenWithStop", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerOpenWithPrefix struct {
	handler IHbase
}

func (p *hbaseProcessorScannerOpenWithPrefix) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerOpenWithPrefixArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerOpenWithPrefix", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerOpenWithPrefixResult()
	if result.Success, result.Io, err = p.handler.ScannerOpenWithPrefix(args.TableName, args.StartAndPrefix, args.Columns, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpenWithPrefix: "+err.Error())
		oprot.WriteMessageBegin("scannerOpenWithPrefix", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerOpenWithPrefix", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerOpenTs struct {
	handler IHbase
}

func (p *hbaseProcessorScannerOpenTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerOpenTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerOpenTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerOpenTsResult()
	if result.Success, result.Io, err = p.handler.ScannerOpenTs(args.TableName, args.StartRow, args.Columns, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpenTs: "+err.Error())
		oprot.WriteMessageBegin("scannerOpenTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerOpenTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerOpenWithStopTs struct {
	handler IHbase
}

func (p *hbaseProcessorScannerOpenWithStopTs) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerOpenWithStopTsArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerOpenWithStopTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerOpenWithStopTsResult()
	if result.Success, result.Io, err = p.handler.ScannerOpenWithStopTs(args.TableName, args.StartRow, args.StopRow, args.Columns, args.Timestamp, args.Attributes); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerOpenWithStopTs: "+err.Error())
		oprot.WriteMessageBegin("scannerOpenWithStopTs", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerOpenWithStopTs", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerGet struct {
	handler IHbase
}

func (p *hbaseProcessorScannerGet) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerGetArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerGet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerGetResult()
	if result.Success, result.Io, result.Ia, err = p.handler.ScannerGet(args.Id); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerGet: "+err.Error())
		oprot.WriteMessageBegin("scannerGet", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerGet", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerGetList struct {
	handler IHbase
}

func (p *hbaseProcessorScannerGetList) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerGetListArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerGetList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerGetListResult()
	if result.Success, result.Io, result.Ia, err = p.handler.ScannerGetList(args.Id, args.NbRows); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerGetList: "+err.Error())
		oprot.WriteMessageBegin("scannerGetList", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerGetList", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorScannerClose struct {
	handler IHbase
}

func (p *hbaseProcessorScannerClose) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewScannerCloseArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("scannerClose", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewScannerCloseResult()
	if result.Io, result.Ia, err = p.handler.ScannerClose(args.Id); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing scannerClose: "+err.Error())
		oprot.WriteMessageBegin("scannerClose", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("scannerClose", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRowOrBefore struct {
	handler IHbase
}

func (p *hbaseProcessorGetRowOrBefore) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRowOrBeforeArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRowOrBefore", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRowOrBeforeResult()
	if result.Success, result.Io, err = p.handler.GetRowOrBefore(args.TableName, args.Row, args.Family); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRowOrBefore: "+err.Error())
		oprot.WriteMessageBegin("getRowOrBefore", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRowOrBefore", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

type hbaseProcessorGetRegionInfo struct {
	handler IHbase
}

func (p *hbaseProcessorGetRegionInfo) Process(seqId int32, iprot, oprot thrift.TProtocol) (success bool, err thrift.TException) {
	args := NewGetRegionInfoArgs()
	if err = args.Read(iprot); err != nil {
		iprot.ReadMessageEnd()
		x := thrift.NewTApplicationException(thrift.PROTOCOL_ERROR, err.Error())
		oprot.WriteMessageBegin("getRegionInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	iprot.ReadMessageEnd()
	result := NewGetRegionInfoResult()
	if result.Success, result.Io, err = p.handler.GetRegionInfo(args.Row); err != nil {
		x := thrift.NewTApplicationException(thrift.INTERNAL_ERROR, "Internal error processing getRegionInfo: "+err.Error())
		oprot.WriteMessageBegin("getRegionInfo", thrift.EXCEPTION, seqId)
		x.Write(oprot)
		oprot.WriteMessageEnd()
		oprot.Transport().Flush()
		return
	}
	if err2 := oprot.WriteMessageBegin("getRegionInfo", thrift.REPLY, seqId); err2 != nil {
		err = err2
	}
	if err2 := result.Write(oprot); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.WriteMessageEnd(); err == nil && err2 != nil {
		err = err2
	}
	if err2 := oprot.Transport().Flush(); err == nil && err2 != nil {
		err = err2
	}
	if err != nil {
		return
	}
	return true, err
}

// HELPER FUNCTIONS AND STRUCTURES

/**
 * Attributes:
 *  - TableName: name of the table
 */
type EnableTableArgs struct {
	TableName Bytes `json:"tableName"` // 1
}

var tstructEnableTableArgs = thrift.NewTStruct("enableTable_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
})

func (*EnableTableArgs) GetTStruct() thrift.TStruct { return tstructEnableTableArgs }
func NewEnableTableArgs() *EnableTableArgs {
	output := &EnableTableArgs{}
	{
	}
	return output
}

func (p *EnableTableArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructEnableTableArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructEnableTableArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Bytes
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *EnableTableArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v441, err442 := iprot.ReadBinary()
	if err442 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err442)
	}
	p.TableName = Bytes(v441)
	return err
}

func (p *EnableTableArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("enableTable_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *EnableTableArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *EnableTableArgs) TStructName() string {
	return "EnableTableArgs"
}

func (p *EnableTableArgs) ThriftName() string {
	return "enableTable_args"
}

func (p *EnableTableArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	}
	return nil
}

func (p *EnableTableArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Io
 */
type EnableTableResult struct {
	Io *IOError `json:"io"` // 1
}

var tstructEnableTableResult = thrift.NewTStruct("enableTable_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*EnableTableResult) GetTStruct() thrift.TStruct { return tstructEnableTableResult }
func NewEnableTableResult() *EnableTableResult {
	output := &EnableTableResult{}
	{
	}
	return output
}

func (p *EnableTableResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructEnableTableResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructEnableTableResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *EnableTableResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err445 := p.Io.Read(iprot)
	if err445 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err445)
	}
	return err
}

func (p *EnableTableResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("enableTable_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *EnableTableResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *EnableTableResult) TStructName() string {
	return "EnableTableResult"
}

func (p *EnableTableResult) ThriftName() string {
	return "enableTable_result"
}

func (p *EnableTableResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *EnableTableResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of the table
 */
type DisableTableArgs struct {
	TableName Bytes `json:"tableName"` // 1
}

var tstructDisableTableArgs = thrift.NewTStruct("disableTable_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
})

func (*DisableTableArgs) GetTStruct() thrift.TStruct { return tstructDisableTableArgs }
func NewDisableTableArgs() *DisableTableArgs {
	output := &DisableTableArgs{}
	{
	}
	return output
}

func (p *DisableTableArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDisableTableArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDisableTableArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Bytes
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DisableTableArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v446, err447 := iprot.ReadBinary()
	if err447 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err447)
	}
	p.TableName = Bytes(v446)
	return err
}

func (p *DisableTableArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("disableTable_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DisableTableArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DisableTableArgs) TStructName() string {
	return "DisableTableArgs"
}

func (p *DisableTableArgs) ThriftName() string {
	return "disableTable_args"
}

func (p *DisableTableArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	}
	return nil
}

func (p *DisableTableArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Io
 */
type DisableTableResult struct {
	Io *IOError `json:"io"` // 1
}

var tstructDisableTableResult = thrift.NewTStruct("disableTable_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*DisableTableResult) GetTStruct() thrift.TStruct { return tstructDisableTableResult }
func NewDisableTableResult() *DisableTableResult {
	output := &DisableTableResult{}
	{
	}
	return output
}

func (p *DisableTableResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDisableTableResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDisableTableResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DisableTableResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err450 := p.Io.Read(iprot)
	if err450 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err450)
	}
	return err
}

func (p *DisableTableResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("disableTable_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DisableTableResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DisableTableResult) TStructName() string {
	return "DisableTableResult"
}

func (p *DisableTableResult) ThriftName() string {
	return "disableTable_result"
}

func (p *DisableTableResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *DisableTableResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of the table to check
 */
type IsTableEnabledArgs struct {
	TableName Bytes `json:"tableName"` // 1
}

var tstructIsTableEnabledArgs = thrift.NewTStruct("isTableEnabled_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
})

func (*IsTableEnabledArgs) GetTStruct() thrift.TStruct { return tstructIsTableEnabledArgs }
func NewIsTableEnabledArgs() *IsTableEnabledArgs {
	output := &IsTableEnabledArgs{}
	{
	}
	return output
}

func (p *IsTableEnabledArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructIsTableEnabledArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructIsTableEnabledArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Bytes
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IsTableEnabledArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v451, err452 := iprot.ReadBinary()
	if err452 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err452)
	}
	p.TableName = Bytes(v451)
	return err
}

func (p *IsTableEnabledArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("isTableEnabled_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IsTableEnabledArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IsTableEnabledArgs) TStructName() string {
	return "IsTableEnabledArgs"
}

func (p *IsTableEnabledArgs) ThriftName() string {
	return "isTableEnabled_args"
}

func (p *IsTableEnabledArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	}
	return nil
}

func (p *IsTableEnabledArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type IsTableEnabledResult struct {
	Success bool     `json:"success"` // 0
	Io      *IOError `json:"io"`      // 1
}

var tstructIsTableEnabledResult = thrift.NewTStruct("isTableEnabled_result", []thrift.TField{
	thrift.NewTField("success", thrift.BOOL, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*IsTableEnabledResult) GetTStruct() thrift.TStruct { return tstructIsTableEnabledResult }
func NewIsTableEnabledResult() *IsTableEnabledResult {
	output := &IsTableEnabledResult{}
	{
	}
	return output
}

func (p *IsTableEnabledResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructIsTableEnabledResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructIsTableEnabledResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //bool
			if fieldTypeId == thrift.BOOL {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IsTableEnabledResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v453, err454 := iprot.ReadBool()
	if err454 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err454)
	}
	p.Success = v453
	return err
}

func (p *IsTableEnabledResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err457 := p.Io.Read(iprot)
	if err457 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err457)
	}
	return err
}

func (p *IsTableEnabledResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("isTableEnabled_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IsTableEnabledResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.BOOL, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteBool(bool(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *IsTableEnabledResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IsTableEnabledResult) TStructName() string {
	return "IsTableEnabledResult"
}

func (p *IsTableEnabledResult) ThriftName() string {
	return "isTableEnabled_result"
}

func (p *IsTableEnabledResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *IsTableEnabledResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.BOOL, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableNameOrRegionName
 */
type CompactArgs struct {
	TableNameOrRegionName Bytes `json:"tableNameOrRegionName"` // 1
}

var tstructCompactArgs = thrift.NewTStruct("compact_args", []thrift.TField{
	thrift.NewTField("tableNameOrRegionName", thrift.STRING, 1),
})

func (*CompactArgs) GetTStruct() thrift.TStruct { return tstructCompactArgs }
func NewCompactArgs() *CompactArgs {
	output := &CompactArgs{}
	{
	}
	return output
}

func (p *CompactArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructCompactArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructCompactArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Bytes
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CompactArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v458, err459 := iprot.ReadBinary()
	if err459 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableNameOrRegionName", p.ThriftName(), err459)
	}
	p.TableNameOrRegionName = Bytes(v458)
	return err
}

func (p *CompactArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("compact_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CompactArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableNameOrRegionName != nil {
		err = oprot.WriteFieldBegin("tableNameOrRegionName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableNameOrRegionName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableNameOrRegionName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableNameOrRegionName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableNameOrRegionName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactArgs) TStructName() string {
	return "CompactArgs"
}

func (p *CompactArgs) ThriftName() string {
	return "compact_args"
}

func (p *CompactArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableNameOrRegionName
	}
	return nil
}

func (p *CompactArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableNameOrRegionName", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Io
 */
type CompactResult struct {
	Io *IOError `json:"io"` // 1
}

var tstructCompactResult = thrift.NewTStruct("compact_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*CompactResult) GetTStruct() thrift.TStruct { return tstructCompactResult }
func NewCompactResult() *CompactResult {
	output := &CompactResult{}
	{
	}
	return output
}

func (p *CompactResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructCompactResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructCompactResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CompactResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err462 := p.Io.Read(iprot)
	if err462 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err462)
	}
	return err
}

func (p *CompactResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("compact_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CompactResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CompactResult) TStructName() string {
	return "CompactResult"
}

func (p *CompactResult) ThriftName() string {
	return "compact_result"
}

func (p *CompactResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *CompactResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableNameOrRegionName
 */
type MajorCompactArgs struct {
	TableNameOrRegionName Bytes `json:"tableNameOrRegionName"` // 1
}

var tstructMajorCompactArgs = thrift.NewTStruct("majorCompact_args", []thrift.TField{
	thrift.NewTField("tableNameOrRegionName", thrift.STRING, 1),
})

func (*MajorCompactArgs) GetTStruct() thrift.TStruct { return tstructMajorCompactArgs }
func NewMajorCompactArgs() *MajorCompactArgs {
	output := &MajorCompactArgs{}
	{
	}
	return output
}

func (p *MajorCompactArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMajorCompactArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMajorCompactArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Bytes
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MajorCompactArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v463, err464 := iprot.ReadBinary()
	if err464 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableNameOrRegionName", p.ThriftName(), err464)
	}
	p.TableNameOrRegionName = Bytes(v463)
	return err
}

func (p *MajorCompactArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("majorCompact_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MajorCompactArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableNameOrRegionName != nil {
		err = oprot.WriteFieldBegin("tableNameOrRegionName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableNameOrRegionName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableNameOrRegionName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableNameOrRegionName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableNameOrRegionName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MajorCompactArgs) TStructName() string {
	return "MajorCompactArgs"
}

func (p *MajorCompactArgs) ThriftName() string {
	return "majorCompact_args"
}

func (p *MajorCompactArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableNameOrRegionName
	}
	return nil
}

func (p *MajorCompactArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableNameOrRegionName", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Io
 */
type MajorCompactResult struct {
	Io *IOError `json:"io"` // 1
}

var tstructMajorCompactResult = thrift.NewTStruct("majorCompact_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*MajorCompactResult) GetTStruct() thrift.TStruct { return tstructMajorCompactResult }
func NewMajorCompactResult() *MajorCompactResult {
	output := &MajorCompactResult{}
	{
	}
	return output
}

func (p *MajorCompactResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMajorCompactResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMajorCompactResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MajorCompactResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err467 := p.Io.Read(iprot)
	if err467 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err467)
	}
	return err
}

func (p *MajorCompactResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("majorCompact_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MajorCompactResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MajorCompactResult) TStructName() string {
	return "MajorCompactResult"
}

func (p *MajorCompactResult) ThriftName() string {
	return "majorCompact_result"
}

func (p *MajorCompactResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *MajorCompactResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

type GetTableNamesArgs struct {
}

var tstructGetTableNamesArgs = thrift.NewTStruct("getTableNames_args", []thrift.TField{})

func (*GetTableNamesArgs) GetTStruct() thrift.TStruct { return tstructGetTableNamesArgs }
func NewGetTableNamesArgs() *GetTableNamesArgs {
	output := &GetTableNamesArgs{}
	{
	}
	return output
}

func (p *GetTableNamesArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetTableNamesArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetTableNamesArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetTableNamesArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getTableNames_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetTableNamesArgs) TStructName() string {
	return "GetTableNamesArgs"
}

func (p *GetTableNamesArgs) ThriftName() string {
	return "getTableNames_args"
}

func (p *GetTableNamesArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	}
	return nil
}

func (p *GetTableNamesArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetTableNamesResult struct {
	Success []Text   `json:"success"` // 0
	Io      *IOError `json:"io"`      // 1
}

var tstructGetTableNamesResult = thrift.NewTStruct("getTableNames_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetTableNamesResult) GetTStruct() thrift.TStruct { return tstructGetTableNamesResult }
func NewGetTableNamesResult() *GetTableNamesResult {
	output := &GetTableNamesResult{}
	{
	}
	return output
}

func (p *GetTableNamesResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetTableNamesResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetTableNamesResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetTableNamesResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype473, _size470, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype473
	p.Success = make([]Text, _size470, _size470)
	for i := 0; i < _size470; i++ {
		v476, err477 := iprot.ReadBinary()
		if err477 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem475", "", err477)
		}
		_elem475 := Text(v476)
		p.Success[i] = _elem475
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetTableNamesResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err480 := p.Io.Read(iprot)
	if err480 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err480)
	}
	return err
}

func (p *GetTableNamesResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getTableNames_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetTableNamesResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter481 := range p.Success {
			err = oprot.WriteBinary(Iter481)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter481", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetTableNamesResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetTableNamesResult) TStructName() string {
	return "GetTableNamesResult"
}

func (p *GetTableNamesResult) ThriftName() string {
	return "getTableNames_result"
}

func (p *GetTableNamesResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetTableNamesResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: table name
 */
type GetColumnDescriptorsArgs struct {
	TableName Text `json:"tableName"` // 1
}

var tstructGetColumnDescriptorsArgs = thrift.NewTStruct("getColumnDescriptors_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
})

func (*GetColumnDescriptorsArgs) GetTStruct() thrift.TStruct { return tstructGetColumnDescriptorsArgs }
func NewGetColumnDescriptorsArgs() *GetColumnDescriptorsArgs {
	output := &GetColumnDescriptorsArgs{}
	{
	}
	return output
}

func (p *GetColumnDescriptorsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetColumnDescriptorsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetColumnDescriptorsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetColumnDescriptorsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v482, err483 := iprot.ReadBinary()
	if err483 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err483)
	}
	p.TableName = Text(v482)
	return err
}

func (p *GetColumnDescriptorsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getColumnDescriptors_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetColumnDescriptorsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetColumnDescriptorsArgs) TStructName() string {
	return "GetColumnDescriptorsArgs"
}

func (p *GetColumnDescriptorsArgs) ThriftName() string {
	return "getColumnDescriptors_args"
}

func (p *GetColumnDescriptorsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	}
	return nil
}

func (p *GetColumnDescriptorsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetColumnDescriptorsResult struct {
	Success map[string]*ColumnDescriptor `json:"success"` // 0
	Io      *IOError                     `json:"io"`      // 1
}

var tstructGetColumnDescriptorsResult = thrift.NewTStruct("getColumnDescriptors_result", []thrift.TField{
	thrift.NewTField("success", thrift.MAP, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetColumnDescriptorsResult) GetTStruct() thrift.TStruct {
	return tstructGetColumnDescriptorsResult
}
func NewGetColumnDescriptorsResult() *GetColumnDescriptorsResult {
	output := &GetColumnDescriptorsResult{}
	{
	}
	return output
}

func (p *GetColumnDescriptorsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetColumnDescriptorsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetColumnDescriptorsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.MAP {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetColumnDescriptorsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype487, _vtype488, _size486, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_, _ = _ktype487, _vtype488
	p.Success = make(map[string]*ColumnDescriptor, _size486)
	for i := 0; i < _size486; i++ {
		v493, err494 := iprot.ReadString()
		if err494 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key491", "", err494)
		}
		_key491 := v493
		_val492 := NewColumnDescriptor()
		err497 := _val492.Read(iprot)
		if err497 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_val492ColumnDescriptor", err497)
		}
		p.Success[_key491] = _val492
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetColumnDescriptorsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err500 := p.Io.Read(iprot)
	if err500 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err500)
	}
	return err
}

func (p *GetColumnDescriptorsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getColumnDescriptors_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetColumnDescriptorsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.MAP, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter501, Viter502 := range p.Success {
			err = oprot.WriteString(Kiter501)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter501", "", err)
			}
			err = Viter502.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("ColumnDescriptor", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetColumnDescriptorsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetColumnDescriptorsResult) TStructName() string {
	return "GetColumnDescriptorsResult"
}

func (p *GetColumnDescriptorsResult) ThriftName() string {
	return "getColumnDescriptors_result"
}

func (p *GetColumnDescriptorsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetColumnDescriptorsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.MAP, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: table name
 */
type GetTableRegionsArgs struct {
	TableName Text `json:"tableName"` // 1
}

var tstructGetTableRegionsArgs = thrift.NewTStruct("getTableRegions_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
})

func (*GetTableRegionsArgs) GetTStruct() thrift.TStruct { return tstructGetTableRegionsArgs }
func NewGetTableRegionsArgs() *GetTableRegionsArgs {
	output := &GetTableRegionsArgs{}
	{
	}
	return output
}

func (p *GetTableRegionsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetTableRegionsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetTableRegionsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetTableRegionsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v503, err504 := iprot.ReadBinary()
	if err504 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err504)
	}
	p.TableName = Text(v503)
	return err
}

func (p *GetTableRegionsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getTableRegions_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetTableRegionsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetTableRegionsArgs) TStructName() string {
	return "GetTableRegionsArgs"
}

func (p *GetTableRegionsArgs) ThriftName() string {
	return "getTableRegions_args"
}

func (p *GetTableRegionsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	}
	return nil
}

func (p *GetTableRegionsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetTableRegionsResult struct {
	Success []*TRegionInfo `json:"success"` // 0
	Io      *IOError       `json:"io"`      // 1
}

var tstructGetTableRegionsResult = thrift.NewTStruct("getTableRegions_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetTableRegionsResult) GetTStruct() thrift.TStruct { return tstructGetTableRegionsResult }
func NewGetTableRegionsResult() *GetTableRegionsResult {
	output := &GetTableRegionsResult{}
	{
	}
	return output
}

func (p *GetTableRegionsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetTableRegionsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetTableRegionsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetTableRegionsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype510, _size507, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype510
	p.Success = make([]*TRegionInfo, _size507, _size507)
	for i := 0; i < _size507; i++ {
		_elem512 := NewTRegionInfo()
		err515 := _elem512.Read(iprot)
		if err515 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem512TRegionInfo", err515)
		}
		p.Success[i] = _elem512
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetTableRegionsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err518 := p.Io.Read(iprot)
	if err518 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err518)
	}
	return err
}

func (p *GetTableRegionsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getTableRegions_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetTableRegionsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter519 := range p.Success {
			err = Iter519.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRegionInfo", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetTableRegionsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetTableRegionsResult) TStructName() string {
	return "GetTableRegionsResult"
}

func (p *GetTableRegionsResult) ThriftName() string {
	return "getTableRegions_result"
}

func (p *GetTableRegionsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetTableRegionsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table to create
 *  - ColumnFamilies: list of column family descriptors
 */
type CreateTableArgs struct {
	TableName      Text                `json:"tableName"`      // 1
	ColumnFamilies []*ColumnDescriptor `json:"columnFamilies"` // 2
}

var tstructCreateTableArgs = thrift.NewTStruct("createTable_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("columnFamilies", thrift.LIST, 2),
})

func (*CreateTableArgs) GetTStruct() thrift.TStruct { return tstructCreateTableArgs }
func NewCreateTableArgs() *CreateTableArgs {
	output := &CreateTableArgs{}
	{
	}
	return output
}

func (p *CreateTableArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructCreateTableArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructCreateTableArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.LIST {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CreateTableArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v520, err521 := iprot.ReadBinary()
	if err521 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err521)
	}
	p.TableName = Text(v520)
	return err
}

func (p *CreateTableArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype527, _size524, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.ColumnFamilies", "", err)
	}
	_ = _etype527
	p.ColumnFamilies = make([]*ColumnDescriptor, _size524, _size524)
	for i := 0; i < _size524; i++ {
		_elem529 := NewColumnDescriptor()
		err532 := _elem529.Read(iprot)
		if err532 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem529ColumnDescriptor", err532)
		}
		p.ColumnFamilies[i] = _elem529
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *CreateTableArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("createTable_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CreateTableArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CreateTableArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.ColumnFamilies != nil {
		err = oprot.WriteFieldBegin("columnFamilies", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columnFamilies", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.ColumnFamilies))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter533 := range p.ColumnFamilies {
			err = Iter533.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("ColumnDescriptor", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "columnFamilies", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CreateTableArgs) TStructName() string {
	return "CreateTableArgs"
}

func (p *CreateTableArgs) ThriftName() string {
	return "createTable_args"
}

func (p *CreateTableArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.ColumnFamilies
	}
	return nil
}

func (p *CreateTableArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("columnFamilies", thrift.LIST, 2),
	})
}

/**
 * Attributes:
 *  - Io
 *  - Ia
 *  - Exist
 */
type CreateTableResult struct {
	Io    *IOError         `json:"io"`    // 1
	Ia    *IllegalArgument `json:"ia"`    // 2
	Exist *AlreadyExists   `json:"exist"` // 3
}

var tstructCreateTableResult = thrift.NewTStruct("createTable_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
	thrift.NewTField("ia", thrift.STRUCT, 2),
	thrift.NewTField("exist", thrift.STRUCT, 3),
})

func (*CreateTableResult) GetTStruct() thrift.TStruct { return tstructCreateTableResult }
func NewCreateTableResult() *CreateTableResult {
	output := &CreateTableResult{}
	{
	}
	return output
}

func (p *CreateTableResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructCreateTableResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructCreateTableResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //IllegalArgument
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //AlreadyExists
			if fieldTypeId == thrift.STRUCT {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CreateTableResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err536 := p.Io.Read(iprot)
	if err536 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err536)
	}
	return err
}

func (p *CreateTableResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err539 := p.Ia.Read(iprot)
	if err539 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err539)
	}
	return err
}

func (p *CreateTableResult) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Exist = NewAlreadyExists()
	err542 := p.Exist.Read(iprot)
	if err542 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ExistAlreadyExists", err542)
	}
	return err
}

func (p *CreateTableResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("createTable_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Exist != nil:
		if err = p.writeField3(oprot); err != nil {
			return err
		}
	case p.Ia != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *CreateTableResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CreateTableResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CreateTableResult) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Exist != nil {
		err = oprot.WriteFieldBegin("exist", thrift.STRUCT, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "exist", p.ThriftName(), err)
		}
		err = p.Exist.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("AlreadyExists", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "exist", p.ThriftName(), err)
		}
	}
	return err
}

func (p *CreateTableResult) TStructName() string {
	return "CreateTableResult"
}

func (p *CreateTableResult) ThriftName() string {
	return "createTable_result"
}

func (p *CreateTableResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	case 2:
		return p.Ia
	case 3:
		return p.Exist
	}
	return nil
}

func (p *CreateTableResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
		thrift.NewTField("exist", thrift.STRUCT, 3),
	})
}

/**
 * Attributes:
 *  - TableName: name of table to delete
 */
type DeleteTableArgs struct {
	TableName Text `json:"tableName"` // 1
}

var tstructDeleteTableArgs = thrift.NewTStruct("deleteTable_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
})

func (*DeleteTableArgs) GetTStruct() thrift.TStruct { return tstructDeleteTableArgs }
func NewDeleteTableArgs() *DeleteTableArgs {
	output := &DeleteTableArgs{}
	{
	}
	return output
}

func (p *DeleteTableArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDeleteTableArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDeleteTableArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteTableArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v543, err544 := iprot.ReadBinary()
	if err544 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err544)
	}
	p.TableName = Text(v543)
	return err
}

func (p *DeleteTableArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteTable_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteTableArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteTableArgs) TStructName() string {
	return "DeleteTableArgs"
}

func (p *DeleteTableArgs) ThriftName() string {
	return "deleteTable_args"
}

func (p *DeleteTableArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	}
	return nil
}

func (p *DeleteTableArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Io
 */
type DeleteTableResult struct {
	Io *IOError `json:"io"` // 1
}

var tstructDeleteTableResult = thrift.NewTStruct("deleteTable_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*DeleteTableResult) GetTStruct() thrift.TStruct { return tstructDeleteTableResult }
func NewDeleteTableResult() *DeleteTableResult {
	output := &DeleteTableResult{}
	{
	}
	return output
}

func (p *DeleteTableResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDeleteTableResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDeleteTableResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteTableResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err547 := p.Io.Read(iprot)
	if err547 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err547)
	}
	return err
}

func (p *DeleteTableResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteTable_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteTableResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteTableResult) TStructName() string {
	return "DeleteTableResult"
}

func (p *DeleteTableResult) ThriftName() string {
	return "deleteTable_result"
}

func (p *DeleteTableResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *DeleteTableResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Column: column name
 *  - Attributes: Get attributes
 */
type GetArgs struct {
	TableName  Text            `json:"tableName"`  // 1
	Row        Text            `json:"row"`        // 2
	Column     Text            `json:"column"`     // 3
	Attributes map[string]Text `json:"attributes"` // 4
}

var tstructGetArgs = thrift.NewTStruct("get_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("column", thrift.STRING, 3),
	thrift.NewTField("attributes", thrift.MAP, 4),
})

func (*GetArgs) GetTStruct() thrift.TStruct { return tstructGetArgs }
func NewGetArgs() *GetArgs {
	output := &GetArgs{}
	{
	}
	return output
}

func (p *GetArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.MAP {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v548, err549 := iprot.ReadBinary()
	if err549 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err549)
	}
	p.TableName = Text(v548)
	return err
}

func (p *GetArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v550, err551 := iprot.ReadBinary()
	if err551 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err551)
	}
	p.Row = Text(v550)
	return err
}

func (p *GetArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v552, err553 := iprot.ReadBinary()
	if err553 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err553)
	}
	p.Column = Text(v552)
	return err
}

func (p *GetArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype557, _vtype558, _size556, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype557, _vtype558
	p.Attributes = make(map[string]Text, _size556)
	for i := 0; i < _size556; i++ {
		v563, err564 := iprot.ReadString()
		if err564 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key561", "", err564)
		}
		_key561 := v563
		v565, err566 := iprot.ReadBinary()
		if err566 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val562", "", err566)
		}
		_val562 := Text(v565)
		p.Attributes[_key561] = _val562
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		err = oprot.WriteFieldBegin("column", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Column)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter567, Viter568 := range p.Attributes {
			err = oprot.WriteString(Kiter567)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter567", "", err)
			}
			err = oprot.WriteBinary(Viter568)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter568", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetArgs) TStructName() string {
	return "GetArgs"
}

func (p *GetArgs) ThriftName() string {
	return "get_args"
}

func (p *GetArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Column
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *GetArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("column", thrift.STRING, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetResult struct {
	Success []*TCell `json:"success"` // 0
	Io      *IOError `json:"io"`      // 1
}

var tstructGetResult = thrift.NewTStruct("get_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetResult) GetTStruct() thrift.TStruct { return tstructGetResult }
func NewGetResult() *GetResult {
	output := &GetResult{}
	{
	}
	return output
}

func (p *GetResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype574, _size571, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype574
	p.Success = make([]*TCell, _size571, _size571)
	for i := 0; i < _size571; i++ {
		_elem576 := NewTCell()
		err579 := _elem576.Read(iprot)
		if err579 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem576TCell", err579)
		}
		p.Success[i] = _elem576
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err582 := p.Io.Read(iprot)
	if err582 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err582)
	}
	return err
}

func (p *GetResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("get_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter583 := range p.Success {
			err = Iter583.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TCell", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetResult) TStructName() string {
	return "GetResult"
}

func (p *GetResult) ThriftName() string {
	return "get_result"
}

func (p *GetResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Column: column name
 *  - NumVersions: number of versions to retrieve
 *  - Attributes: Get attributes
 */
type GetVerArgs struct {
	TableName   Text            `json:"tableName"`   // 1
	Row         Text            `json:"row"`         // 2
	Column      Text            `json:"column"`      // 3
	NumVersions int32           `json:"numVersions"` // 4
	Attributes  map[string]Text `json:"attributes"`  // 5
}

var tstructGetVerArgs = thrift.NewTStruct("getVer_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("column", thrift.STRING, 3),
	thrift.NewTField("numVersions", thrift.I32, 4),
	thrift.NewTField("attributes", thrift.MAP, 5),
})

func (*GetVerArgs) GetTStruct() thrift.TStruct { return tstructGetVerArgs }
func NewGetVerArgs() *GetVerArgs {
	output := &GetVerArgs{}
	{
	}
	return output
}

func (p *GetVerArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetVerArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetVerArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //
			if fieldTypeId == thrift.MAP {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetVerArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v584, err585 := iprot.ReadBinary()
	if err585 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err585)
	}
	p.TableName = Text(v584)
	return err
}

func (p *GetVerArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v586, err587 := iprot.ReadBinary()
	if err587 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err587)
	}
	p.Row = Text(v586)
	return err
}

func (p *GetVerArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v588, err589 := iprot.ReadBinary()
	if err589 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err589)
	}
	p.Column = Text(v588)
	return err
}

func (p *GetVerArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v590, err591 := iprot.ReadI32()
	if err591 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "numVersions", p.ThriftName(), err591)
	}
	p.NumVersions = v590
	return err
}

func (p *GetVerArgs) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype595, _vtype596, _size594, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype595, _vtype596
	p.Attributes = make(map[string]Text, _size594)
	for i := 0; i < _size594; i++ {
		v601, err602 := iprot.ReadString()
		if err602 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key599", "", err602)
		}
		_key599 := v601
		v603, err604 := iprot.ReadBinary()
		if err604 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val600", "", err604)
		}
		_val600 := Text(v603)
		p.Attributes[_key599] = _val600
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetVerArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getVer_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetVerArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		err = oprot.WriteFieldBegin("column", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Column)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("numVersions", thrift.I32, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "numVersions", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.NumVersions))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "numVersions", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "numVersions", p.ThriftName(), err)
	}
	return err
}

func (p *GetVerArgs) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter605, Viter606 := range p.Attributes {
			err = oprot.WriteString(Kiter605)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter605", "", err)
			}
			err = oprot.WriteBinary(Viter606)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter606", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerArgs) TStructName() string {
	return "GetVerArgs"
}

func (p *GetVerArgs) ThriftName() string {
	return "getVer_args"
}

func (p *GetVerArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Column
	case 4:
		return p.NumVersions
	case 5:
		return p.Attributes
	}
	return nil
}

func (p *GetVerArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("column", thrift.STRING, 3),
		thrift.NewTField("numVersions", thrift.I32, 4),
		thrift.NewTField("attributes", thrift.MAP, 5),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetVerResult struct {
	Success []*TCell `json:"success"` // 0
	Io      *IOError `json:"io"`      // 1
}

var tstructGetVerResult = thrift.NewTStruct("getVer_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetVerResult) GetTStruct() thrift.TStruct { return tstructGetVerResult }
func NewGetVerResult() *GetVerResult {
	output := &GetVerResult{}
	{
	}
	return output
}

func (p *GetVerResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetVerResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetVerResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetVerResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype612, _size609, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype612
	p.Success = make([]*TCell, _size609, _size609)
	for i := 0; i < _size609; i++ {
		_elem614 := NewTCell()
		err617 := _elem614.Read(iprot)
		if err617 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem614TCell", err617)
		}
		p.Success[i] = _elem614
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetVerResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err620 := p.Io.Read(iprot)
	if err620 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err620)
	}
	return err
}

func (p *GetVerResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getVer_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetVerResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter621 := range p.Success {
			err = Iter621.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TCell", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerResult) TStructName() string {
	return "GetVerResult"
}

func (p *GetVerResult) ThriftName() string {
	return "getVer_result"
}

func (p *GetVerResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetVerResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Column: column name
 *  - Timestamp: timestamp
 *  - NumVersions: number of versions to retrieve
 *  - Attributes: Get attributes
 */
type GetVerTsArgs struct {
	TableName   Text            `json:"tableName"`   // 1
	Row         Text            `json:"row"`         // 2
	Column      Text            `json:"column"`      // 3
	Timestamp   int64           `json:"timestamp"`   // 4
	NumVersions int32           `json:"numVersions"` // 5
	Attributes  map[string]Text `json:"attributes"`  // 6
}

var tstructGetVerTsArgs = thrift.NewTStruct("getVerTs_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("column", thrift.STRING, 3),
	thrift.NewTField("timestamp", thrift.I64, 4),
	thrift.NewTField("numVersions", thrift.I32, 5),
	thrift.NewTField("attributes", thrift.MAP, 6),
})

func (*GetVerTsArgs) GetTStruct() thrift.TStruct { return tstructGetVerTsArgs }
func NewGetVerTsArgs() *GetVerTsArgs {
	output := &GetVerTsArgs{}
	{
	}
	return output
}

func (p *GetVerTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetVerTsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetVerTsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 6: //
			if fieldTypeId == thrift.MAP {
				err = p.readField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetVerTsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v622, err623 := iprot.ReadBinary()
	if err623 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err623)
	}
	p.TableName = Text(v622)
	return err
}

func (p *GetVerTsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v624, err625 := iprot.ReadBinary()
	if err625 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err625)
	}
	p.Row = Text(v624)
	return err
}

func (p *GetVerTsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v626, err627 := iprot.ReadBinary()
	if err627 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err627)
	}
	p.Column = Text(v626)
	return err
}

func (p *GetVerTsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v628, err629 := iprot.ReadI64()
	if err629 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err629)
	}
	p.Timestamp = v628
	return err
}

func (p *GetVerTsArgs) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v630, err631 := iprot.ReadI32()
	if err631 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "numVersions", p.ThriftName(), err631)
	}
	p.NumVersions = v630
	return err
}

func (p *GetVerTsArgs) readField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype635, _vtype636, _size634, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype635, _vtype636
	p.Attributes = make(map[string]Text, _size634)
	for i := 0; i < _size634; i++ {
		v641, err642 := iprot.ReadString()
		if err642 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key639", "", err642)
		}
		_key639 := v641
		v643, err644 := iprot.ReadBinary()
		if err644 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val640", "", err644)
		}
		_val640 := Text(v643)
		p.Attributes[_key639] = _val640
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetVerTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getVerTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = p.writeField6(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetVerTsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerTsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerTsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		err = oprot.WriteFieldBegin("column", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Column)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerTsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *GetVerTsArgs) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("numVersions", thrift.I32, 5)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "numVersions", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.NumVersions))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "numVersions", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "numVersions", p.ThriftName(), err)
	}
	return err
}

func (p *GetVerTsArgs) writeField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 6)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter645, Viter646 := range p.Attributes {
			err = oprot.WriteString(Kiter645)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter645", "", err)
			}
			err = oprot.WriteBinary(Viter646)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter646", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerTsArgs) TStructName() string {
	return "GetVerTsArgs"
}

func (p *GetVerTsArgs) ThriftName() string {
	return "getVerTs_args"
}

func (p *GetVerTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Column
	case 4:
		return p.Timestamp
	case 5:
		return p.NumVersions
	case 6:
		return p.Attributes
	}
	return nil
}

func (p *GetVerTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("column", thrift.STRING, 3),
		thrift.NewTField("timestamp", thrift.I64, 4),
		thrift.NewTField("numVersions", thrift.I32, 5),
		thrift.NewTField("attributes", thrift.MAP, 6),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetVerTsResult struct {
	Success []*TCell `json:"success"` // 0
	Io      *IOError `json:"io"`      // 1
}

var tstructGetVerTsResult = thrift.NewTStruct("getVerTs_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetVerTsResult) GetTStruct() thrift.TStruct { return tstructGetVerTsResult }
func NewGetVerTsResult() *GetVerTsResult {
	output := &GetVerTsResult{}
	{
	}
	return output
}

func (p *GetVerTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetVerTsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetVerTsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetVerTsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype652, _size649, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype652
	p.Success = make([]*TCell, _size649, _size649)
	for i := 0; i < _size649; i++ {
		_elem654 := NewTCell()
		err657 := _elem654.Read(iprot)
		if err657 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem654TCell", err657)
		}
		p.Success[i] = _elem654
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetVerTsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err660 := p.Io.Read(iprot)
	if err660 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err660)
	}
	return err
}

func (p *GetVerTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getVerTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetVerTsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter661 := range p.Success {
			err = Iter661.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TCell", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerTsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetVerTsResult) TStructName() string {
	return "GetVerTsResult"
}

func (p *GetVerTsResult) ThriftName() string {
	return "getVerTs_result"
}

func (p *GetVerTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetVerTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Attributes: Get attributes
 */
type GetRowArgs struct {
	TableName  Text            `json:"tableName"`  // 1
	Row        Text            `json:"row"`        // 2
	Attributes map[string]Text `json:"attributes"` // 3
}

var tstructGetRowArgs = thrift.NewTStruct("getRow_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("attributes", thrift.MAP, 3),
})

func (*GetRowArgs) GetTStruct() thrift.TStruct { return tstructGetRowArgs }
func NewGetRowArgs() *GetRowArgs {
	output := &GetRowArgs{}
	{
	}
	return output
}

func (p *GetRowArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.MAP {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v662, err663 := iprot.ReadBinary()
	if err663 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err663)
	}
	p.TableName = Text(v662)
	return err
}

func (p *GetRowArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v664, err665 := iprot.ReadBinary()
	if err665 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err665)
	}
	p.Row = Text(v664)
	return err
}

func (p *GetRowArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype669, _vtype670, _size668, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype669, _vtype670
	p.Attributes = make(map[string]Text, _size668)
	for i := 0; i < _size668; i++ {
		v675, err676 := iprot.ReadString()
		if err676 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key673", "", err676)
		}
		_key673 := v675
		v677, err678 := iprot.ReadBinary()
		if err678 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val674", "", err678)
		}
		_val674 := Text(v677)
		p.Attributes[_key673] = _val674
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRow_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter679, Viter680 := range p.Attributes {
			err = oprot.WriteString(Kiter679)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter679", "", err)
			}
			err = oprot.WriteBinary(Viter680)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter680", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowArgs) TStructName() string {
	return "GetRowArgs"
}

func (p *GetRowArgs) ThriftName() string {
	return "getRow_args"
}

func (p *GetRowArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Attributes
	}
	return nil
}

func (p *GetRowArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("attributes", thrift.MAP, 3),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowResult struct {
	Success []*TRowResult `json:"success"` // 0
	Io      *IOError      `json:"io"`      // 1
}

var tstructGetRowResult = thrift.NewTStruct("getRow_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetRowResult) GetTStruct() thrift.TStruct { return tstructGetRowResult }
func NewGetRowResult() *GetRowResult {
	output := &GetRowResult{}
	{
	}
	return output
}

func (p *GetRowResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype686, _size683, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype686
	p.Success = make([]*TRowResult, _size683, _size683)
	for i := 0; i < _size683; i++ {
		_elem688 := NewTRowResult()
		err691 := _elem688.Read(iprot)
		if err691 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem688TRowResult", err691)
		}
		p.Success[i] = _elem688
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err694 := p.Io.Read(iprot)
	if err694 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err694)
	}
	return err
}

func (p *GetRowResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRow_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter695 := range p.Success {
			err = Iter695.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowResult) TStructName() string {
	return "GetRowResult"
}

func (p *GetRowResult) ThriftName() string {
	return "getRow_result"
}

func (p *GetRowResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Columns: List of columns to return, null for all columns
 *  - Attributes: Get attributes
 */
type GetRowWithColumnsArgs struct {
	TableName  Text            `json:"tableName"`  // 1
	Row        Text            `json:"row"`        // 2
	Columns    []Text          `json:"columns"`    // 3
	Attributes map[string]Text `json:"attributes"` // 4
}

var tstructGetRowWithColumnsArgs = thrift.NewTStruct("getRowWithColumns_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("columns", thrift.LIST, 3),
	thrift.NewTField("attributes", thrift.MAP, 4),
})

func (*GetRowWithColumnsArgs) GetTStruct() thrift.TStruct { return tstructGetRowWithColumnsArgs }
func NewGetRowWithColumnsArgs() *GetRowWithColumnsArgs {
	output := &GetRowWithColumnsArgs{}
	{
	}
	return output
}

func (p *GetRowWithColumnsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowWithColumnsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowWithColumnsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.LIST {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.MAP {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v696, err697 := iprot.ReadBinary()
	if err697 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err697)
	}
	p.TableName = Text(v696)
	return err
}

func (p *GetRowWithColumnsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v698, err699 := iprot.ReadBinary()
	if err699 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err699)
	}
	p.Row = Text(v698)
	return err
}

func (p *GetRowWithColumnsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype705, _size702, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_ = _etype705
	p.Columns = make([]Text, _size702, _size702)
	for i := 0; i < _size702; i++ {
		v708, err709 := iprot.ReadBinary()
		if err709 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem707", "", err709)
		}
		_elem707 := Text(v708)
		p.Columns[i] = _elem707
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowWithColumnsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype713, _vtype714, _size712, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype713, _vtype714
	p.Attributes = make(map[string]Text, _size712)
	for i := 0; i < _size712; i++ {
		v719, err720 := iprot.ReadString()
		if err720 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key717", "", err720)
		}
		_key717 := v719
		v721, err722 := iprot.ReadBinary()
		if err722 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val718", "", err722)
		}
		_val718 := Text(v721)
		p.Attributes[_key717] = _val718
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowWithColumnsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowWithColumns_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Columns))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter723 := range p.Columns {
			err = oprot.WriteBinary(Iter723)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter723", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter724, Viter725 := range p.Attributes {
			err = oprot.WriteString(Kiter724)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter724", "", err)
			}
			err = oprot.WriteBinary(Viter725)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter725", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsArgs) TStructName() string {
	return "GetRowWithColumnsArgs"
}

func (p *GetRowWithColumnsArgs) ThriftName() string {
	return "getRowWithColumns_args"
}

func (p *GetRowWithColumnsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Columns
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *GetRowWithColumnsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("columns", thrift.LIST, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowWithColumnsResult struct {
	Success []*TRowResult `json:"success"` // 0
	Io      *IOError      `json:"io"`      // 1
}

var tstructGetRowWithColumnsResult = thrift.NewTStruct("getRowWithColumns_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetRowWithColumnsResult) GetTStruct() thrift.TStruct { return tstructGetRowWithColumnsResult }
func NewGetRowWithColumnsResult() *GetRowWithColumnsResult {
	output := &GetRowWithColumnsResult{}
	{
	}
	return output
}

func (p *GetRowWithColumnsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowWithColumnsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowWithColumnsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype731, _size728, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype731
	p.Success = make([]*TRowResult, _size728, _size728)
	for i := 0; i < _size728; i++ {
		_elem733 := NewTRowResult()
		err736 := _elem733.Read(iprot)
		if err736 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem733TRowResult", err736)
		}
		p.Success[i] = _elem733
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowWithColumnsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err739 := p.Io.Read(iprot)
	if err739 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err739)
	}
	return err
}

func (p *GetRowWithColumnsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowWithColumns_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter740 := range p.Success {
			err = Iter740.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsResult) TStructName() string {
	return "GetRowWithColumnsResult"
}

func (p *GetRowWithColumnsResult) ThriftName() string {
	return "getRowWithColumns_result"
}

func (p *GetRowWithColumnsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowWithColumnsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of the table
 *  - Row: row key
 *  - Timestamp: timestamp
 *  - Attributes: Get attributes
 */
type GetRowTsArgs struct {
	TableName  Text            `json:"tableName"`  // 1
	Row        Text            `json:"row"`        // 2
	Timestamp  int64           `json:"timestamp"`  // 3
	Attributes map[string]Text `json:"attributes"` // 4
}

var tstructGetRowTsArgs = thrift.NewTStruct("getRowTs_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("timestamp", thrift.I64, 3),
	thrift.NewTField("attributes", thrift.MAP, 4),
})

func (*GetRowTsArgs) GetTStruct() thrift.TStruct { return tstructGetRowTsArgs }
func NewGetRowTsArgs() *GetRowTsArgs {
	output := &GetRowTsArgs{}
	{
	}
	return output
}

func (p *GetRowTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowTsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowTsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.MAP {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowTsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v741, err742 := iprot.ReadBinary()
	if err742 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err742)
	}
	p.TableName = Text(v741)
	return err
}

func (p *GetRowTsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v743, err744 := iprot.ReadBinary()
	if err744 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err744)
	}
	p.Row = Text(v743)
	return err
}

func (p *GetRowTsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v745, err746 := iprot.ReadI64()
	if err746 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err746)
	}
	p.Timestamp = v745
	return err
}

func (p *GetRowTsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype750, _vtype751, _size749, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype750, _vtype751
	p.Attributes = make(map[string]Text, _size749)
	for i := 0; i < _size749; i++ {
		v756, err757 := iprot.ReadString()
		if err757 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key754", "", err757)
		}
		_key754 := v756
		v758, err759 := iprot.ReadBinary()
		if err759 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val755", "", err759)
		}
		_val755 := Text(v758)
		p.Attributes[_key754] = _val755
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowTsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowTsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowTsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *GetRowTsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter760, Viter761 := range p.Attributes {
			err = oprot.WriteString(Kiter760)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter760", "", err)
			}
			err = oprot.WriteBinary(Viter761)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter761", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowTsArgs) TStructName() string {
	return "GetRowTsArgs"
}

func (p *GetRowTsArgs) ThriftName() string {
	return "getRowTs_args"
}

func (p *GetRowTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Timestamp
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *GetRowTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("timestamp", thrift.I64, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowTsResult struct {
	Success []*TRowResult `json:"success"` // 0
	Io      *IOError      `json:"io"`      // 1
}

var tstructGetRowTsResult = thrift.NewTStruct("getRowTs_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetRowTsResult) GetTStruct() thrift.TStruct { return tstructGetRowTsResult }
func NewGetRowTsResult() *GetRowTsResult {
	output := &GetRowTsResult{}
	{
	}
	return output
}

func (p *GetRowTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowTsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowTsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowTsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype767, _size764, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype767
	p.Success = make([]*TRowResult, _size764, _size764)
	for i := 0; i < _size764; i++ {
		_elem769 := NewTRowResult()
		err772 := _elem769.Read(iprot)
		if err772 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem769TRowResult", err772)
		}
		p.Success[i] = _elem769
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowTsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err775 := p.Io.Read(iprot)
	if err775 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err775)
	}
	return err
}

func (p *GetRowTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowTsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter776 := range p.Success {
			err = Iter776.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowTsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowTsResult) TStructName() string {
	return "GetRowTsResult"
}

func (p *GetRowTsResult) ThriftName() string {
	return "getRowTs_result"
}

func (p *GetRowTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Columns: List of columns to return, null for all columns
 *  - Timestamp
 *  - Attributes: Get attributes
 */
type GetRowWithColumnsTsArgs struct {
	TableName  Text            `json:"tableName"`  // 1
	Row        Text            `json:"row"`        // 2
	Columns    []Text          `json:"columns"`    // 3
	Timestamp  int64           `json:"timestamp"`  // 4
	Attributes map[string]Text `json:"attributes"` // 5
}

var tstructGetRowWithColumnsTsArgs = thrift.NewTStruct("getRowWithColumnsTs_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("columns", thrift.LIST, 3),
	thrift.NewTField("timestamp", thrift.I64, 4),
	thrift.NewTField("attributes", thrift.MAP, 5),
})

func (*GetRowWithColumnsTsArgs) GetTStruct() thrift.TStruct { return tstructGetRowWithColumnsTsArgs }
func NewGetRowWithColumnsTsArgs() *GetRowWithColumnsTsArgs {
	output := &GetRowWithColumnsTsArgs{}
	{
	}
	return output
}

func (p *GetRowWithColumnsTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowWithColumnsTsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowWithColumnsTsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.LIST {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //
			if fieldTypeId == thrift.MAP {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v777, err778 := iprot.ReadBinary()
	if err778 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err778)
	}
	p.TableName = Text(v777)
	return err
}

func (p *GetRowWithColumnsTsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v779, err780 := iprot.ReadBinary()
	if err780 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err780)
	}
	p.Row = Text(v779)
	return err
}

func (p *GetRowWithColumnsTsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype786, _size783, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_ = _etype786
	p.Columns = make([]Text, _size783, _size783)
	for i := 0; i < _size783; i++ {
		v789, err790 := iprot.ReadBinary()
		if err790 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem788", "", err790)
		}
		_elem788 := Text(v789)
		p.Columns[i] = _elem788
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v791, err792 := iprot.ReadI64()
	if err792 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err792)
	}
	p.Timestamp = v791
	return err
}

func (p *GetRowWithColumnsTsArgs) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype796, _vtype797, _size795, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype796, _vtype797
	p.Attributes = make(map[string]Text, _size795)
	for i := 0; i < _size795; i++ {
		v802, err803 := iprot.ReadString()
		if err803 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key800", "", err803)
		}
		_key800 := v802
		v804, err805 := iprot.ReadBinary()
		if err805 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val801", "", err805)
		}
		_val801 := Text(v804)
		p.Attributes[_key800] = _val801
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowWithColumnsTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Columns))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter806 := range p.Columns {
			err = oprot.WriteBinary(Iter806)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter806", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter807, Viter808 := range p.Attributes {
			err = oprot.WriteString(Kiter807)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter807", "", err)
			}
			err = oprot.WriteBinary(Viter808)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter808", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsTsArgs) TStructName() string {
	return "GetRowWithColumnsTsArgs"
}

func (p *GetRowWithColumnsTsArgs) ThriftName() string {
	return "getRowWithColumnsTs_args"
}

func (p *GetRowWithColumnsTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Columns
	case 4:
		return p.Timestamp
	case 5:
		return p.Attributes
	}
	return nil
}

func (p *GetRowWithColumnsTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("columns", thrift.LIST, 3),
		thrift.NewTField("timestamp", thrift.I64, 4),
		thrift.NewTField("attributes", thrift.MAP, 5),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowWithColumnsTsResult struct {
	Success []*TRowResult `json:"success"` // 0
	Io      *IOError      `json:"io"`      // 1
}

var tstructGetRowWithColumnsTsResult = thrift.NewTStruct("getRowWithColumnsTs_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetRowWithColumnsTsResult) GetTStruct() thrift.TStruct { return tstructGetRowWithColumnsTsResult }
func NewGetRowWithColumnsTsResult() *GetRowWithColumnsTsResult {
	output := &GetRowWithColumnsTsResult{}
	{
	}
	return output
}

func (p *GetRowWithColumnsTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowWithColumnsTsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowWithColumnsTsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsTsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype814, _size811, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype814
	p.Success = make([]*TRowResult, _size811, _size811)
	for i := 0; i < _size811; i++ {
		_elem816 := NewTRowResult()
		err819 := _elem816.Read(iprot)
		if err819 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem816TRowResult", err819)
		}
		p.Success[i] = _elem816
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowWithColumnsTsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err822 := p.Io.Read(iprot)
	if err822 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err822)
	}
	return err
}

func (p *GetRowWithColumnsTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowWithColumnsTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsTsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter823 := range p.Success {
			err = Iter823.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsTsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsTsResult) TStructName() string {
	return "GetRowWithColumnsTsResult"
}

func (p *GetRowWithColumnsTsResult) ThriftName() string {
	return "getRowWithColumnsTs_result"
}

func (p *GetRowWithColumnsTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowWithColumnsTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Columns: List of columns to return, null for all columns
 *  - NumVersions: number of versions to retrieve
 *  - Attributes: Get attributes
 */
type GetRowWithColumnsMaxVerArgs struct {
	TableName   Text            `json:"tableName"`   // 1
	Row         Text            `json:"row"`         // 2
	Columns     []Text          `json:"columns"`     // 3
	NumVersions int32           `json:"numVersions"` // 4
	Attributes  map[string]Text `json:"attributes"`  // 5
}

var tstructGetRowWithColumnsMaxVerArgs = thrift.NewTStruct("getRowWithColumnsMaxVer_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("columns", thrift.LIST, 3),
	thrift.NewTField("numVersions", thrift.I32, 4),
	thrift.NewTField("attributes", thrift.MAP, 5),
})

func (*GetRowWithColumnsMaxVerArgs) GetTStruct() thrift.TStruct {
	return tstructGetRowWithColumnsMaxVerArgs
}
func NewGetRowWithColumnsMaxVerArgs() *GetRowWithColumnsMaxVerArgs {
	output := &GetRowWithColumnsMaxVerArgs{}
	{
	}
	return output
}

func (p *GetRowWithColumnsMaxVerArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowWithColumnsMaxVerArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowWithColumnsMaxVerArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.LIST {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //
			if fieldTypeId == thrift.MAP {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsMaxVerArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v824, err825 := iprot.ReadBinary()
	if err825 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err825)
	}
	p.TableName = Text(v824)
	return err
}

func (p *GetRowWithColumnsMaxVerArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v826, err827 := iprot.ReadBinary()
	if err827 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err827)
	}
	p.Row = Text(v826)
	return err
}

func (p *GetRowWithColumnsMaxVerArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype833, _size830, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_ = _etype833
	p.Columns = make([]Text, _size830, _size830)
	for i := 0; i < _size830; i++ {
		v836, err837 := iprot.ReadBinary()
		if err837 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem835", "", err837)
		}
		_elem835 := Text(v836)
		p.Columns[i] = _elem835
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowWithColumnsMaxVerArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v838, err839 := iprot.ReadI32()
	if err839 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "numVersions", p.ThriftName(), err839)
	}
	p.NumVersions = v838
	return err
}

func (p *GetRowWithColumnsMaxVerArgs) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype843, _vtype844, _size842, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype843, _vtype844
	p.Attributes = make(map[string]Text, _size842)
	for i := 0; i < _size842; i++ {
		v849, err850 := iprot.ReadString()
		if err850 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key847", "", err850)
		}
		_key847 := v849
		v851, err852 := iprot.ReadBinary()
		if err852 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val848", "", err852)
		}
		_val848 := Text(v851)
		p.Attributes[_key847] = _val848
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowWithColumnsMaxVerArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowWithColumnsMaxVer_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsMaxVerArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsMaxVerArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsMaxVerArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Columns))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter853 := range p.Columns {
			err = oprot.WriteBinary(Iter853)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter853", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsMaxVerArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("numVersions", thrift.I32, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "numVersions", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.NumVersions))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "numVersions", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "numVersions", p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsMaxVerArgs) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter854, Viter855 := range p.Attributes {
			err = oprot.WriteString(Kiter854)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter854", "", err)
			}
			err = oprot.WriteBinary(Viter855)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter855", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsMaxVerArgs) TStructName() string {
	return "GetRowWithColumnsMaxVerArgs"
}

func (p *GetRowWithColumnsMaxVerArgs) ThriftName() string {
	return "getRowWithColumnsMaxVer_args"
}

func (p *GetRowWithColumnsMaxVerArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Columns
	case 4:
		return p.NumVersions
	case 5:
		return p.Attributes
	}
	return nil
}

func (p *GetRowWithColumnsMaxVerArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("columns", thrift.LIST, 3),
		thrift.NewTField("numVersions", thrift.I32, 4),
		thrift.NewTField("attributes", thrift.MAP, 5),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowWithColumnsMaxVerResult struct {
	Success []*TRowResultWithMultiColVer `json:"success"` // 0
	Io      *IOError                     `json:"io"`      // 1
}

var tstructGetRowWithColumnsMaxVerResult = thrift.NewTStruct("getRowWithColumnsMaxVer_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetRowWithColumnsMaxVerResult) GetTStruct() thrift.TStruct {
	return tstructGetRowWithColumnsMaxVerResult
}
func NewGetRowWithColumnsMaxVerResult() *GetRowWithColumnsMaxVerResult {
	output := &GetRowWithColumnsMaxVerResult{}
	{
	}
	return output
}

func (p *GetRowWithColumnsMaxVerResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowWithColumnsMaxVerResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowWithColumnsMaxVerResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsMaxVerResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype861, _size858, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype861
	p.Success = make([]*TRowResultWithMultiColVer, _size858, _size858)
	for i := 0; i < _size858; i++ {
		_elem863 := NewTRowResultWithMultiColVer()
		err866 := _elem863.Read(iprot)
		if err866 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem863TRowResultWithMultiColVer", err866)
		}
		p.Success[i] = _elem863
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowWithColumnsMaxVerResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err869 := p.Io.Read(iprot)
	if err869 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err869)
	}
	return err
}

func (p *GetRowWithColumnsMaxVerResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowWithColumnsMaxVer_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsMaxVerResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter870 := range p.Success {
			err = Iter870.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResultWithMultiColVer", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsMaxVerResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsMaxVerResult) TStructName() string {
	return "GetRowWithColumnsMaxVerResult"
}

func (p *GetRowWithColumnsMaxVerResult) ThriftName() string {
	return "getRowWithColumnsMaxVer_result"
}

func (p *GetRowWithColumnsMaxVerResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowWithColumnsMaxVerResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Columns: List of columns to return, null for all columns
 *  - Timestamp
 *  - NumVersions: number of versions to retrieve
 *  - Attributes: Get attributes
 */
type GetRowWithColumnsTsMaxVerArgs struct {
	TableName   Text            `json:"tableName"`   // 1
	Row         Text            `json:"row"`         // 2
	Columns     []Text          `json:"columns"`     // 3
	Timestamp   int64           `json:"timestamp"`   // 4
	NumVersions int32           `json:"numVersions"` // 5
	Attributes  map[string]Text `json:"attributes"`  // 6
}

var tstructGetRowWithColumnsTsMaxVerArgs = thrift.NewTStruct("getRowWithColumnsTsMaxVer_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("columns", thrift.LIST, 3),
	thrift.NewTField("timestamp", thrift.I64, 4),
	thrift.NewTField("numVersions", thrift.I32, 5),
	thrift.NewTField("attributes", thrift.MAP, 6),
})

func (*GetRowWithColumnsTsMaxVerArgs) GetTStruct() thrift.TStruct {
	return tstructGetRowWithColumnsTsMaxVerArgs
}
func NewGetRowWithColumnsTsMaxVerArgs() *GetRowWithColumnsTsMaxVerArgs {
	output := &GetRowWithColumnsTsMaxVerArgs{}
	{
	}
	return output
}

func (p *GetRowWithColumnsTsMaxVerArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowWithColumnsTsMaxVerArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowWithColumnsTsMaxVerArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.LIST {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 6: //
			if fieldTypeId == thrift.MAP {
				err = p.readField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsTsMaxVerArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v871, err872 := iprot.ReadBinary()
	if err872 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err872)
	}
	p.TableName = Text(v871)
	return err
}

func (p *GetRowWithColumnsTsMaxVerArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v873, err874 := iprot.ReadBinary()
	if err874 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err874)
	}
	p.Row = Text(v873)
	return err
}

func (p *GetRowWithColumnsTsMaxVerArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype880, _size877, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_ = _etype880
	p.Columns = make([]Text, _size877, _size877)
	for i := 0; i < _size877; i++ {
		v883, err884 := iprot.ReadBinary()
		if err884 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem882", "", err884)
		}
		_elem882 := Text(v883)
		p.Columns[i] = _elem882
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowWithColumnsTsMaxVerArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v885, err886 := iprot.ReadI64()
	if err886 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err886)
	}
	p.Timestamp = v885
	return err
}

func (p *GetRowWithColumnsTsMaxVerArgs) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v887, err888 := iprot.ReadI32()
	if err888 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "numVersions", p.ThriftName(), err888)
	}
	p.NumVersions = v887
	return err
}

func (p *GetRowWithColumnsTsMaxVerArgs) readField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype892, _vtype893, _size891, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype892, _vtype893
	p.Attributes = make(map[string]Text, _size891)
	for i := 0; i < _size891; i++ {
		v898, err899 := iprot.ReadString()
		if err899 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key896", "", err899)
		}
		_key896 := v898
		v900, err901 := iprot.ReadBinary()
		if err901 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val897", "", err901)
		}
		_val897 := Text(v900)
		p.Attributes[_key896] = _val897
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowWithColumnsTsMaxVerArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowWithColumnsTsMaxVer_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = p.writeField6(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsTsMaxVerArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsTsMaxVerArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsTsMaxVerArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Columns))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter902 := range p.Columns {
			err = oprot.WriteBinary(Iter902)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter902", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsTsMaxVerArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsTsMaxVerArgs) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("numVersions", thrift.I32, 5)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "numVersions", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.NumVersions))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "numVersions", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "numVersions", p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsTsMaxVerArgs) writeField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 6)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter903, Viter904 := range p.Attributes {
			err = oprot.WriteString(Kiter903)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter903", "", err)
			}
			err = oprot.WriteBinary(Viter904)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter904", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsTsMaxVerArgs) TStructName() string {
	return "GetRowWithColumnsTsMaxVerArgs"
}

func (p *GetRowWithColumnsTsMaxVerArgs) ThriftName() string {
	return "getRowWithColumnsTsMaxVer_args"
}

func (p *GetRowWithColumnsTsMaxVerArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Columns
	case 4:
		return p.Timestamp
	case 5:
		return p.NumVersions
	case 6:
		return p.Attributes
	}
	return nil
}

func (p *GetRowWithColumnsTsMaxVerArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("columns", thrift.LIST, 3),
		thrift.NewTField("timestamp", thrift.I64, 4),
		thrift.NewTField("numVersions", thrift.I32, 5),
		thrift.NewTField("attributes", thrift.MAP, 6),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowWithColumnsTsMaxVerResult struct {
	Success []*TRowResultWithMultiColVer `json:"success"` // 0
	Io      *IOError                     `json:"io"`      // 1
}

var tstructGetRowWithColumnsTsMaxVerResult = thrift.NewTStruct("getRowWithColumnsTsMaxVer_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetRowWithColumnsTsMaxVerResult) GetTStruct() thrift.TStruct {
	return tstructGetRowWithColumnsTsMaxVerResult
}
func NewGetRowWithColumnsTsMaxVerResult() *GetRowWithColumnsTsMaxVerResult {
	output := &GetRowWithColumnsTsMaxVerResult{}
	{
	}
	return output
}

func (p *GetRowWithColumnsTsMaxVerResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowWithColumnsTsMaxVerResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowWithColumnsTsMaxVerResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsTsMaxVerResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype910, _size907, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype910
	p.Success = make([]*TRowResultWithMultiColVer, _size907, _size907)
	for i := 0; i < _size907; i++ {
		_elem912 := NewTRowResultWithMultiColVer()
		err915 := _elem912.Read(iprot)
		if err915 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem912TRowResultWithMultiColVer", err915)
		}
		p.Success[i] = _elem912
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowWithColumnsTsMaxVerResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err918 := p.Io.Read(iprot)
	if err918 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err918)
	}
	return err
}

func (p *GetRowWithColumnsTsMaxVerResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowWithColumnsTsMaxVer_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowWithColumnsTsMaxVerResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter919 := range p.Success {
			err = Iter919.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResultWithMultiColVer", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsTsMaxVerResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowWithColumnsTsMaxVerResult) TStructName() string {
	return "GetRowWithColumnsTsMaxVerResult"
}

func (p *GetRowWithColumnsTsMaxVerResult) ThriftName() string {
	return "getRowWithColumnsTsMaxVer_result"
}

func (p *GetRowWithColumnsTsMaxVerResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowWithColumnsTsMaxVerResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Rows: row keys
 *  - Attributes: Get attributes
 */
type GetRowsArgs struct {
	TableName  Text            `json:"tableName"`  // 1
	Rows       []Text          `json:"rows"`       // 2
	Attributes map[string]Text `json:"attributes"` // 3
}

var tstructGetRowsArgs = thrift.NewTStruct("getRows_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("rows", thrift.LIST, 2),
	thrift.NewTField("attributes", thrift.MAP, 3),
})

func (*GetRowsArgs) GetTStruct() thrift.TStruct { return tstructGetRowsArgs }
func NewGetRowsArgs() *GetRowsArgs {
	output := &GetRowsArgs{}
	{
	}
	return output
}

func (p *GetRowsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.LIST {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.MAP {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v920, err921 := iprot.ReadBinary()
	if err921 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err921)
	}
	p.TableName = Text(v920)
	return err
}

func (p *GetRowsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype927, _size924, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Rows", "", err)
	}
	_ = _etype927
	p.Rows = make([]Text, _size924, _size924)
	for i := 0; i < _size924; i++ {
		v930, err931 := iprot.ReadBinary()
		if err931 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem929", "", err931)
		}
		_elem929 := Text(v930)
		p.Rows[i] = _elem929
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype935, _vtype936, _size934, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype935, _vtype936
	p.Attributes = make(map[string]Text, _size934)
	for i := 0; i < _size934; i++ {
		v941, err942 := iprot.ReadString()
		if err942 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key939", "", err942)
		}
		_key939 := v941
		v943, err944 := iprot.ReadBinary()
		if err944 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val940", "", err944)
		}
		_val940 := Text(v943)
		p.Attributes[_key939] = _val940
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRows_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Rows != nil {
		err = oprot.WriteFieldBegin("rows", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Rows))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter945 := range p.Rows {
			err = oprot.WriteBinary(Iter945)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter945", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter946, Viter947 := range p.Attributes {
			err = oprot.WriteString(Kiter946)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter946", "", err)
			}
			err = oprot.WriteBinary(Viter947)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter947", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsArgs) TStructName() string {
	return "GetRowsArgs"
}

func (p *GetRowsArgs) ThriftName() string {
	return "getRows_args"
}

func (p *GetRowsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Rows
	case 3:
		return p.Attributes
	}
	return nil
}

func (p *GetRowsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("rows", thrift.LIST, 2),
		thrift.NewTField("attributes", thrift.MAP, 3),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowsResult struct {
	Success []*TRowResult `json:"success"` // 0
	Io      *IOError      `json:"io"`      // 1
}

var tstructGetRowsResult = thrift.NewTStruct("getRows_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetRowsResult) GetTStruct() thrift.TStruct { return tstructGetRowsResult }
func NewGetRowsResult() *GetRowsResult {
	output := &GetRowsResult{}
	{
	}
	return output
}

func (p *GetRowsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype953, _size950, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype953
	p.Success = make([]*TRowResult, _size950, _size950)
	for i := 0; i < _size950; i++ {
		_elem955 := NewTRowResult()
		err958 := _elem955.Read(iprot)
		if err958 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem955TRowResult", err958)
		}
		p.Success[i] = _elem955
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err961 := p.Io.Read(iprot)
	if err961 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err961)
	}
	return err
}

func (p *GetRowsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRows_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter962 := range p.Success {
			err = Iter962.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsResult) TStructName() string {
	return "GetRowsResult"
}

func (p *GetRowsResult) ThriftName() string {
	return "getRows_result"
}

func (p *GetRowsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Rows: row keys
 *  - Columns: List of columns to return, null for all columns
 *  - Attributes: Get attributes
 */
type GetRowsWithColumnsArgs struct {
	TableName  Text            `json:"tableName"`  // 1
	Rows       []Text          `json:"rows"`       // 2
	Columns    []Text          `json:"columns"`    // 3
	Attributes map[string]Text `json:"attributes"` // 4
}

var tstructGetRowsWithColumnsArgs = thrift.NewTStruct("getRowsWithColumns_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("rows", thrift.LIST, 2),
	thrift.NewTField("columns", thrift.LIST, 3),
	thrift.NewTField("attributes", thrift.MAP, 4),
})

func (*GetRowsWithColumnsArgs) GetTStruct() thrift.TStruct { return tstructGetRowsWithColumnsArgs }
func NewGetRowsWithColumnsArgs() *GetRowsWithColumnsArgs {
	output := &GetRowsWithColumnsArgs{}
	{
	}
	return output
}

func (p *GetRowsWithColumnsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowsWithColumnsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowsWithColumnsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.LIST {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.LIST {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.MAP {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v963, err964 := iprot.ReadBinary()
	if err964 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err964)
	}
	p.TableName = Text(v963)
	return err
}

func (p *GetRowsWithColumnsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype970, _size967, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Rows", "", err)
	}
	_ = _etype970
	p.Rows = make([]Text, _size967, _size967)
	for i := 0; i < _size967; i++ {
		v973, err974 := iprot.ReadBinary()
		if err974 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem972", "", err974)
		}
		_elem972 := Text(v973)
		p.Rows[i] = _elem972
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsWithColumnsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype980, _size977, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_ = _etype980
	p.Columns = make([]Text, _size977, _size977)
	for i := 0; i < _size977; i++ {
		v983, err984 := iprot.ReadBinary()
		if err984 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem982", "", err984)
		}
		_elem982 := Text(v983)
		p.Columns[i] = _elem982
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsWithColumnsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype988, _vtype989, _size987, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype988, _vtype989
	p.Attributes = make(map[string]Text, _size987)
	for i := 0; i < _size987; i++ {
		v994, err995 := iprot.ReadString()
		if err995 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key992", "", err995)
		}
		_key992 := v994
		v996, err997 := iprot.ReadBinary()
		if err997 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val993", "", err997)
		}
		_val993 := Text(v996)
		p.Attributes[_key992] = _val993
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowsWithColumnsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowsWithColumns_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Rows != nil {
		err = oprot.WriteFieldBegin("rows", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Rows))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter998 := range p.Rows {
			err = oprot.WriteBinary(Iter998)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter998", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Columns))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter999 := range p.Columns {
			err = oprot.WriteBinary(Iter999)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter999", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1000, Viter1001 := range p.Attributes {
			err = oprot.WriteString(Kiter1000)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1000", "", err)
			}
			err = oprot.WriteBinary(Viter1001)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1001", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsArgs) TStructName() string {
	return "GetRowsWithColumnsArgs"
}

func (p *GetRowsWithColumnsArgs) ThriftName() string {
	return "getRowsWithColumns_args"
}

func (p *GetRowsWithColumnsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Rows
	case 3:
		return p.Columns
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *GetRowsWithColumnsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("rows", thrift.LIST, 2),
		thrift.NewTField("columns", thrift.LIST, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowsWithColumnsResult struct {
	Success []*TRowResult `json:"success"` // 0
	Io      *IOError      `json:"io"`      // 1
}

var tstructGetRowsWithColumnsResult = thrift.NewTStruct("getRowsWithColumns_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetRowsWithColumnsResult) GetTStruct() thrift.TStruct { return tstructGetRowsWithColumnsResult }
func NewGetRowsWithColumnsResult() *GetRowsWithColumnsResult {
	output := &GetRowsWithColumnsResult{}
	{
	}
	return output
}

func (p *GetRowsWithColumnsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowsWithColumnsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowsWithColumnsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1007, _size1004, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype1007
	p.Success = make([]*TRowResult, _size1004, _size1004)
	for i := 0; i < _size1004; i++ {
		_elem1009 := NewTRowResult()
		err1012 := _elem1009.Read(iprot)
		if err1012 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1009TRowResult", err1012)
		}
		p.Success[i] = _elem1009
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsWithColumnsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1015 := p.Io.Read(iprot)
	if err1015 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1015)
	}
	return err
}

func (p *GetRowsWithColumnsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowsWithColumns_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1016 := range p.Success {
			err = Iter1016.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsResult) TStructName() string {
	return "GetRowsWithColumnsResult"
}

func (p *GetRowsWithColumnsResult) ThriftName() string {
	return "getRowsWithColumns_result"
}

func (p *GetRowsWithColumnsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowsWithColumnsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of the table
 *  - Rows: row keys
 *  - Timestamp: timestamp
 *  - Attributes: Get attributes
 */
type GetRowsTsArgs struct {
	TableName  Text            `json:"tableName"`  // 1
	Rows       []Text          `json:"rows"`       // 2
	Timestamp  int64           `json:"timestamp"`  // 3
	Attributes map[string]Text `json:"attributes"` // 4
}

var tstructGetRowsTsArgs = thrift.NewTStruct("getRowsTs_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("rows", thrift.LIST, 2),
	thrift.NewTField("timestamp", thrift.I64, 3),
	thrift.NewTField("attributes", thrift.MAP, 4),
})

func (*GetRowsTsArgs) GetTStruct() thrift.TStruct { return tstructGetRowsTsArgs }
func NewGetRowsTsArgs() *GetRowsTsArgs {
	output := &GetRowsTsArgs{}
	{
	}
	return output
}

func (p *GetRowsTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowsTsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowsTsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.LIST {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.MAP {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsTsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1017, err1018 := iprot.ReadBinary()
	if err1018 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1018)
	}
	p.TableName = Text(v1017)
	return err
}

func (p *GetRowsTsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1024, _size1021, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Rows", "", err)
	}
	_ = _etype1024
	p.Rows = make([]Text, _size1021, _size1021)
	for i := 0; i < _size1021; i++ {
		v1027, err1028 := iprot.ReadBinary()
		if err1028 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem1026", "", err1028)
		}
		_elem1026 := Text(v1027)
		p.Rows[i] = _elem1026
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsTsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1029, err1030 := iprot.ReadI64()
	if err1030 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err1030)
	}
	p.Timestamp = v1029
	return err
}

func (p *GetRowsTsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1034, _vtype1035, _size1033, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1034, _vtype1035
	p.Attributes = make(map[string]Text, _size1033)
	for i := 0; i < _size1033; i++ {
		v1040, err1041 := iprot.ReadString()
		if err1041 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1038", "", err1041)
		}
		_key1038 := v1040
		v1042, err1043 := iprot.ReadBinary()
		if err1043 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1039", "", err1043)
		}
		_val1039 := Text(v1042)
		p.Attributes[_key1038] = _val1039
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowsTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowsTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsTsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsTsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Rows != nil {
		err = oprot.WriteFieldBegin("rows", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Rows))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1044 := range p.Rows {
			err = oprot.WriteBinary(Iter1044)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter1044", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsTsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsTsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1045, Viter1046 := range p.Attributes {
			err = oprot.WriteString(Kiter1045)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1045", "", err)
			}
			err = oprot.WriteBinary(Viter1046)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1046", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsTsArgs) TStructName() string {
	return "GetRowsTsArgs"
}

func (p *GetRowsTsArgs) ThriftName() string {
	return "getRowsTs_args"
}

func (p *GetRowsTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Rows
	case 3:
		return p.Timestamp
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *GetRowsTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("rows", thrift.LIST, 2),
		thrift.NewTField("timestamp", thrift.I64, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowsTsResult struct {
	Success []*TRowResult `json:"success"` // 0
	Io      *IOError      `json:"io"`      // 1
}

var tstructGetRowsTsResult = thrift.NewTStruct("getRowsTs_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetRowsTsResult) GetTStruct() thrift.TStruct { return tstructGetRowsTsResult }
func NewGetRowsTsResult() *GetRowsTsResult {
	output := &GetRowsTsResult{}
	{
	}
	return output
}

func (p *GetRowsTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowsTsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowsTsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsTsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1052, _size1049, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype1052
	p.Success = make([]*TRowResult, _size1049, _size1049)
	for i := 0; i < _size1049; i++ {
		_elem1054 := NewTRowResult()
		err1057 := _elem1054.Read(iprot)
		if err1057 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1054TRowResult", err1057)
		}
		p.Success[i] = _elem1054
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsTsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1060 := p.Io.Read(iprot)
	if err1060 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1060)
	}
	return err
}

func (p *GetRowsTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowsTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsTsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1061 := range p.Success {
			err = Iter1061.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsTsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsTsResult) TStructName() string {
	return "GetRowsTsResult"
}

func (p *GetRowsTsResult) ThriftName() string {
	return "getRowsTs_result"
}

func (p *GetRowsTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowsTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Rows: row keys
 *  - Columns: List of columns to return, null for all columns
 *  - Timestamp
 *  - Attributes: Get attributes
 */
type GetRowsWithColumnsTsArgs struct {
	TableName  Text            `json:"tableName"`  // 1
	Rows       []Text          `json:"rows"`       // 2
	Columns    []Text          `json:"columns"`    // 3
	Timestamp  int64           `json:"timestamp"`  // 4
	Attributes map[string]Text `json:"attributes"` // 5
}

var tstructGetRowsWithColumnsTsArgs = thrift.NewTStruct("getRowsWithColumnsTs_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("rows", thrift.LIST, 2),
	thrift.NewTField("columns", thrift.LIST, 3),
	thrift.NewTField("timestamp", thrift.I64, 4),
	thrift.NewTField("attributes", thrift.MAP, 5),
})

func (*GetRowsWithColumnsTsArgs) GetTStruct() thrift.TStruct { return tstructGetRowsWithColumnsTsArgs }
func NewGetRowsWithColumnsTsArgs() *GetRowsWithColumnsTsArgs {
	output := &GetRowsWithColumnsTsArgs{}
	{
	}
	return output
}

func (p *GetRowsWithColumnsTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowsWithColumnsTsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowsWithColumnsTsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.LIST {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.LIST {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //
			if fieldTypeId == thrift.MAP {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1062, err1063 := iprot.ReadBinary()
	if err1063 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1063)
	}
	p.TableName = Text(v1062)
	return err
}

func (p *GetRowsWithColumnsTsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1069, _size1066, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Rows", "", err)
	}
	_ = _etype1069
	p.Rows = make([]Text, _size1066, _size1066)
	for i := 0; i < _size1066; i++ {
		v1072, err1073 := iprot.ReadBinary()
		if err1073 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem1071", "", err1073)
		}
		_elem1071 := Text(v1072)
		p.Rows[i] = _elem1071
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1079, _size1076, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_ = _etype1079
	p.Columns = make([]Text, _size1076, _size1076)
	for i := 0; i < _size1076; i++ {
		v1082, err1083 := iprot.ReadBinary()
		if err1083 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem1081", "", err1083)
		}
		_elem1081 := Text(v1082)
		p.Columns[i] = _elem1081
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1084, err1085 := iprot.ReadI64()
	if err1085 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err1085)
	}
	p.Timestamp = v1084
	return err
}

func (p *GetRowsWithColumnsTsArgs) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1089, _vtype1090, _size1088, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1089, _vtype1090
	p.Attributes = make(map[string]Text, _size1088)
	for i := 0; i < _size1088; i++ {
		v1095, err1096 := iprot.ReadString()
		if err1096 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1093", "", err1096)
		}
		_key1093 := v1095
		v1097, err1098 := iprot.ReadBinary()
		if err1098 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1094", "", err1098)
		}
		_val1094 := Text(v1097)
		p.Attributes[_key1093] = _val1094
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowsWithColumnsTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Rows != nil {
		err = oprot.WriteFieldBegin("rows", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Rows))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1099 := range p.Rows {
			err = oprot.WriteBinary(Iter1099)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter1099", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rows", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Columns))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1100 := range p.Columns {
			err = oprot.WriteBinary(Iter1100)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter1100", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1101, Viter1102 := range p.Attributes {
			err = oprot.WriteString(Kiter1101)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1101", "", err)
			}
			err = oprot.WriteBinary(Viter1102)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1102", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsTsArgs) TStructName() string {
	return "GetRowsWithColumnsTsArgs"
}

func (p *GetRowsWithColumnsTsArgs) ThriftName() string {
	return "getRowsWithColumnsTs_args"
}

func (p *GetRowsWithColumnsTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Rows
	case 3:
		return p.Columns
	case 4:
		return p.Timestamp
	case 5:
		return p.Attributes
	}
	return nil
}

func (p *GetRowsWithColumnsTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("rows", thrift.LIST, 2),
		thrift.NewTField("columns", thrift.LIST, 3),
		thrift.NewTField("timestamp", thrift.I64, 4),
		thrift.NewTField("attributes", thrift.MAP, 5),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowsWithColumnsTsResult struct {
	Success []*TRowResult `json:"success"` // 0
	Io      *IOError      `json:"io"`      // 1
}

var tstructGetRowsWithColumnsTsResult = thrift.NewTStruct("getRowsWithColumnsTs_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetRowsWithColumnsTsResult) GetTStruct() thrift.TStruct {
	return tstructGetRowsWithColumnsTsResult
}
func NewGetRowsWithColumnsTsResult() *GetRowsWithColumnsTsResult {
	output := &GetRowsWithColumnsTsResult{}
	{
	}
	return output
}

func (p *GetRowsWithColumnsTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowsWithColumnsTsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowsWithColumnsTsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsTsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1108, _size1105, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype1108
	p.Success = make([]*TRowResult, _size1105, _size1105)
	for i := 0; i < _size1105; i++ {
		_elem1110 := NewTRowResult()
		err1113 := _elem1110.Read(iprot)
		if err1113 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1110TRowResult", err1113)
		}
		p.Success[i] = _elem1110
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowsWithColumnsTsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1116 := p.Io.Read(iprot)
	if err1116 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1116)
	}
	return err
}

func (p *GetRowsWithColumnsTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowsWithColumnsTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowsWithColumnsTsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1117 := range p.Success {
			err = Iter1117.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsTsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowsWithColumnsTsResult) TStructName() string {
	return "GetRowsWithColumnsTsResult"
}

func (p *GetRowsWithColumnsTsResult) ThriftName() string {
	return "getRowsWithColumnsTs_result"
}

func (p *GetRowsWithColumnsTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowsWithColumnsTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Mutations: list of mutation commands
 *  - Attributes: Mutation attributes
 */
type MutateRowArgs struct {
	TableName  Text            `json:"tableName"`  // 1
	Row        Text            `json:"row"`        // 2
	Mutations  []*Mutation     `json:"mutations"`  // 3
	Attributes map[string]Text `json:"attributes"` // 4
}

var tstructMutateRowArgs = thrift.NewTStruct("mutateRow_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("mutations", thrift.LIST, 3),
	thrift.NewTField("attributes", thrift.MAP, 4),
})

func (*MutateRowArgs) GetTStruct() thrift.TStruct { return tstructMutateRowArgs }
func NewMutateRowArgs() *MutateRowArgs {
	output := &MutateRowArgs{}
	{
	}
	return output
}

func (p *MutateRowArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMutateRowArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMutateRowArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.LIST {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.MAP {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1118, err1119 := iprot.ReadBinary()
	if err1119 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1119)
	}
	p.TableName = Text(v1118)
	return err
}

func (p *MutateRowArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1120, err1121 := iprot.ReadBinary()
	if err1121 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err1121)
	}
	p.Row = Text(v1120)
	return err
}

func (p *MutateRowArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1127, _size1124, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Mutations", "", err)
	}
	_ = _etype1127
	p.Mutations = make([]*Mutation, _size1124, _size1124)
	for i := 0; i < _size1124; i++ {
		_elem1129 := NewMutation()
		err1132 := _elem1129.Read(iprot)
		if err1132 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1129Mutation", err1132)
		}
		p.Mutations[i] = _elem1129
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *MutateRowArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1136, _vtype1137, _size1135, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1136, _vtype1137
	p.Attributes = make(map[string]Text, _size1135)
	for i := 0; i < _size1135; i++ {
		v1142, err1143 := iprot.ReadString()
		if err1143 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1140", "", err1143)
		}
		_key1140 := v1142
		v1144, err1145 := iprot.ReadBinary()
		if err1145 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1141", "", err1145)
		}
		_val1141 := Text(v1144)
		p.Attributes[_key1140] = _val1141
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *MutateRowArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("mutateRow_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Mutations != nil {
		err = oprot.WriteFieldBegin("mutations", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "mutations", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Mutations))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1146 := range p.Mutations {
			err = Iter1146.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("Mutation", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "mutations", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1147, Viter1148 := range p.Attributes {
			err = oprot.WriteString(Kiter1147)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1147", "", err)
			}
			err = oprot.WriteBinary(Viter1148)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1148", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowArgs) TStructName() string {
	return "MutateRowArgs"
}

func (p *MutateRowArgs) ThriftName() string {
	return "mutateRow_args"
}

func (p *MutateRowArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Mutations
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *MutateRowArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("mutations", thrift.LIST, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Io
 *  - Ia
 */
type MutateRowResult struct {
	Io *IOError         `json:"io"` // 1
	Ia *IllegalArgument `json:"ia"` // 2
}

var tstructMutateRowResult = thrift.NewTStruct("mutateRow_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
	thrift.NewTField("ia", thrift.STRUCT, 2),
})

func (*MutateRowResult) GetTStruct() thrift.TStruct { return tstructMutateRowResult }
func NewMutateRowResult() *MutateRowResult {
	output := &MutateRowResult{}
	{
	}
	return output
}

func (p *MutateRowResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMutateRowResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMutateRowResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //IllegalArgument
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1151 := p.Io.Read(iprot)
	if err1151 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1151)
	}
	return err
}

func (p *MutateRowResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err1154 := p.Ia.Read(iprot)
	if err1154 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1154)
	}
	return err
}

func (p *MutateRowResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("mutateRow_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ia != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowResult) TStructName() string {
	return "MutateRowResult"
}

func (p *MutateRowResult) ThriftName() string {
	return "mutateRow_result"
}

func (p *MutateRowResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	case 2:
		return p.Ia
	}
	return nil
}

func (p *MutateRowResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Mutations: list of mutation commands
 *  - Timestamp: timestamp
 *  - Attributes: Mutation attributes
 */
type MutateRowTsArgs struct {
	TableName  Text            `json:"tableName"`  // 1
	Row        Text            `json:"row"`        // 2
	Mutations  []*Mutation     `json:"mutations"`  // 3
	Timestamp  int64           `json:"timestamp"`  // 4
	Attributes map[string]Text `json:"attributes"` // 5
}

var tstructMutateRowTsArgs = thrift.NewTStruct("mutateRowTs_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("mutations", thrift.LIST, 3),
	thrift.NewTField("timestamp", thrift.I64, 4),
	thrift.NewTField("attributes", thrift.MAP, 5),
})

func (*MutateRowTsArgs) GetTStruct() thrift.TStruct { return tstructMutateRowTsArgs }
func NewMutateRowTsArgs() *MutateRowTsArgs {
	output := &MutateRowTsArgs{}
	{
	}
	return output
}

func (p *MutateRowTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMutateRowTsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMutateRowTsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.LIST {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //
			if fieldTypeId == thrift.MAP {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowTsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1155, err1156 := iprot.ReadBinary()
	if err1156 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1156)
	}
	p.TableName = Text(v1155)
	return err
}

func (p *MutateRowTsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1157, err1158 := iprot.ReadBinary()
	if err1158 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err1158)
	}
	p.Row = Text(v1157)
	return err
}

func (p *MutateRowTsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1164, _size1161, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Mutations", "", err)
	}
	_ = _etype1164
	p.Mutations = make([]*Mutation, _size1161, _size1161)
	for i := 0; i < _size1161; i++ {
		_elem1166 := NewMutation()
		err1169 := _elem1166.Read(iprot)
		if err1169 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1166Mutation", err1169)
		}
		p.Mutations[i] = _elem1166
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *MutateRowTsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1170, err1171 := iprot.ReadI64()
	if err1171 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err1171)
	}
	p.Timestamp = v1170
	return err
}

func (p *MutateRowTsArgs) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1175, _vtype1176, _size1174, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1175, _vtype1176
	p.Attributes = make(map[string]Text, _size1174)
	for i := 0; i < _size1174; i++ {
		v1181, err1182 := iprot.ReadString()
		if err1182 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1179", "", err1182)
		}
		_key1179 := v1181
		v1183, err1184 := iprot.ReadBinary()
		if err1184 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1180", "", err1184)
		}
		_val1180 := Text(v1183)
		p.Attributes[_key1179] = _val1180
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *MutateRowTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("mutateRowTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowTsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowTsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowTsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Mutations != nil {
		err = oprot.WriteFieldBegin("mutations", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "mutations", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Mutations))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1185 := range p.Mutations {
			err = Iter1185.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("Mutation", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "mutations", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowTsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowTsArgs) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1186, Viter1187 := range p.Attributes {
			err = oprot.WriteString(Kiter1186)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1186", "", err)
			}
			err = oprot.WriteBinary(Viter1187)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1187", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowTsArgs) TStructName() string {
	return "MutateRowTsArgs"
}

func (p *MutateRowTsArgs) ThriftName() string {
	return "mutateRowTs_args"
}

func (p *MutateRowTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Mutations
	case 4:
		return p.Timestamp
	case 5:
		return p.Attributes
	}
	return nil
}

func (p *MutateRowTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("mutations", thrift.LIST, 3),
		thrift.NewTField("timestamp", thrift.I64, 4),
		thrift.NewTField("attributes", thrift.MAP, 5),
	})
}

/**
 * Attributes:
 *  - Io
 *  - Ia
 */
type MutateRowTsResult struct {
	Io *IOError         `json:"io"` // 1
	Ia *IllegalArgument `json:"ia"` // 2
}

var tstructMutateRowTsResult = thrift.NewTStruct("mutateRowTs_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
	thrift.NewTField("ia", thrift.STRUCT, 2),
})

func (*MutateRowTsResult) GetTStruct() thrift.TStruct { return tstructMutateRowTsResult }
func NewMutateRowTsResult() *MutateRowTsResult {
	output := &MutateRowTsResult{}
	{
	}
	return output
}

func (p *MutateRowTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMutateRowTsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMutateRowTsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //IllegalArgument
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowTsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1190 := p.Io.Read(iprot)
	if err1190 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1190)
	}
	return err
}

func (p *MutateRowTsResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err1193 := p.Ia.Read(iprot)
	if err1193 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1193)
	}
	return err
}

func (p *MutateRowTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("mutateRowTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ia != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowTsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowTsResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowTsResult) TStructName() string {
	return "MutateRowTsResult"
}

func (p *MutateRowTsResult) ThriftName() string {
	return "mutateRowTs_result"
}

func (p *MutateRowTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	case 2:
		return p.Ia
	}
	return nil
}

func (p *MutateRowTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - RowBatches: list of row batches
 *  - Attributes: Mutation attributes
 */
type MutateRowsArgs struct {
	TableName  Text             `json:"tableName"`  // 1
	RowBatches []*BatchMutation `json:"rowBatches"` // 2
	Attributes map[string]Text  `json:"attributes"` // 3
}

var tstructMutateRowsArgs = thrift.NewTStruct("mutateRows_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("rowBatches", thrift.LIST, 2),
	thrift.NewTField("attributes", thrift.MAP, 3),
})

func (*MutateRowsArgs) GetTStruct() thrift.TStruct { return tstructMutateRowsArgs }
func NewMutateRowsArgs() *MutateRowsArgs {
	output := &MutateRowsArgs{}
	{
	}
	return output
}

func (p *MutateRowsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMutateRowsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMutateRowsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.LIST {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.MAP {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1194, err1195 := iprot.ReadBinary()
	if err1195 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1195)
	}
	p.TableName = Text(v1194)
	return err
}

func (p *MutateRowsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1201, _size1198, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.RowBatches", "", err)
	}
	_ = _etype1201
	p.RowBatches = make([]*BatchMutation, _size1198, _size1198)
	for i := 0; i < _size1198; i++ {
		_elem1203 := NewBatchMutation()
		err1206 := _elem1203.Read(iprot)
		if err1206 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1203BatchMutation", err1206)
		}
		p.RowBatches[i] = _elem1203
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *MutateRowsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1210, _vtype1211, _size1209, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1210, _vtype1211
	p.Attributes = make(map[string]Text, _size1209)
	for i := 0; i < _size1209; i++ {
		v1216, err1217 := iprot.ReadString()
		if err1217 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1214", "", err1217)
		}
		_key1214 := v1216
		v1218, err1219 := iprot.ReadBinary()
		if err1219 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1215", "", err1219)
		}
		_val1215 := Text(v1218)
		p.Attributes[_key1214] = _val1215
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *MutateRowsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("mutateRows_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.RowBatches != nil {
		err = oprot.WriteFieldBegin("rowBatches", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rowBatches", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.RowBatches))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1220 := range p.RowBatches {
			err = Iter1220.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("BatchMutation", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rowBatches", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1221, Viter1222 := range p.Attributes {
			err = oprot.WriteString(Kiter1221)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1221", "", err)
			}
			err = oprot.WriteBinary(Viter1222)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1222", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsArgs) TStructName() string {
	return "MutateRowsArgs"
}

func (p *MutateRowsArgs) ThriftName() string {
	return "mutateRows_args"
}

func (p *MutateRowsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.RowBatches
	case 3:
		return p.Attributes
	}
	return nil
}

func (p *MutateRowsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("rowBatches", thrift.LIST, 2),
		thrift.NewTField("attributes", thrift.MAP, 3),
	})
}

/**
 * Attributes:
 *  - Io
 *  - Ia
 */
type MutateRowsResult struct {
	Io *IOError         `json:"io"` // 1
	Ia *IllegalArgument `json:"ia"` // 2
}

var tstructMutateRowsResult = thrift.NewTStruct("mutateRows_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
	thrift.NewTField("ia", thrift.STRUCT, 2),
})

func (*MutateRowsResult) GetTStruct() thrift.TStruct { return tstructMutateRowsResult }
func NewMutateRowsResult() *MutateRowsResult {
	output := &MutateRowsResult{}
	{
	}
	return output
}

func (p *MutateRowsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMutateRowsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMutateRowsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //IllegalArgument
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1225 := p.Io.Read(iprot)
	if err1225 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1225)
	}
	return err
}

func (p *MutateRowsResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err1228 := p.Ia.Read(iprot)
	if err1228 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1228)
	}
	return err
}

func (p *MutateRowsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("mutateRows_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ia != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsResult) TStructName() string {
	return "MutateRowsResult"
}

func (p *MutateRowsResult) ThriftName() string {
	return "mutateRows_result"
}

func (p *MutateRowsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	case 2:
		return p.Ia
	}
	return nil
}

func (p *MutateRowsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - RowBatches: list of row batches
 *  - Timestamp: timestamp
 *  - Attributes: Mutation attributes
 */
type MutateRowsTsArgs struct {
	TableName  Text             `json:"tableName"`  // 1
	RowBatches []*BatchMutation `json:"rowBatches"` // 2
	Timestamp  int64            `json:"timestamp"`  // 3
	Attributes map[string]Text  `json:"attributes"` // 4
}

var tstructMutateRowsTsArgs = thrift.NewTStruct("mutateRowsTs_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("rowBatches", thrift.LIST, 2),
	thrift.NewTField("timestamp", thrift.I64, 3),
	thrift.NewTField("attributes", thrift.MAP, 4),
})

func (*MutateRowsTsArgs) GetTStruct() thrift.TStruct { return tstructMutateRowsTsArgs }
func NewMutateRowsTsArgs() *MutateRowsTsArgs {
	output := &MutateRowsTsArgs{}
	{
	}
	return output
}

func (p *MutateRowsTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMutateRowsTsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMutateRowsTsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //
			if fieldTypeId == thrift.LIST {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.MAP {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsTsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1229, err1230 := iprot.ReadBinary()
	if err1230 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1230)
	}
	p.TableName = Text(v1229)
	return err
}

func (p *MutateRowsTsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1236, _size1233, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.RowBatches", "", err)
	}
	_ = _etype1236
	p.RowBatches = make([]*BatchMutation, _size1233, _size1233)
	for i := 0; i < _size1233; i++ {
		_elem1238 := NewBatchMutation()
		err1241 := _elem1238.Read(iprot)
		if err1241 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1238BatchMutation", err1241)
		}
		p.RowBatches[i] = _elem1238
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *MutateRowsTsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1242, err1243 := iprot.ReadI64()
	if err1243 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err1243)
	}
	p.Timestamp = v1242
	return err
}

func (p *MutateRowsTsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1247, _vtype1248, _size1246, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1247, _vtype1248
	p.Attributes = make(map[string]Text, _size1246)
	for i := 0; i < _size1246; i++ {
		v1253, err1254 := iprot.ReadString()
		if err1254 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1251", "", err1254)
		}
		_key1251 := v1253
		v1255, err1256 := iprot.ReadBinary()
		if err1256 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1252", "", err1256)
		}
		_val1252 := Text(v1255)
		p.Attributes[_key1251] = _val1252
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *MutateRowsTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("mutateRowsTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsTsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsTsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.RowBatches != nil {
		err = oprot.WriteFieldBegin("rowBatches", thrift.LIST, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rowBatches", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.RowBatches))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1257 := range p.RowBatches {
			err = Iter1257.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("BatchMutation", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "rowBatches", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsTsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsTsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1258, Viter1259 := range p.Attributes {
			err = oprot.WriteString(Kiter1258)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1258", "", err)
			}
			err = oprot.WriteBinary(Viter1259)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1259", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsTsArgs) TStructName() string {
	return "MutateRowsTsArgs"
}

func (p *MutateRowsTsArgs) ThriftName() string {
	return "mutateRowsTs_args"
}

func (p *MutateRowsTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.RowBatches
	case 3:
		return p.Timestamp
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *MutateRowsTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("rowBatches", thrift.LIST, 2),
		thrift.NewTField("timestamp", thrift.I64, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Io
 *  - Ia
 */
type MutateRowsTsResult struct {
	Io *IOError         `json:"io"` // 1
	Ia *IllegalArgument `json:"ia"` // 2
}

var tstructMutateRowsTsResult = thrift.NewTStruct("mutateRowsTs_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
	thrift.NewTField("ia", thrift.STRUCT, 2),
})

func (*MutateRowsTsResult) GetTStruct() thrift.TStruct { return tstructMutateRowsTsResult }
func NewMutateRowsTsResult() *MutateRowsTsResult {
	output := &MutateRowsTsResult{}
	{
	}
	return output
}

func (p *MutateRowsTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructMutateRowsTsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructMutateRowsTsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //IllegalArgument
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsTsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1262 := p.Io.Read(iprot)
	if err1262 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1262)
	}
	return err
}

func (p *MutateRowsTsResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err1265 := p.Ia.Read(iprot)
	if err1265 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1265)
	}
	return err
}

func (p *MutateRowsTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("mutateRowsTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ia != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *MutateRowsTsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsTsResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *MutateRowsTsResult) TStructName() string {
	return "MutateRowsTsResult"
}

func (p *MutateRowsTsResult) ThriftName() string {
	return "mutateRowsTs_result"
}

func (p *MutateRowsTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	case 2:
		return p.Ia
	}
	return nil
}

func (p *MutateRowsTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row to increment
 *  - Column: name of column
 *  - Value: amount to increment by
 */
type AtomicIncrementArgs struct {
	TableName Text  `json:"tableName"` // 1
	Row       Text  `json:"row"`       // 2
	Column    Text  `json:"column"`    // 3
	Value     int64 `json:"value"`     // 4
}

var tstructAtomicIncrementArgs = thrift.NewTStruct("atomicIncrement_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("column", thrift.STRING, 3),
	thrift.NewTField("value", thrift.I64, 4),
})

func (*AtomicIncrementArgs) GetTStruct() thrift.TStruct { return tstructAtomicIncrementArgs }
func NewAtomicIncrementArgs() *AtomicIncrementArgs {
	output := &AtomicIncrementArgs{}
	{
	}
	return output
}

func (p *AtomicIncrementArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructAtomicIncrementArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructAtomicIncrementArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AtomicIncrementArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1266, err1267 := iprot.ReadBinary()
	if err1267 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1267)
	}
	p.TableName = Text(v1266)
	return err
}

func (p *AtomicIncrementArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1268, err1269 := iprot.ReadBinary()
	if err1269 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err1269)
	}
	p.Row = Text(v1268)
	return err
}

func (p *AtomicIncrementArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1270, err1271 := iprot.ReadBinary()
	if err1271 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err1271)
	}
	p.Column = Text(v1270)
	return err
}

func (p *AtomicIncrementArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1272, err1273 := iprot.ReadI64()
	if err1273 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "value", p.ThriftName(), err1273)
	}
	p.Value = v1272
	return err
}

func (p *AtomicIncrementArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("atomicIncrement_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AtomicIncrementArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AtomicIncrementArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AtomicIncrementArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		err = oprot.WriteFieldBegin("column", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Column)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AtomicIncrementArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("value", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "value", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Value))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "value", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "value", p.ThriftName(), err)
	}
	return err
}

func (p *AtomicIncrementArgs) TStructName() string {
	return "AtomicIncrementArgs"
}

func (p *AtomicIncrementArgs) ThriftName() string {
	return "atomicIncrement_args"
}

func (p *AtomicIncrementArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Column
	case 4:
		return p.Value
	}
	return nil
}

func (p *AtomicIncrementArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("column", thrift.STRING, 3),
		thrift.NewTField("value", thrift.I64, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 *  - Ia
 */
type AtomicIncrementResult struct {
	Success int64            `json:"success"` // 0
	Io      *IOError         `json:"io"`      // 1
	Ia      *IllegalArgument `json:"ia"`      // 2
}

var tstructAtomicIncrementResult = thrift.NewTStruct("atomicIncrement_result", []thrift.TField{
	thrift.NewTField("success", thrift.I64, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
	thrift.NewTField("ia", thrift.STRUCT, 2),
})

func (*AtomicIncrementResult) GetTStruct() thrift.TStruct { return tstructAtomicIncrementResult }
func NewAtomicIncrementResult() *AtomicIncrementResult {
	output := &AtomicIncrementResult{}
	{
	}
	return output
}

func (p *AtomicIncrementResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructAtomicIncrementResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructAtomicIncrementResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //IllegalArgument
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AtomicIncrementResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1274, err1275 := iprot.ReadI64()
	if err1275 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1275)
	}
	p.Success = v1274
	return err
}

func (p *AtomicIncrementResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1278 := p.Io.Read(iprot)
	if err1278 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1278)
	}
	return err
}

func (p *AtomicIncrementResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err1281 := p.Ia.Read(iprot)
	if err1281 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1281)
	}
	return err
}

func (p *AtomicIncrementResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("atomicIncrement_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ia != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *AtomicIncrementResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.I64, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *AtomicIncrementResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AtomicIncrementResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *AtomicIncrementResult) TStructName() string {
	return "AtomicIncrementResult"
}

func (p *AtomicIncrementResult) ThriftName() string {
	return "atomicIncrement_result"
}

func (p *AtomicIncrementResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	case 2:
		return p.Ia
	}
	return nil
}

func (p *AtomicIncrementResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.I64, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: Row to update
 *  - Column: name of column whose value is to be deleted
 *  - Attributes: Delete attributes
 */
type DeleteAllArgs struct {
	TableName  Text            `json:"tableName"`  // 1
	Row        Text            `json:"row"`        // 2
	Column     Text            `json:"column"`     // 3
	Attributes map[string]Text `json:"attributes"` // 4
}

var tstructDeleteAllArgs = thrift.NewTStruct("deleteAll_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("column", thrift.STRING, 3),
	thrift.NewTField("attributes", thrift.MAP, 4),
})

func (*DeleteAllArgs) GetTStruct() thrift.TStruct { return tstructDeleteAllArgs }
func NewDeleteAllArgs() *DeleteAllArgs {
	output := &DeleteAllArgs{}
	{
	}
	return output
}

func (p *DeleteAllArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDeleteAllArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDeleteAllArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.MAP {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1282, err1283 := iprot.ReadBinary()
	if err1283 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1283)
	}
	p.TableName = Text(v1282)
	return err
}

func (p *DeleteAllArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1284, err1285 := iprot.ReadBinary()
	if err1285 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err1285)
	}
	p.Row = Text(v1284)
	return err
}

func (p *DeleteAllArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1286, err1287 := iprot.ReadBinary()
	if err1287 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err1287)
	}
	p.Column = Text(v1286)
	return err
}

func (p *DeleteAllArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1291, _vtype1292, _size1290, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1291, _vtype1292
	p.Attributes = make(map[string]Text, _size1290)
	for i := 0; i < _size1290; i++ {
		v1297, err1298 := iprot.ReadString()
		if err1298 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1295", "", err1298)
		}
		_key1295 := v1297
		v1299, err1300 := iprot.ReadBinary()
		if err1300 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1296", "", err1300)
		}
		_val1296 := Text(v1299)
		p.Attributes[_key1295] = _val1296
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *DeleteAllArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteAll_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		err = oprot.WriteFieldBegin("column", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Column)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1301, Viter1302 := range p.Attributes {
			err = oprot.WriteString(Kiter1301)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1301", "", err)
			}
			err = oprot.WriteBinary(Viter1302)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1302", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllArgs) TStructName() string {
	return "DeleteAllArgs"
}

func (p *DeleteAllArgs) ThriftName() string {
	return "deleteAll_args"
}

func (p *DeleteAllArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Column
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *DeleteAllArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("column", thrift.STRING, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Io
 */
type DeleteAllResult struct {
	Io *IOError `json:"io"` // 1
}

var tstructDeleteAllResult = thrift.NewTStruct("deleteAll_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*DeleteAllResult) GetTStruct() thrift.TStruct { return tstructDeleteAllResult }
func NewDeleteAllResult() *DeleteAllResult {
	output := &DeleteAllResult{}
	{
	}
	return output
}

func (p *DeleteAllResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDeleteAllResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDeleteAllResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1305 := p.Io.Read(iprot)
	if err1305 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1305)
	}
	return err
}

func (p *DeleteAllResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteAll_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllResult) TStructName() string {
	return "DeleteAllResult"
}

func (p *DeleteAllResult) ThriftName() string {
	return "deleteAll_result"
}

func (p *DeleteAllResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *DeleteAllResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: Row to update
 *  - Column: name of column whose value is to be deleted
 *  - Timestamp: timestamp
 *  - Attributes: Delete attributes
 */
type DeleteAllTsArgs struct {
	TableName  Text            `json:"tableName"`  // 1
	Row        Text            `json:"row"`        // 2
	Column     Text            `json:"column"`     // 3
	Timestamp  int64           `json:"timestamp"`  // 4
	Attributes map[string]Text `json:"attributes"` // 5
}

var tstructDeleteAllTsArgs = thrift.NewTStruct("deleteAllTs_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("column", thrift.STRING, 3),
	thrift.NewTField("timestamp", thrift.I64, 4),
	thrift.NewTField("attributes", thrift.MAP, 5),
})

func (*DeleteAllTsArgs) GetTStruct() thrift.TStruct { return tstructDeleteAllTsArgs }
func NewDeleteAllTsArgs() *DeleteAllTsArgs {
	output := &DeleteAllTsArgs{}
	{
	}
	return output
}

func (p *DeleteAllTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDeleteAllTsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDeleteAllTsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //
			if fieldTypeId == thrift.MAP {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllTsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1306, err1307 := iprot.ReadBinary()
	if err1307 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1307)
	}
	p.TableName = Text(v1306)
	return err
}

func (p *DeleteAllTsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1308, err1309 := iprot.ReadBinary()
	if err1309 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err1309)
	}
	p.Row = Text(v1308)
	return err
}

func (p *DeleteAllTsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1310, err1311 := iprot.ReadBinary()
	if err1311 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "column", p.ThriftName(), err1311)
	}
	p.Column = Text(v1310)
	return err
}

func (p *DeleteAllTsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1312, err1313 := iprot.ReadI64()
	if err1313 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err1313)
	}
	p.Timestamp = v1312
	return err
}

func (p *DeleteAllTsArgs) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1317, _vtype1318, _size1316, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1317, _vtype1318
	p.Attributes = make(map[string]Text, _size1316)
	for i := 0; i < _size1316; i++ {
		v1323, err1324 := iprot.ReadString()
		if err1324 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1321", "", err1324)
		}
		_key1321 := v1323
		v1325, err1326 := iprot.ReadBinary()
		if err1326 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1322", "", err1326)
		}
		_val1322 := Text(v1325)
		p.Attributes[_key1321] = _val1322
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *DeleteAllTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteAllTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllTsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllTsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllTsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Column != nil {
		err = oprot.WriteFieldBegin("column", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Column)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "column", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllTsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllTsArgs) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1327, Viter1328 := range p.Attributes {
			err = oprot.WriteString(Kiter1327)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1327", "", err)
			}
			err = oprot.WriteBinary(Viter1328)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1328", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllTsArgs) TStructName() string {
	return "DeleteAllTsArgs"
}

func (p *DeleteAllTsArgs) ThriftName() string {
	return "deleteAllTs_args"
}

func (p *DeleteAllTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Column
	case 4:
		return p.Timestamp
	case 5:
		return p.Attributes
	}
	return nil
}

func (p *DeleteAllTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("column", thrift.STRING, 3),
		thrift.NewTField("timestamp", thrift.I64, 4),
		thrift.NewTField("attributes", thrift.MAP, 5),
	})
}

/**
 * Attributes:
 *  - Io
 */
type DeleteAllTsResult struct {
	Io *IOError `json:"io"` // 1
}

var tstructDeleteAllTsResult = thrift.NewTStruct("deleteAllTs_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*DeleteAllTsResult) GetTStruct() thrift.TStruct { return tstructDeleteAllTsResult }
func NewDeleteAllTsResult() *DeleteAllTsResult {
	output := &DeleteAllTsResult{}
	{
	}
	return output
}

func (p *DeleteAllTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDeleteAllTsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDeleteAllTsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllTsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1331 := p.Io.Read(iprot)
	if err1331 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1331)
	}
	return err
}

func (p *DeleteAllTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteAllTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllTsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllTsResult) TStructName() string {
	return "DeleteAllTsResult"
}

func (p *DeleteAllTsResult) ThriftName() string {
	return "deleteAllTs_result"
}

func (p *DeleteAllTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *DeleteAllTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: key of the row to be completely deleted.
 *  - Attributes: Delete attributes
 */
type DeleteAllRowArgs struct {
	TableName  Text            `json:"tableName"`  // 1
	Row        Text            `json:"row"`        // 2
	Attributes map[string]Text `json:"attributes"` // 3
}

var tstructDeleteAllRowArgs = thrift.NewTStruct("deleteAllRow_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("attributes", thrift.MAP, 3),
})

func (*DeleteAllRowArgs) GetTStruct() thrift.TStruct { return tstructDeleteAllRowArgs }
func NewDeleteAllRowArgs() *DeleteAllRowArgs {
	output := &DeleteAllRowArgs{}
	{
	}
	return output
}

func (p *DeleteAllRowArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDeleteAllRowArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDeleteAllRowArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.MAP {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1332, err1333 := iprot.ReadBinary()
	if err1333 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1333)
	}
	p.TableName = Text(v1332)
	return err
}

func (p *DeleteAllRowArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1334, err1335 := iprot.ReadBinary()
	if err1335 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err1335)
	}
	p.Row = Text(v1334)
	return err
}

func (p *DeleteAllRowArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1339, _vtype1340, _size1338, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1339, _vtype1340
	p.Attributes = make(map[string]Text, _size1338)
	for i := 0; i < _size1338; i++ {
		v1345, err1346 := iprot.ReadString()
		if err1346 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1343", "", err1346)
		}
		_key1343 := v1345
		v1347, err1348 := iprot.ReadBinary()
		if err1348 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1344", "", err1348)
		}
		_val1344 := Text(v1347)
		p.Attributes[_key1343] = _val1344
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *DeleteAllRowArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteAllRow_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllRowArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllRowArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1349, Viter1350 := range p.Attributes {
			err = oprot.WriteString(Kiter1349)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1349", "", err)
			}
			err = oprot.WriteBinary(Viter1350)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1350", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllRowArgs) TStructName() string {
	return "DeleteAllRowArgs"
}

func (p *DeleteAllRowArgs) ThriftName() string {
	return "deleteAllRow_args"
}

func (p *DeleteAllRowArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Attributes
	}
	return nil
}

func (p *DeleteAllRowArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("attributes", thrift.MAP, 3),
	})
}

/**
 * Attributes:
 *  - Io
 */
type DeleteAllRowResult struct {
	Io *IOError `json:"io"` // 1
}

var tstructDeleteAllRowResult = thrift.NewTStruct("deleteAllRow_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*DeleteAllRowResult) GetTStruct() thrift.TStruct { return tstructDeleteAllRowResult }
func NewDeleteAllRowResult() *DeleteAllRowResult {
	output := &DeleteAllRowResult{}
	{
	}
	return output
}

func (p *DeleteAllRowResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDeleteAllRowResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDeleteAllRowResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1353 := p.Io.Read(iprot)
	if err1353 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1353)
	}
	return err
}

func (p *DeleteAllRowResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteAllRow_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllRowResult) TStructName() string {
	return "DeleteAllRowResult"
}

func (p *DeleteAllRowResult) ThriftName() string {
	return "deleteAllRow_result"
}

func (p *DeleteAllRowResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *DeleteAllRowResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Increment: The single increment to apply
 */
type IncrementArgs struct {
	Increment *TIncrement `json:"increment"` // 1
}

var tstructIncrementArgs = thrift.NewTStruct("increment_args", []thrift.TField{
	thrift.NewTField("increment", thrift.STRUCT, 1),
})

func (*IncrementArgs) GetTStruct() thrift.TStruct { return tstructIncrementArgs }
func NewIncrementArgs() *IncrementArgs {
	output := &IncrementArgs{}
	{
	}
	return output
}

func (p *IncrementArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructIncrementArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructIncrementArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //TIncrement
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IncrementArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Increment = NewTIncrement()
	err1356 := p.Increment.Read(iprot)
	if err1356 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IncrementTIncrement", err1356)
	}
	return err
}

func (p *IncrementArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("increment_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IncrementArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Increment != nil {
		err = oprot.WriteFieldBegin("increment", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "increment", p.ThriftName(), err)
		}
		err = p.Increment.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TIncrement", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "increment", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IncrementArgs) TStructName() string {
	return "IncrementArgs"
}

func (p *IncrementArgs) ThriftName() string {
	return "increment_args"
}

func (p *IncrementArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Increment
	}
	return nil
}

func (p *IncrementArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("increment", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Io
 */
type IncrementResult struct {
	Io *IOError `json:"io"` // 1
}

var tstructIncrementResult = thrift.NewTStruct("increment_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*IncrementResult) GetTStruct() thrift.TStruct { return tstructIncrementResult }
func NewIncrementResult() *IncrementResult {
	output := &IncrementResult{}
	{
	}
	return output
}

func (p *IncrementResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructIncrementResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructIncrementResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IncrementResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1359 := p.Io.Read(iprot)
	if err1359 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1359)
	}
	return err
}

func (p *IncrementResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("increment_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IncrementResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IncrementResult) TStructName() string {
	return "IncrementResult"
}

func (p *IncrementResult) ThriftName() string {
	return "increment_result"
}

func (p *IncrementResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *IncrementResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Increments: The list of increments
 */
type IncrementRowsArgs struct {
	Increments []*TIncrement `json:"increments"` // 1
}

var tstructIncrementRowsArgs = thrift.NewTStruct("incrementRows_args", []thrift.TField{
	thrift.NewTField("increments", thrift.LIST, 1),
})

func (*IncrementRowsArgs) GetTStruct() thrift.TStruct { return tstructIncrementRowsArgs }
func NewIncrementRowsArgs() *IncrementRowsArgs {
	output := &IncrementRowsArgs{}
	{
	}
	return output
}

func (p *IncrementRowsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructIncrementRowsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructIncrementRowsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //
			if fieldTypeId == thrift.LIST {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IncrementRowsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1365, _size1362, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Increments", "", err)
	}
	_ = _etype1365
	p.Increments = make([]*TIncrement, _size1362, _size1362)
	for i := 0; i < _size1362; i++ {
		_elem1367 := NewTIncrement()
		err1370 := _elem1367.Read(iprot)
		if err1370 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1367TIncrement", err1370)
		}
		p.Increments[i] = _elem1367
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *IncrementRowsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("incrementRows_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IncrementRowsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Increments != nil {
		err = oprot.WriteFieldBegin("increments", thrift.LIST, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "increments", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Increments))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1371 := range p.Increments {
			err = Iter1371.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TIncrement", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "increments", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IncrementRowsArgs) TStructName() string {
	return "IncrementRowsArgs"
}

func (p *IncrementRowsArgs) ThriftName() string {
	return "incrementRows_args"
}

func (p *IncrementRowsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Increments
	}
	return nil
}

func (p *IncrementRowsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("increments", thrift.LIST, 1),
	})
}

/**
 * Attributes:
 *  - Io
 */
type IncrementRowsResult struct {
	Io *IOError `json:"io"` // 1
}

var tstructIncrementRowsResult = thrift.NewTStruct("incrementRows_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*IncrementRowsResult) GetTStruct() thrift.TStruct { return tstructIncrementRowsResult }
func NewIncrementRowsResult() *IncrementRowsResult {
	output := &IncrementRowsResult{}
	{
	}
	return output
}

func (p *IncrementRowsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructIncrementRowsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructIncrementRowsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IncrementRowsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1374 := p.Io.Read(iprot)
	if err1374 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1374)
	}
	return err
}

func (p *IncrementRowsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("incrementRows_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *IncrementRowsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *IncrementRowsResult) TStructName() string {
	return "IncrementRowsResult"
}

func (p *IncrementRowsResult) ThriftName() string {
	return "incrementRows_result"
}

func (p *IncrementRowsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *IncrementRowsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: key of the row to be completely deleted.
 *  - Timestamp: timestamp
 *  - Attributes: Delete attributes
 */
type DeleteAllRowTsArgs struct {
	TableName  Text            `json:"tableName"`  // 1
	Row        Text            `json:"row"`        // 2
	Timestamp  int64           `json:"timestamp"`  // 3
	Attributes map[string]Text `json:"attributes"` // 4
}

var tstructDeleteAllRowTsArgs = thrift.NewTStruct("deleteAllRowTs_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("timestamp", thrift.I64, 3),
	thrift.NewTField("attributes", thrift.MAP, 4),
})

func (*DeleteAllRowTsArgs) GetTStruct() thrift.TStruct { return tstructDeleteAllRowTsArgs }
func NewDeleteAllRowTsArgs() *DeleteAllRowTsArgs {
	output := &DeleteAllRowTsArgs{}
	{
	}
	return output
}

func (p *DeleteAllRowTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDeleteAllRowTsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDeleteAllRowTsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.MAP {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowTsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1375, err1376 := iprot.ReadBinary()
	if err1376 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1376)
	}
	p.TableName = Text(v1375)
	return err
}

func (p *DeleteAllRowTsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1377, err1378 := iprot.ReadBinary()
	if err1378 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err1378)
	}
	p.Row = Text(v1377)
	return err
}

func (p *DeleteAllRowTsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1379, err1380 := iprot.ReadI64()
	if err1380 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "timestamp", p.ThriftName(), err1380)
	}
	p.Timestamp = v1379
	return err
}

func (p *DeleteAllRowTsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1384, _vtype1385, _size1383, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1384, _vtype1385
	p.Attributes = make(map[string]Text, _size1383)
	for i := 0; i < _size1383; i++ {
		v1390, err1391 := iprot.ReadString()
		if err1391 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1388", "", err1391)
		}
		_key1388 := v1390
		v1392, err1393 := iprot.ReadBinary()
		if err1393 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1389", "", err1393)
		}
		_val1389 := Text(v1392)
		p.Attributes[_key1388] = _val1389
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *DeleteAllRowTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteAllRowTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowTsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllRowTsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllRowTsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 3)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(3, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowTsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1394, Viter1395 := range p.Attributes {
			err = oprot.WriteString(Kiter1394)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1394", "", err)
			}
			err = oprot.WriteBinary(Viter1395)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1395", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllRowTsArgs) TStructName() string {
	return "DeleteAllRowTsArgs"
}

func (p *DeleteAllRowTsArgs) ThriftName() string {
	return "deleteAllRowTs_args"
}

func (p *DeleteAllRowTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Timestamp
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *DeleteAllRowTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("timestamp", thrift.I64, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Io
 */
type DeleteAllRowTsResult struct {
	Io *IOError `json:"io"` // 1
}

var tstructDeleteAllRowTsResult = thrift.NewTStruct("deleteAllRowTs_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*DeleteAllRowTsResult) GetTStruct() thrift.TStruct { return tstructDeleteAllRowTsResult }
func NewDeleteAllRowTsResult() *DeleteAllRowTsResult {
	output := &DeleteAllRowTsResult{}
	{
	}
	return output
}

func (p *DeleteAllRowTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructDeleteAllRowTsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructDeleteAllRowTsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowTsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1398 := p.Io.Read(iprot)
	if err1398 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1398)
	}
	return err
}

func (p *DeleteAllRowTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("deleteAllRowTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *DeleteAllRowTsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *DeleteAllRowTsResult) TStructName() string {
	return "DeleteAllRowTsResult"
}

func (p *DeleteAllRowTsResult) ThriftName() string {
	return "deleteAllRowTs_result"
}

func (p *DeleteAllRowTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	}
	return nil
}

func (p *DeleteAllRowTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Scan: Scan instance
 *  - Attributes: Scan attributes
 */
type ScannerOpenWithScanArgs struct {
	TableName  Text            `json:"tableName"`  // 1
	Scan       *TScan          `json:"scan"`       // 2
	Attributes map[string]Text `json:"attributes"` // 3
}

var tstructScannerOpenWithScanArgs = thrift.NewTStruct("scannerOpenWithScan_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("scan", thrift.STRUCT, 2),
	thrift.NewTField("attributes", thrift.MAP, 3),
})

func (*ScannerOpenWithScanArgs) GetTStruct() thrift.TStruct { return tstructScannerOpenWithScanArgs }
func NewScannerOpenWithScanArgs() *ScannerOpenWithScanArgs {
	output := &ScannerOpenWithScanArgs{}
	{
	}
	return output
}

func (p *ScannerOpenWithScanArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerOpenWithScanArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerOpenWithScanArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //TScan
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.MAP {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithScanArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1399, err1400 := iprot.ReadBinary()
	if err1400 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1400)
	}
	p.TableName = Text(v1399)
	return err
}

func (p *ScannerOpenWithScanArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Scan = NewTScan()
	err1403 := p.Scan.Read(iprot)
	if err1403 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.ScanTScan", err1403)
	}
	return err
}

func (p *ScannerOpenWithScanArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1407, _vtype1408, _size1406, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1407, _vtype1408
	p.Attributes = make(map[string]Text, _size1406)
	for i := 0; i < _size1406; i++ {
		v1413, err1414 := iprot.ReadString()
		if err1414 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1411", "", err1414)
		}
		_key1411 := v1413
		v1415, err1416 := iprot.ReadBinary()
		if err1416 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1412", "", err1416)
		}
		_val1412 := Text(v1415)
		p.Attributes[_key1411] = _val1412
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *ScannerOpenWithScanArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenWithScan_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithScanArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithScanArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Scan != nil {
		err = oprot.WriteFieldBegin("scan", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "scan", p.ThriftName(), err)
		}
		err = p.Scan.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TScan", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "scan", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithScanArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1417, Viter1418 := range p.Attributes {
			err = oprot.WriteString(Kiter1417)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1417", "", err)
			}
			err = oprot.WriteBinary(Viter1418)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1418", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithScanArgs) TStructName() string {
	return "ScannerOpenWithScanArgs"
}

func (p *ScannerOpenWithScanArgs) ThriftName() string {
	return "scannerOpenWithScan_args"
}

func (p *ScannerOpenWithScanArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Scan
	case 3:
		return p.Attributes
	}
	return nil
}

func (p *ScannerOpenWithScanArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("scan", thrift.STRUCT, 2),
		thrift.NewTField("attributes", thrift.MAP, 3),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type ScannerOpenWithScanResult struct {
	Success ScannerID `json:"success"` // 0
	Io      *IOError  `json:"io"`      // 1
}

var tstructScannerOpenWithScanResult = thrift.NewTStruct("scannerOpenWithScan_result", []thrift.TField{
	thrift.NewTField("success", thrift.I32, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*ScannerOpenWithScanResult) GetTStruct() thrift.TStruct { return tstructScannerOpenWithScanResult }
func NewScannerOpenWithScanResult() *ScannerOpenWithScanResult {
	output := &ScannerOpenWithScanResult{}
	{
	}
	return output
}

func (p *ScannerOpenWithScanResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerOpenWithScanResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerOpenWithScanResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //ScannerID
			if fieldTypeId == thrift.I32 {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithScanResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1419, err1420 := iprot.ReadI32()
	if err1420 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1420)
	}
	p.Success = ScannerID(v1419)
	return err
}

func (p *ScannerOpenWithScanResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1423 := p.Io.Read(iprot)
	if err1423 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1423)
	}
	return err
}

func (p *ScannerOpenWithScanResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenWithScan_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithScanResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.I32, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithScanResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithScanResult) TStructName() string {
	return "ScannerOpenWithScanResult"
}

func (p *ScannerOpenWithScanResult) ThriftName() string {
	return "scannerOpenWithScan_result"
}

func (p *ScannerOpenWithScanResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *ScannerOpenWithScanResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.I32, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Attributes: Scan attributes
 */
type ScannerOpenArgs struct {
	TableName  Text            `json:"tableName"`  // 1
	StartRow   Text            `json:"startRow"`   // 2
	Columns    []Text          `json:"columns"`    // 3
	Attributes map[string]Text `json:"attributes"` // 4
}

var tstructScannerOpenArgs = thrift.NewTStruct("scannerOpen_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("startRow", thrift.STRING, 2),
	thrift.NewTField("columns", thrift.LIST, 3),
	thrift.NewTField("attributes", thrift.MAP, 4),
})

func (*ScannerOpenArgs) GetTStruct() thrift.TStruct { return tstructScannerOpenArgs }
func NewScannerOpenArgs() *ScannerOpenArgs {
	output := &ScannerOpenArgs{}
	{
	}
	return output
}

func (p *ScannerOpenArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerOpenArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerOpenArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.LIST {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.MAP {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1424, err1425 := iprot.ReadBinary()
	if err1425 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1425)
	}
	p.TableName = Text(v1424)
	return err
}

func (p *ScannerOpenArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1426, err1427 := iprot.ReadBinary()
	if err1427 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "startRow", p.ThriftName(), err1427)
	}
	p.StartRow = Text(v1426)
	return err
}

func (p *ScannerOpenArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1433, _size1430, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_ = _etype1433
	p.Columns = make([]Text, _size1430, _size1430)
	for i := 0; i < _size1430; i++ {
		v1436, err1437 := iprot.ReadBinary()
		if err1437 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem1435", "", err1437)
		}
		_elem1435 := Text(v1436)
		p.Columns[i] = _elem1435
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *ScannerOpenArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1441, _vtype1442, _size1440, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1441, _vtype1442
	p.Attributes = make(map[string]Text, _size1440)
	for i := 0; i < _size1440; i++ {
		v1447, err1448 := iprot.ReadString()
		if err1448 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1445", "", err1448)
		}
		_key1445 := v1447
		v1449, err1450 := iprot.ReadBinary()
		if err1450 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1446", "", err1450)
		}
		_val1446 := Text(v1449)
		p.Attributes[_key1445] = _val1446
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *ScannerOpenArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpen_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StartRow != nil {
		err = oprot.WriteFieldBegin("startRow", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StartRow)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Columns))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1451 := range p.Columns {
			err = oprot.WriteBinary(Iter1451)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter1451", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1452, Viter1453 := range p.Attributes {
			err = oprot.WriteString(Kiter1452)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1452", "", err)
			}
			err = oprot.WriteBinary(Viter1453)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1453", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenArgs) TStructName() string {
	return "ScannerOpenArgs"
}

func (p *ScannerOpenArgs) ThriftName() string {
	return "scannerOpen_args"
}

func (p *ScannerOpenArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.StartRow
	case 3:
		return p.Columns
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *ScannerOpenArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("startRow", thrift.STRING, 2),
		thrift.NewTField("columns", thrift.LIST, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type ScannerOpenResult struct {
	Success ScannerID `json:"success"` // 0
	Io      *IOError  `json:"io"`      // 1
}

var tstructScannerOpenResult = thrift.NewTStruct("scannerOpen_result", []thrift.TField{
	thrift.NewTField("success", thrift.I32, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*ScannerOpenResult) GetTStruct() thrift.TStruct { return tstructScannerOpenResult }
func NewScannerOpenResult() *ScannerOpenResult {
	output := &ScannerOpenResult{}
	{
	}
	return output
}

func (p *ScannerOpenResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerOpenResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerOpenResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //ScannerID
			if fieldTypeId == thrift.I32 {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1454, err1455 := iprot.ReadI32()
	if err1455 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1455)
	}
	p.Success = ScannerID(v1454)
	return err
}

func (p *ScannerOpenResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1458 := p.Io.Read(iprot)
	if err1458 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1458)
	}
	return err
}

func (p *ScannerOpenResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpen_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.I32, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenResult) TStructName() string {
	return "ScannerOpenResult"
}

func (p *ScannerOpenResult) ThriftName() string {
	return "scannerOpen_result"
}

func (p *ScannerOpenResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *ScannerOpenResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.I32, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - StopRow: row to stop scanning on. This row is *not* included in the
 * scanner's results
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Attributes: Scan attributes
 */
type ScannerOpenWithStopArgs struct {
	TableName  Text            `json:"tableName"`  // 1
	StartRow   Text            `json:"startRow"`   // 2
	StopRow    Text            `json:"stopRow"`    // 3
	Columns    []Text          `json:"columns"`    // 4
	Attributes map[string]Text `json:"attributes"` // 5
}

var tstructScannerOpenWithStopArgs = thrift.NewTStruct("scannerOpenWithStop_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("startRow", thrift.STRING, 2),
	thrift.NewTField("stopRow", thrift.STRING, 3),
	thrift.NewTField("columns", thrift.LIST, 4),
	thrift.NewTField("attributes", thrift.MAP, 5),
})

func (*ScannerOpenWithStopArgs) GetTStruct() thrift.TStruct { return tstructScannerOpenWithStopArgs }
func NewScannerOpenWithStopArgs() *ScannerOpenWithStopArgs {
	output := &ScannerOpenWithStopArgs{}
	{
	}
	return output
}

func (p *ScannerOpenWithStopArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerOpenWithStopArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerOpenWithStopArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.LIST {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //
			if fieldTypeId == thrift.MAP {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1459, err1460 := iprot.ReadBinary()
	if err1460 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1460)
	}
	p.TableName = Text(v1459)
	return err
}

func (p *ScannerOpenWithStopArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1461, err1462 := iprot.ReadBinary()
	if err1462 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "startRow", p.ThriftName(), err1462)
	}
	p.StartRow = Text(v1461)
	return err
}

func (p *ScannerOpenWithStopArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1463, err1464 := iprot.ReadBinary()
	if err1464 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "stopRow", p.ThriftName(), err1464)
	}
	p.StopRow = Text(v1463)
	return err
}

func (p *ScannerOpenWithStopArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1470, _size1467, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_ = _etype1470
	p.Columns = make([]Text, _size1467, _size1467)
	for i := 0; i < _size1467; i++ {
		v1473, err1474 := iprot.ReadBinary()
		if err1474 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem1472", "", err1474)
		}
		_elem1472 := Text(v1473)
		p.Columns[i] = _elem1472
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *ScannerOpenWithStopArgs) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1478, _vtype1479, _size1477, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1478, _vtype1479
	p.Attributes = make(map[string]Text, _size1477)
	for i := 0; i < _size1477; i++ {
		v1484, err1485 := iprot.ReadString()
		if err1485 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1482", "", err1485)
		}
		_key1482 := v1484
		v1486, err1487 := iprot.ReadBinary()
		if err1487 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1483", "", err1487)
		}
		_val1483 := Text(v1486)
		p.Attributes[_key1482] = _val1483
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *ScannerOpenWithStopArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenWithStop_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StartRow != nil {
		err = oprot.WriteFieldBegin("startRow", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StartRow)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StopRow != nil {
		err = oprot.WriteFieldBegin("stopRow", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "stopRow", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StopRow)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "stopRow", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "stopRow", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Columns))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1488 := range p.Columns {
			err = oprot.WriteBinary(Iter1488)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter1488", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopArgs) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1489, Viter1490 := range p.Attributes {
			err = oprot.WriteString(Kiter1489)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1489", "", err)
			}
			err = oprot.WriteBinary(Viter1490)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1490", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopArgs) TStructName() string {
	return "ScannerOpenWithStopArgs"
}

func (p *ScannerOpenWithStopArgs) ThriftName() string {
	return "scannerOpenWithStop_args"
}

func (p *ScannerOpenWithStopArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.StartRow
	case 3:
		return p.StopRow
	case 4:
		return p.Columns
	case 5:
		return p.Attributes
	}
	return nil
}

func (p *ScannerOpenWithStopArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("startRow", thrift.STRING, 2),
		thrift.NewTField("stopRow", thrift.STRING, 3),
		thrift.NewTField("columns", thrift.LIST, 4),
		thrift.NewTField("attributes", thrift.MAP, 5),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type ScannerOpenWithStopResult struct {
	Success ScannerID `json:"success"` // 0
	Io      *IOError  `json:"io"`      // 1
}

var tstructScannerOpenWithStopResult = thrift.NewTStruct("scannerOpenWithStop_result", []thrift.TField{
	thrift.NewTField("success", thrift.I32, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*ScannerOpenWithStopResult) GetTStruct() thrift.TStruct { return tstructScannerOpenWithStopResult }
func NewScannerOpenWithStopResult() *ScannerOpenWithStopResult {
	output := &ScannerOpenWithStopResult{}
	{
	}
	return output
}

func (p *ScannerOpenWithStopResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerOpenWithStopResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerOpenWithStopResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //ScannerID
			if fieldTypeId == thrift.I32 {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1491, err1492 := iprot.ReadI32()
	if err1492 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1492)
	}
	p.Success = ScannerID(v1491)
	return err
}

func (p *ScannerOpenWithStopResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1495 := p.Io.Read(iprot)
	if err1495 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1495)
	}
	return err
}

func (p *ScannerOpenWithStopResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenWithStop_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.I32, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopResult) TStructName() string {
	return "ScannerOpenWithStopResult"
}

func (p *ScannerOpenWithStopResult) ThriftName() string {
	return "scannerOpenWithStop_result"
}

func (p *ScannerOpenWithStopResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *ScannerOpenWithStopResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.I32, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - StartAndPrefix: the prefix (and thus start row) of the keys you want
 *  - Columns: the columns you want returned
 *  - Attributes: Scan attributes
 */
type ScannerOpenWithPrefixArgs struct {
	TableName      Text            `json:"tableName"`      // 1
	StartAndPrefix Text            `json:"startAndPrefix"` // 2
	Columns        []Text          `json:"columns"`        // 3
	Attributes     map[string]Text `json:"attributes"`     // 4
}

var tstructScannerOpenWithPrefixArgs = thrift.NewTStruct("scannerOpenWithPrefix_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("startAndPrefix", thrift.STRING, 2),
	thrift.NewTField("columns", thrift.LIST, 3),
	thrift.NewTField("attributes", thrift.MAP, 4),
})

func (*ScannerOpenWithPrefixArgs) GetTStruct() thrift.TStruct { return tstructScannerOpenWithPrefixArgs }
func NewScannerOpenWithPrefixArgs() *ScannerOpenWithPrefixArgs {
	output := &ScannerOpenWithPrefixArgs{}
	{
	}
	return output
}

func (p *ScannerOpenWithPrefixArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerOpenWithPrefixArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerOpenWithPrefixArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.LIST {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.MAP {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithPrefixArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1496, err1497 := iprot.ReadBinary()
	if err1497 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1497)
	}
	p.TableName = Text(v1496)
	return err
}

func (p *ScannerOpenWithPrefixArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1498, err1499 := iprot.ReadBinary()
	if err1499 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "startAndPrefix", p.ThriftName(), err1499)
	}
	p.StartAndPrefix = Text(v1498)
	return err
}

func (p *ScannerOpenWithPrefixArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1505, _size1502, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_ = _etype1505
	p.Columns = make([]Text, _size1502, _size1502)
	for i := 0; i < _size1502; i++ {
		v1508, err1509 := iprot.ReadBinary()
		if err1509 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem1507", "", err1509)
		}
		_elem1507 := Text(v1508)
		p.Columns[i] = _elem1507
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *ScannerOpenWithPrefixArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1513, _vtype1514, _size1512, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1513, _vtype1514
	p.Attributes = make(map[string]Text, _size1512)
	for i := 0; i < _size1512; i++ {
		v1519, err1520 := iprot.ReadString()
		if err1520 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1517", "", err1520)
		}
		_key1517 := v1519
		v1521, err1522 := iprot.ReadBinary()
		if err1522 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1518", "", err1522)
		}
		_val1518 := Text(v1521)
		p.Attributes[_key1517] = _val1518
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *ScannerOpenWithPrefixArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenWithPrefix_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithPrefixArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithPrefixArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StartAndPrefix != nil {
		err = oprot.WriteFieldBegin("startAndPrefix", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startAndPrefix", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StartAndPrefix)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startAndPrefix", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startAndPrefix", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithPrefixArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Columns))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1523 := range p.Columns {
			err = oprot.WriteBinary(Iter1523)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter1523", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithPrefixArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1524, Viter1525 := range p.Attributes {
			err = oprot.WriteString(Kiter1524)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1524", "", err)
			}
			err = oprot.WriteBinary(Viter1525)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1525", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithPrefixArgs) TStructName() string {
	return "ScannerOpenWithPrefixArgs"
}

func (p *ScannerOpenWithPrefixArgs) ThriftName() string {
	return "scannerOpenWithPrefix_args"
}

func (p *ScannerOpenWithPrefixArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.StartAndPrefix
	case 3:
		return p.Columns
	case 4:
		return p.Attributes
	}
	return nil
}

func (p *ScannerOpenWithPrefixArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("startAndPrefix", thrift.STRING, 2),
		thrift.NewTField("columns", thrift.LIST, 3),
		thrift.NewTField("attributes", thrift.MAP, 4),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type ScannerOpenWithPrefixResult struct {
	Success ScannerID `json:"success"` // 0
	Io      *IOError  `json:"io"`      // 1
}

var tstructScannerOpenWithPrefixResult = thrift.NewTStruct("scannerOpenWithPrefix_result", []thrift.TField{
	thrift.NewTField("success", thrift.I32, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*ScannerOpenWithPrefixResult) GetTStruct() thrift.TStruct {
	return tstructScannerOpenWithPrefixResult
}
func NewScannerOpenWithPrefixResult() *ScannerOpenWithPrefixResult {
	output := &ScannerOpenWithPrefixResult{}
	{
	}
	return output
}

func (p *ScannerOpenWithPrefixResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerOpenWithPrefixResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerOpenWithPrefixResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //ScannerID
			if fieldTypeId == thrift.I32 {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithPrefixResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1526, err1527 := iprot.ReadI32()
	if err1527 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1527)
	}
	p.Success = ScannerID(v1526)
	return err
}

func (p *ScannerOpenWithPrefixResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1530 := p.Io.Read(iprot)
	if err1530 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1530)
	}
	return err
}

func (p *ScannerOpenWithPrefixResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenWithPrefix_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithPrefixResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.I32, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithPrefixResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithPrefixResult) TStructName() string {
	return "ScannerOpenWithPrefixResult"
}

func (p *ScannerOpenWithPrefixResult) ThriftName() string {
	return "scannerOpenWithPrefix_result"
}

func (p *ScannerOpenWithPrefixResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *ScannerOpenWithPrefixResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.I32, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Timestamp: timestamp
 *  - Attributes: Scan attributes
 */
type ScannerOpenTsArgs struct {
	TableName  Text            `json:"tableName"`  // 1
	StartRow   Text            `json:"startRow"`   // 2
	Columns    []Text          `json:"columns"`    // 3
	Timestamp  int64           `json:"timestamp"`  // 4
	Attributes map[string]Text `json:"attributes"` // 5
}

var tstructScannerOpenTsArgs = thrift.NewTStruct("scannerOpenTs_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("startRow", thrift.STRING, 2),
	thrift.NewTField("columns", thrift.LIST, 3),
	thrift.NewTField("timestamp", thrift.I64, 4),
	thrift.NewTField("attributes", thrift.MAP, 5),
})

func (*ScannerOpenTsArgs) GetTStruct() thrift.TStruct { return tstructScannerOpenTsArgs }
func NewScannerOpenTsArgs() *ScannerOpenTsArgs {
	output := &ScannerOpenTsArgs{}
	{
	}
	return output
}

func (p *ScannerOpenTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerOpenTsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerOpenTsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //
			if fieldTypeId == thrift.LIST {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //
			if fieldTypeId == thrift.MAP {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenTsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1531, err1532 := iprot.ReadBinary()
	if err1532 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1532)
	}
	p.TableName = Text(v1531)
	return err
}

func (p *ScannerOpenTsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1533, err1534 := iprot.ReadBinary()
	if err1534 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "startRow", p.ThriftName(), err1534)
	}
	p.StartRow = Text(v1533)
	return err
}

func (p *ScannerOpenTsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1540, _size1537, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_ = _etype1540
	p.Columns = make([]Text, _size1537, _size1537)
	for i := 0; i < _size1537; i++ {
		v1543, err1544 := iprot.ReadBinary()
		if err1544 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem1542", "", err1544)
		}
		_elem1542 := Text(v1543)
		p.Columns[i] = _elem1542
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *ScannerOpenTsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1545, err1546 := iprot.ReadI64()
	if err1546 != nil {
		return thrift.NewTProtocolExceptionReadField(4, "timestamp", p.ThriftName(), err1546)
	}
	p.Timestamp = v1545
	return err
}

func (p *ScannerOpenTsArgs) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1550, _vtype1551, _size1549, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1550, _vtype1551
	p.Attributes = make(map[string]Text, _size1549)
	for i := 0; i < _size1549; i++ {
		v1556, err1557 := iprot.ReadString()
		if err1557 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1554", "", err1557)
		}
		_key1554 := v1556
		v1558, err1559 := iprot.ReadBinary()
		if err1559 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1555", "", err1559)
		}
		_val1555 := Text(v1558)
		p.Attributes[_key1554] = _val1555
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *ScannerOpenTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenTsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenTsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StartRow != nil {
		err = oprot.WriteFieldBegin("startRow", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StartRow)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenTsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Columns))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1560 := range p.Columns {
			err = oprot.WriteBinary(Iter1560)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter1560", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenTsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 4)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(4, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenTsArgs) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 5)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1561, Viter1562 := range p.Attributes {
			err = oprot.WriteString(Kiter1561)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1561", "", err)
			}
			err = oprot.WriteBinary(Viter1562)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1562", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(5, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenTsArgs) TStructName() string {
	return "ScannerOpenTsArgs"
}

func (p *ScannerOpenTsArgs) ThriftName() string {
	return "scannerOpenTs_args"
}

func (p *ScannerOpenTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.StartRow
	case 3:
		return p.Columns
	case 4:
		return p.Timestamp
	case 5:
		return p.Attributes
	}
	return nil
}

func (p *ScannerOpenTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("startRow", thrift.STRING, 2),
		thrift.NewTField("columns", thrift.LIST, 3),
		thrift.NewTField("timestamp", thrift.I64, 4),
		thrift.NewTField("attributes", thrift.MAP, 5),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type ScannerOpenTsResult struct {
	Success ScannerID `json:"success"` // 0
	Io      *IOError  `json:"io"`      // 1
}

var tstructScannerOpenTsResult = thrift.NewTStruct("scannerOpenTs_result", []thrift.TField{
	thrift.NewTField("success", thrift.I32, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*ScannerOpenTsResult) GetTStruct() thrift.TStruct { return tstructScannerOpenTsResult }
func NewScannerOpenTsResult() *ScannerOpenTsResult {
	output := &ScannerOpenTsResult{}
	{
	}
	return output
}

func (p *ScannerOpenTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerOpenTsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerOpenTsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //ScannerID
			if fieldTypeId == thrift.I32 {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenTsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1563, err1564 := iprot.ReadI32()
	if err1564 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1564)
	}
	p.Success = ScannerID(v1563)
	return err
}

func (p *ScannerOpenTsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1567 := p.Io.Read(iprot)
	if err1567 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1567)
	}
	return err
}

func (p *ScannerOpenTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenTsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.I32, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenTsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenTsResult) TStructName() string {
	return "ScannerOpenTsResult"
}

func (p *ScannerOpenTsResult) ThriftName() string {
	return "scannerOpenTs_result"
}

func (p *ScannerOpenTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *ScannerOpenTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.I32, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - StartRow: Starting row in table to scan.
 * Send "" (empty string) to start at the first row.
 *  - StopRow: row to stop scanning on. This row is *not* included in the
 * scanner's results
 *  - Columns: columns to scan. If column name is a column family, all
 * columns of the specified column family are returned. It's also possible
 * to pass a regex in the column qualifier.
 *  - Timestamp: timestamp
 *  - Attributes: Scan attributes
 */
type ScannerOpenWithStopTsArgs struct {
	TableName  Text            `json:"tableName"`  // 1
	StartRow   Text            `json:"startRow"`   // 2
	StopRow    Text            `json:"stopRow"`    // 3
	Columns    []Text          `json:"columns"`    // 4
	Timestamp  int64           `json:"timestamp"`  // 5
	Attributes map[string]Text `json:"attributes"` // 6
}

var tstructScannerOpenWithStopTsArgs = thrift.NewTStruct("scannerOpenWithStopTs_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("startRow", thrift.STRING, 2),
	thrift.NewTField("stopRow", thrift.STRING, 3),
	thrift.NewTField("columns", thrift.LIST, 4),
	thrift.NewTField("timestamp", thrift.I64, 5),
	thrift.NewTField("attributes", thrift.MAP, 6),
})

func (*ScannerOpenWithStopTsArgs) GetTStruct() thrift.TStruct { return tstructScannerOpenWithStopTsArgs }
func NewScannerOpenWithStopTsArgs() *ScannerOpenWithStopTsArgs {
	output := &ScannerOpenWithStopTsArgs{}
	{
	}
	return output
}

func (p *ScannerOpenWithStopTsArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerOpenWithStopTsArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerOpenWithStopTsArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 4: //
			if fieldTypeId == thrift.LIST {
				err = p.readField4(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 5: //i64
			if fieldTypeId == thrift.I64 {
				err = p.readField5(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 6: //
			if fieldTypeId == thrift.MAP {
				err = p.readField6(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1568, err1569 := iprot.ReadBinary()
	if err1569 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1569)
	}
	p.TableName = Text(v1568)
	return err
}

func (p *ScannerOpenWithStopTsArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1570, err1571 := iprot.ReadBinary()
	if err1571 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "startRow", p.ThriftName(), err1571)
	}
	p.StartRow = Text(v1570)
	return err
}

func (p *ScannerOpenWithStopTsArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1572, err1573 := iprot.ReadBinary()
	if err1573 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "stopRow", p.ThriftName(), err1573)
	}
	p.StopRow = Text(v1572)
	return err
}

func (p *ScannerOpenWithStopTsArgs) readField4(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1579, _size1576, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Columns", "", err)
	}
	_ = _etype1579
	p.Columns = make([]Text, _size1576, _size1576)
	for i := 0; i < _size1576; i++ {
		v1582, err1583 := iprot.ReadBinary()
		if err1583 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_elem1581", "", err1583)
		}
		_elem1581 := Text(v1582)
		p.Columns[i] = _elem1581
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) readField5(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1584, err1585 := iprot.ReadI64()
	if err1585 != nil {
		return thrift.NewTProtocolExceptionReadField(5, "timestamp", p.ThriftName(), err1585)
	}
	p.Timestamp = v1584
	return err
}

func (p *ScannerOpenWithStopTsArgs) readField6(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_ktype1589, _vtype1590, _size1588, err := iprot.ReadMapBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Attributes", "", err)
	}
	_, _ = _ktype1589, _vtype1590
	p.Attributes = make(map[string]Text, _size1588)
	for i := 0; i < _size1588; i++ {
		v1595, err1596 := iprot.ReadString()
		if err1596 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_key1593", "", err1596)
		}
		_key1593 := v1595
		v1597, err1598 := iprot.ReadBinary()
		if err1598 != nil {
			return thrift.NewTProtocolExceptionReadField(0, "_val1594", "", err1598)
		}
		_val1594 := Text(v1597)
		p.Attributes[_key1593] = _val1594
	}
	err = iprot.ReadMapEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "map", err)
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenWithStopTs_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = p.writeField4(oprot)
	if err != nil {
		return err
	}
	err = p.writeField5(oprot)
	if err != nil {
		return err
	}
	err = p.writeField6(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StartRow != nil {
		err = oprot.WriteFieldBegin("startRow", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StartRow)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "startRow", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.StopRow != nil {
		err = oprot.WriteFieldBegin("stopRow", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "stopRow", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.StopRow)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "stopRow", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "stopRow", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) writeField4(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Columns != nil {
		err = oprot.WriteFieldBegin("columns", thrift.LIST, 4)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "columns", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRING, len(p.Columns))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1599 := range p.Columns {
			err = oprot.WriteBinary(Iter1599)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Iter1599", "", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(4, "columns", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) writeField5(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("timestamp", thrift.I64, 5)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteI64(int64(p.Timestamp))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "timestamp", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(5, "timestamp", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) writeField6(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Attributes != nil {
		err = oprot.WriteFieldBegin("attributes", thrift.MAP, 6)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "attributes", p.ThriftName(), err)
		}
		err = oprot.WriteMapBegin(thrift.STRING, thrift.STRING, len(p.Attributes))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		for Kiter1600, Viter1601 := range p.Attributes {
			err = oprot.WriteString(Kiter1600)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Kiter1600", "", err)
			}
			err = oprot.WriteBinary(Viter1601)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteField(0, "Viter1601", "", err)
			}
		}
		err = oprot.WriteMapEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "map", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(6, "attributes", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopTsArgs) TStructName() string {
	return "ScannerOpenWithStopTsArgs"
}

func (p *ScannerOpenWithStopTsArgs) ThriftName() string {
	return "scannerOpenWithStopTs_args"
}

func (p *ScannerOpenWithStopTsArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.StartRow
	case 3:
		return p.StopRow
	case 4:
		return p.Columns
	case 5:
		return p.Timestamp
	case 6:
		return p.Attributes
	}
	return nil
}

func (p *ScannerOpenWithStopTsArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("startRow", thrift.STRING, 2),
		thrift.NewTField("stopRow", thrift.STRING, 3),
		thrift.NewTField("columns", thrift.LIST, 4),
		thrift.NewTField("timestamp", thrift.I64, 5),
		thrift.NewTField("attributes", thrift.MAP, 6),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type ScannerOpenWithStopTsResult struct {
	Success ScannerID `json:"success"` // 0
	Io      *IOError  `json:"io"`      // 1
}

var tstructScannerOpenWithStopTsResult = thrift.NewTStruct("scannerOpenWithStopTs_result", []thrift.TField{
	thrift.NewTField("success", thrift.I32, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*ScannerOpenWithStopTsResult) GetTStruct() thrift.TStruct {
	return tstructScannerOpenWithStopTsResult
}
func NewScannerOpenWithStopTsResult() *ScannerOpenWithStopTsResult {
	output := &ScannerOpenWithStopTsResult{}
	{
	}
	return output
}

func (p *ScannerOpenWithStopTsResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerOpenWithStopTsResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerOpenWithStopTsResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //ScannerID
			if fieldTypeId == thrift.I32 {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopTsResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1602, err1603 := iprot.ReadI32()
	if err1603 != nil {
		return thrift.NewTProtocolExceptionReadField(0, "success", p.ThriftName(), err1603)
	}
	p.Success = ScannerID(v1602)
	return err
}

func (p *ScannerOpenWithStopTsResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1606 := p.Io.Read(iprot)
	if err1606 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1606)
	}
	return err
}

func (p *ScannerOpenWithStopTsResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerOpenWithStopTs_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopTsResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("success", thrift.I32, 0)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Success))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerOpenWithStopTsResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerOpenWithStopTsResult) TStructName() string {
	return "ScannerOpenWithStopTsResult"
}

func (p *ScannerOpenWithStopTsResult) ThriftName() string {
	return "scannerOpenWithStopTs_result"
}

func (p *ScannerOpenWithStopTsResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *ScannerOpenWithStopTsResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.I32, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Id: id of a scanner returned by scannerOpen
 */
type ScannerGetArgs struct {
	Id ScannerID `json:"id"` // 1
}

var tstructScannerGetArgs = thrift.NewTStruct("scannerGet_args", []thrift.TField{
	thrift.NewTField("id", thrift.I32, 1),
})

func (*ScannerGetArgs) GetTStruct() thrift.TStruct { return tstructScannerGetArgs }
func NewScannerGetArgs() *ScannerGetArgs {
	output := &ScannerGetArgs{}
	{
	}
	return output
}

func (p *ScannerGetArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerGetArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerGetArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //ScannerID
			if fieldTypeId == thrift.I32 {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1607, err1608 := iprot.ReadI32()
	if err1608 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "id", p.ThriftName(), err1608)
	}
	p.Id = ScannerID(v1607)
	return err
}

func (p *ScannerGetArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerGet_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("id", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Id))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetArgs) TStructName() string {
	return "ScannerGetArgs"
}

func (p *ScannerGetArgs) ThriftName() string {
	return "scannerGet_args"
}

func (p *ScannerGetArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Id
	}
	return nil
}

func (p *ScannerGetArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("id", thrift.I32, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 *  - Ia
 */
type ScannerGetResult struct {
	Success []*TRowResult    `json:"success"` // 0
	Io      *IOError         `json:"io"`      // 1
	Ia      *IllegalArgument `json:"ia"`      // 2
}

var tstructScannerGetResult = thrift.NewTStruct("scannerGet_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
	thrift.NewTField("ia", thrift.STRUCT, 2),
})

func (*ScannerGetResult) GetTStruct() thrift.TStruct { return tstructScannerGetResult }
func NewScannerGetResult() *ScannerGetResult {
	output := &ScannerGetResult{}
	{
	}
	return output
}

func (p *ScannerGetResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerGetResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerGetResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //IllegalArgument
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1614, _size1611, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype1614
	p.Success = make([]*TRowResult, _size1611, _size1611)
	for i := 0; i < _size1611; i++ {
		_elem1616 := NewTRowResult()
		err1619 := _elem1616.Read(iprot)
		if err1619 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1616TRowResult", err1619)
		}
		p.Success[i] = _elem1616
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *ScannerGetResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1622 := p.Io.Read(iprot)
	if err1622 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1622)
	}
	return err
}

func (p *ScannerGetResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err1625 := p.Ia.Read(iprot)
	if err1625 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1625)
	}
	return err
}

func (p *ScannerGetResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerGet_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ia != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1626 := range p.Success {
			err = Iter1626.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerGetResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerGetResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerGetResult) TStructName() string {
	return "ScannerGetResult"
}

func (p *ScannerGetResult) ThriftName() string {
	return "scannerGet_result"
}

func (p *ScannerGetResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	case 2:
		return p.Ia
	}
	return nil
}

func (p *ScannerGetResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - Id: id of a scanner returned by scannerOpen
 *  - NbRows: number of results to return
 */
type ScannerGetListArgs struct {
	Id     ScannerID `json:"id"`     // 1
	NbRows int32     `json:"nbRows"` // 2
}

var tstructScannerGetListArgs = thrift.NewTStruct("scannerGetList_args", []thrift.TField{
	thrift.NewTField("id", thrift.I32, 1),
	thrift.NewTField("nbRows", thrift.I32, 2),
})

func (*ScannerGetListArgs) GetTStruct() thrift.TStruct { return tstructScannerGetListArgs }
func NewScannerGetListArgs() *ScannerGetListArgs {
	output := &ScannerGetListArgs{}
	{
	}
	return output
}

func (p *ScannerGetListArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerGetListArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerGetListArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //ScannerID
			if fieldTypeId == thrift.I32 {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //i32
			if fieldTypeId == thrift.I32 {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetListArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1627, err1628 := iprot.ReadI32()
	if err1628 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "id", p.ThriftName(), err1628)
	}
	p.Id = ScannerID(v1627)
	return err
}

func (p *ScannerGetListArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1629, err1630 := iprot.ReadI32()
	if err1630 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "nbRows", p.ThriftName(), err1630)
	}
	p.NbRows = v1629
	return err
}

func (p *ScannerGetListArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerGetList_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetListArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("id", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Id))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetListArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("nbRows", thrift.I32, 2)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "nbRows", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.NbRows))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "nbRows", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(2, "nbRows", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetListArgs) TStructName() string {
	return "ScannerGetListArgs"
}

func (p *ScannerGetListArgs) ThriftName() string {
	return "scannerGetList_args"
}

func (p *ScannerGetListArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Id
	case 2:
		return p.NbRows
	}
	return nil
}

func (p *ScannerGetListArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("id", thrift.I32, 1),
		thrift.NewTField("nbRows", thrift.I32, 2),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 *  - Ia
 */
type ScannerGetListResult struct {
	Success []*TRowResult    `json:"success"` // 0
	Io      *IOError         `json:"io"`      // 1
	Ia      *IllegalArgument `json:"ia"`      // 2
}

var tstructScannerGetListResult = thrift.NewTStruct("scannerGetList_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
	thrift.NewTField("ia", thrift.STRUCT, 2),
})

func (*ScannerGetListResult) GetTStruct() thrift.TStruct { return tstructScannerGetListResult }
func NewScannerGetListResult() *ScannerGetListResult {
	output := &ScannerGetListResult{}
	{
	}
	return output
}

func (p *ScannerGetListResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerGetListResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerGetListResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //IllegalArgument
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetListResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1636, _size1633, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype1636
	p.Success = make([]*TRowResult, _size1633, _size1633)
	for i := 0; i < _size1633; i++ {
		_elem1638 := NewTRowResult()
		err1641 := _elem1638.Read(iprot)
		if err1641 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1638TRowResult", err1641)
		}
		p.Success[i] = _elem1638
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *ScannerGetListResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1644 := p.Io.Read(iprot)
	if err1644 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1644)
	}
	return err
}

func (p *ScannerGetListResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err1647 := p.Ia.Read(iprot)
	if err1647 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1647)
	}
	return err
}

func (p *ScannerGetListResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerGetList_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ia != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerGetListResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1648 := range p.Success {
			err = Iter1648.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TRowResult", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerGetListResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerGetListResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerGetListResult) TStructName() string {
	return "ScannerGetListResult"
}

func (p *ScannerGetListResult) ThriftName() string {
	return "scannerGetList_result"
}

func (p *ScannerGetListResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	case 2:
		return p.Ia
	}
	return nil
}

func (p *ScannerGetListResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - Id: id of a scanner returned by scannerOpen
 */
type ScannerCloseArgs struct {
	Id ScannerID `json:"id"` // 1
}

var tstructScannerCloseArgs = thrift.NewTStruct("scannerClose_args", []thrift.TField{
	thrift.NewTField("id", thrift.I32, 1),
})

func (*ScannerCloseArgs) GetTStruct() thrift.TStruct { return tstructScannerCloseArgs }
func NewScannerCloseArgs() *ScannerCloseArgs {
	output := &ScannerCloseArgs{}
	{
	}
	return output
}

func (p *ScannerCloseArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerCloseArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerCloseArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //ScannerID
			if fieldTypeId == thrift.I32 {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerCloseArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1649, err1650 := iprot.ReadI32()
	if err1650 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "id", p.ThriftName(), err1650)
	}
	p.Id = ScannerID(v1649)
	return err
}

func (p *ScannerCloseArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerClose_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerCloseArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteFieldBegin("id", thrift.I32, 1)
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	err = oprot.WriteI32(int32(p.Id))
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	err = oprot.WriteFieldEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(1, "id", p.ThriftName(), err)
	}
	return err
}

func (p *ScannerCloseArgs) TStructName() string {
	return "ScannerCloseArgs"
}

func (p *ScannerCloseArgs) ThriftName() string {
	return "scannerClose_args"
}

func (p *ScannerCloseArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Id
	}
	return nil
}

func (p *ScannerCloseArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("id", thrift.I32, 1),
	})
}

/**
 * Attributes:
 *  - Io
 *  - Ia
 */
type ScannerCloseResult struct {
	Io *IOError         `json:"io"` // 1
	Ia *IllegalArgument `json:"ia"` // 2
}

var tstructScannerCloseResult = thrift.NewTStruct("scannerClose_result", []thrift.TField{
	thrift.NewTField("io", thrift.STRUCT, 1),
	thrift.NewTField("ia", thrift.STRUCT, 2),
})

func (*ScannerCloseResult) GetTStruct() thrift.TStruct { return tstructScannerCloseResult }
func NewScannerCloseResult() *ScannerCloseResult {
	output := &ScannerCloseResult{}
	{
	}
	return output
}

func (p *ScannerCloseResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructScannerCloseResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructScannerCloseResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //IllegalArgument
			if fieldTypeId == thrift.STRUCT {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerCloseResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1653 := p.Io.Read(iprot)
	if err1653 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1653)
	}
	return err
}

func (p *ScannerCloseResult) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Ia = NewIllegalArgument()
	err1656 := p.Ia.Read(iprot)
	if err1656 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IaIllegalArgument", err1656)
	}
	return err
}

func (p *ScannerCloseResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("scannerClose_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Ia != nil:
		if err = p.writeField2(oprot); err != nil {
			return err
		}
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *ScannerCloseResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerCloseResult) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Ia != nil {
		err = oprot.WriteFieldBegin("ia", thrift.STRUCT, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
		err = p.Ia.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IllegalArgument", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "ia", p.ThriftName(), err)
		}
	}
	return err
}

func (p *ScannerCloseResult) TStructName() string {
	return "ScannerCloseResult"
}

func (p *ScannerCloseResult) ThriftName() string {
	return "scannerClose_result"
}

func (p *ScannerCloseResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Io
	case 2:
		return p.Ia
	}
	return nil
}

func (p *ScannerCloseResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("io", thrift.STRUCT, 1),
		thrift.NewTField("ia", thrift.STRUCT, 2),
	})
}

/**
 * Attributes:
 *  - TableName: name of table
 *  - Row: row key
 *  - Family: column name
 */
type GetRowOrBeforeArgs struct {
	TableName Text `json:"tableName"` // 1
	Row       Text `json:"row"`       // 2
	Family    Text `json:"family"`    // 3
}

var tstructGetRowOrBeforeArgs = thrift.NewTStruct("getRowOrBefore_args", []thrift.TField{
	thrift.NewTField("tableName", thrift.STRING, 1),
	thrift.NewTField("row", thrift.STRING, 2),
	thrift.NewTField("family", thrift.STRING, 3),
})

func (*GetRowOrBeforeArgs) GetTStruct() thrift.TStruct { return tstructGetRowOrBeforeArgs }
func NewGetRowOrBeforeArgs() *GetRowOrBeforeArgs {
	output := &GetRowOrBeforeArgs{}
	{
	}
	return output
}

func (p *GetRowOrBeforeArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowOrBeforeArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowOrBeforeArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 2: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField2(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 3: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField3(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowOrBeforeArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1657, err1658 := iprot.ReadBinary()
	if err1658 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "tableName", p.ThriftName(), err1658)
	}
	p.TableName = Text(v1657)
	return err
}

func (p *GetRowOrBeforeArgs) readField2(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1659, err1660 := iprot.ReadBinary()
	if err1660 != nil {
		return thrift.NewTProtocolExceptionReadField(2, "row", p.ThriftName(), err1660)
	}
	p.Row = Text(v1659)
	return err
}

func (p *GetRowOrBeforeArgs) readField3(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1661, err1662 := iprot.ReadBinary()
	if err1662 != nil {
		return thrift.NewTProtocolExceptionReadField(3, "family", p.ThriftName(), err1662)
	}
	p.Family = Text(v1661)
	return err
}

func (p *GetRowOrBeforeArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowOrBefore_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = p.writeField2(oprot)
	if err != nil {
		return err
	}
	err = p.writeField3(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowOrBeforeArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.TableName != nil {
		err = oprot.WriteFieldBegin("tableName", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.TableName)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "tableName", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowOrBeforeArgs) writeField2(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 2)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(2, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowOrBeforeArgs) writeField3(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Family != nil {
		err = oprot.WriteFieldBegin("family", thrift.STRING, 3)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "family", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Family)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "family", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(3, "family", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowOrBeforeArgs) TStructName() string {
	return "GetRowOrBeforeArgs"
}

func (p *GetRowOrBeforeArgs) ThriftName() string {
	return "getRowOrBefore_args"
}

func (p *GetRowOrBeforeArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.TableName
	case 2:
		return p.Row
	case 3:
		return p.Family
	}
	return nil
}

func (p *GetRowOrBeforeArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("tableName", thrift.STRING, 1),
		thrift.NewTField("row", thrift.STRING, 2),
		thrift.NewTField("family", thrift.STRING, 3),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRowOrBeforeResult struct {
	Success []*TCell `json:"success"` // 0
	Io      *IOError `json:"io"`      // 1
}

var tstructGetRowOrBeforeResult = thrift.NewTStruct("getRowOrBefore_result", []thrift.TField{
	thrift.NewTField("success", thrift.LIST, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetRowOrBeforeResult) GetTStruct() thrift.TStruct { return tstructGetRowOrBeforeResult }
func NewGetRowOrBeforeResult() *GetRowOrBeforeResult {
	output := &GetRowOrBeforeResult{}
	{
	}
	return output
}

func (p *GetRowOrBeforeResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRowOrBeforeResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRowOrBeforeResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //
			if fieldTypeId == thrift.LIST {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowOrBeforeResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_etype1668, _size1665, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "p.Success", "", err)
	}
	_ = _etype1668
	p.Success = make([]*TCell, _size1665, _size1665)
	for i := 0; i < _size1665; i++ {
		_elem1670 := NewTCell()
		err1673 := _elem1670.Read(iprot)
		if err1673 != nil {
			return thrift.NewTProtocolExceptionReadStruct("_elem1670TCell", err1673)
		}
		p.Success[i] = _elem1670
	}
	err = iprot.ReadListEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadField(-1, "", "list", err)
	}
	return err
}

func (p *GetRowOrBeforeResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1676 := p.Io.Read(iprot)
	if err1676 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1676)
	}
	return err
}

func (p *GetRowOrBeforeResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRowOrBefore_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRowOrBeforeResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.LIST, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = oprot.WriteListBegin(thrift.STRUCT, len(p.Success))
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		for _, Iter1677 := range p.Success {
			err = Iter1677.Write(oprot)
			if err != nil {
				return thrift.NewTProtocolExceptionWriteStruct("TCell", err)
			}
		}
		err = oprot.WriteListEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(-1, "", "list", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowOrBeforeResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRowOrBeforeResult) TStructName() string {
	return "GetRowOrBeforeResult"
}

func (p *GetRowOrBeforeResult) ThriftName() string {
	return "getRowOrBefore_result"
}

func (p *GetRowOrBeforeResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRowOrBeforeResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.LIST, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}

/**
 * Attributes:
 *  - Row: row key
 */
type GetRegionInfoArgs struct {
	Row Text `json:"row"` // 1
}

var tstructGetRegionInfoArgs = thrift.NewTStruct("getRegionInfo_args", []thrift.TField{
	thrift.NewTField("row", thrift.STRING, 1),
})

func (*GetRegionInfoArgs) GetTStruct() thrift.TStruct { return tstructGetRegionInfoArgs }
func NewGetRegionInfoArgs() *GetRegionInfoArgs {
	output := &GetRegionInfoArgs{}
	{
	}
	return output
}

func (p *GetRegionInfoArgs) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRegionInfoArgs.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRegionInfoArgs.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1: //Text
			if fieldTypeId == thrift.STRING {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRegionInfoArgs) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	v1678, err1679 := iprot.ReadBinary()
	if err1679 != nil {
		return thrift.NewTProtocolExceptionReadField(1, "row", p.ThriftName(), err1679)
	}
	p.Row = Text(v1678)
	return err
}

func (p *GetRegionInfoArgs) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRegionInfo_args")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	err = p.writeField1(oprot)
	if err != nil {
		return err
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRegionInfoArgs) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Row != nil {
		err = oprot.WriteFieldBegin("row", thrift.STRING, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err)
		}
		err = oprot.WriteBinary(p.Row)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "row", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRegionInfoArgs) TStructName() string {
	return "GetRegionInfoArgs"
}

func (p *GetRegionInfoArgs) ThriftName() string {
	return "getRegionInfo_args"
}

func (p *GetRegionInfoArgs) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 1:
		return p.Row
	}
	return nil
}

func (p *GetRegionInfoArgs) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("row", thrift.STRING, 1),
	})
}

/**
 * Attributes:
 *  - Success
 *  - Io
 */
type GetRegionInfoResult struct {
	Success *TRegionInfo `json:"success"` // 0
	Io      *IOError     `json:"io"`      // 1
}

var tstructGetRegionInfoResult = thrift.NewTStruct("getRegionInfo_result", []thrift.TField{
	thrift.NewTField("success", thrift.STRUCT, 0),
	thrift.NewTField("io", thrift.STRUCT, 1),
})

func (*GetRegionInfoResult) GetTStruct() thrift.TStruct { return tstructGetRegionInfoResult }
func NewGetRegionInfoResult() *GetRegionInfoResult {
	output := &GetRegionInfoResult{}
	{
	}
	return output
}

func (p *GetRegionInfoResult) Read(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	_, err = iprot.ReadStructBegin()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	for {
		fieldName, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if fieldId < 0 {
			fieldId = int16(tstructGetRegionInfoResult.FieldIdFromFieldName(fieldName))
			fieldTypeId = tstructGetRegionInfoResult.FieldFromFieldName(fieldName).TypeId()
		}
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 0: //TRegionInfo
			if fieldTypeId == thrift.STRUCT {
				err = p.readField0(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		case 1: //IOError
			if fieldTypeId == thrift.STRUCT {
				err = p.readField1(iprot)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			} else {
				err = iprot.Skip(fieldTypeId)
				if err != nil {
					return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
				}
			}
		default:
			err = iprot.Skip(fieldTypeId)
			if err != nil {
				return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
			}
		} //switch
		err = iprot.ReadFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionReadField(int(fieldId), fieldName, p.ThriftName(), err)
		}
	}
	err = iprot.ReadStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionReadStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRegionInfoResult) readField0(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Success = NewTRegionInfo()
	err1682 := p.Success.Read(iprot)
	if err1682 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.SuccessTRegionInfo", err1682)
	}
	return err
}

func (p *GetRegionInfoResult) readField1(iprot thrift.TProtocol) (err thrift.TProtocolException) {
	p.Io = NewIOError()
	err1685 := p.Io.Read(iprot)
	if err1685 != nil {
		return thrift.NewTProtocolExceptionReadStruct("p.IoIOError", err1685)
	}
	return err
}

func (p *GetRegionInfoResult) Write(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	err = oprot.WriteStructBegin("getRegionInfo_result")
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	switch {
	case p.Io != nil:
		if err = p.writeField1(oprot); err != nil {
			return err
		}
	default:
		if err = p.writeField0(oprot); err != nil {
			return err
		}
	}
	err = oprot.WriteFieldStop()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteField(-1, "STOP", p.ThriftName(), err)
	}
	err = oprot.WriteStructEnd()
	if err != nil {
		return thrift.NewTProtocolExceptionWriteStruct(p.ThriftName(), err)
	}
	return err
}

func (p *GetRegionInfoResult) writeField0(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Success != nil {
		err = oprot.WriteFieldBegin("success", thrift.STRUCT, 0)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
		err = p.Success.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("TRegionInfo", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(0, "success", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRegionInfoResult) writeField1(oprot thrift.TProtocol) (err thrift.TProtocolException) {
	if p.Io != nil {
		err = oprot.WriteFieldBegin("io", thrift.STRUCT, 1)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
		err = p.Io.Write(oprot)
		if err != nil {
			return thrift.NewTProtocolExceptionWriteStruct("IOError", err)
		}
		err = oprot.WriteFieldEnd()
		if err != nil {
			return thrift.NewTProtocolExceptionWriteField(1, "io", p.ThriftName(), err)
		}
	}
	return err
}

func (p *GetRegionInfoResult) TStructName() string {
	return "GetRegionInfoResult"
}

func (p *GetRegionInfoResult) ThriftName() string {
	return "getRegionInfo_result"
}

func (p *GetRegionInfoResult) AttributeByFieldId(id int) interface{} {
	switch id {
	default:
		return nil
	case 0:
		return p.Success
	case 1:
		return p.Io
	}
	return nil
}

func (p *GetRegionInfoResult) TStructFields() thrift.TFieldContainer {
	return thrift.NewTFieldContainer([]thrift.TField{
		thrift.NewTField("success", thrift.STRUCT, 0),
		thrift.NewTField("io", thrift.STRUCT, 1),
	})
}
