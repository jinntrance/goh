// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package main

import (
	"Hbase"
	"flag"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
	"net"
	"net/url"
	"os"
	"strconv"
	"strings"
)

func Usage() {
	fmt.Fprintln(os.Stderr, "Usage of ", os.Args[0], " [-h host:port] [-u url] [-f[ramed]] function [arg1 [arg2...]]:")
	flag.PrintDefaults()
	fmt.Fprintln(os.Stderr, "\nFunctions:")
	fmt.Fprintln(os.Stderr, "  void enableTable(Bytes tableName)")
	fmt.Fprintln(os.Stderr, "  void disableTable(Bytes tableName)")
	fmt.Fprintln(os.Stderr, "  bool isTableEnabled(Bytes tableName)")
	fmt.Fprintln(os.Stderr, "  void compact(Bytes tableNameOrRegionName)")
	fmt.Fprintln(os.Stderr, "  void majorCompact(Bytes tableNameOrRegionName)")
	fmt.Fprintln(os.Stderr, "   getTableNames()")
	fmt.Fprintln(os.Stderr, "   getColumnDescriptors(Text tableName)")
	fmt.Fprintln(os.Stderr, "   getTableRegions(Text tableName)")
	fmt.Fprintln(os.Stderr, "  void createTable(Text tableName,  columnFamilies)")
	fmt.Fprintln(os.Stderr, "  void MTCreateTable(Text tableName,  splitKeys,  columnFamilies)")
	fmt.Fprintln(os.Stderr, "  void MTAddColumn(Text tableName,  columnFamilies)")
	fmt.Fprintln(os.Stderr, "  void MTModifyColumn(Text tableName,  columnFamilies)")
	fmt.Fprintln(os.Stderr, "  void MTDeleteColumn(Text tableName,  columnNames)")
	fmt.Fprintln(os.Stderr, "  void deleteTable(Text tableName)")
	fmt.Fprintln(os.Stderr, "   get(Text tableName, Text row, Text column,  attributes)")
	fmt.Fprintln(os.Stderr, "   getVer(Text tableName, Text row, Text column, i32 numVersions,  attributes)")
	fmt.Fprintln(os.Stderr, "   getVerTs(Text tableName, Text row, Text column, i64 timestamp, i32 numVersions,  attributes)")
	fmt.Fprintln(os.Stderr, "   getRow(Text tableName, Text row,  attributes)")
	fmt.Fprintln(os.Stderr, "   getRowWithColumns(Text tableName, Text row,  columns,  attributes)")
	fmt.Fprintln(os.Stderr, "   getRowTs(Text tableName, Text row, i64 timestamp,  attributes)")
	fmt.Fprintln(os.Stderr, "   getRowWithColumnsTs(Text tableName, Text row,  columns, i64 timestamp,  attributes)")
	fmt.Fprintln(os.Stderr, "   getRows(Text tableName,  rows,  attributes)")
	fmt.Fprintln(os.Stderr, "   getRowsWithColumns(Text tableName,  rows,  columns,  attributes)")
	fmt.Fprintln(os.Stderr, "   getRowsTs(Text tableName,  rows, i64 timestamp,  attributes)")
	fmt.Fprintln(os.Stderr, "   getRowsWithColumnsTs(Text tableName,  rows,  columns, i64 timestamp,  attributes)")
	fmt.Fprintln(os.Stderr, "  void mutateRow(Text tableName, Text row,  mutations,  attributes)")
	fmt.Fprintln(os.Stderr, "  void mutateRowTs(Text tableName, Text row,  mutations, i64 timestamp,  attributes)")
	fmt.Fprintln(os.Stderr, "  void mutateRows(Text tableName,  rowBatches,  attributes)")
	fmt.Fprintln(os.Stderr, "  void mutateRowsTs(Text tableName,  rowBatches, i64 timestamp,  attributes)")
	fmt.Fprintln(os.Stderr, "  i64 atomicIncrement(Text tableName, Text row, Text column, i64 value)")
	fmt.Fprintln(os.Stderr, "  void deleteAll(Text tableName, Text row, Text column,  attributes)")
	fmt.Fprintln(os.Stderr, "  void deleteAllTs(Text tableName, Text row, Text column, i64 timestamp,  attributes)")
	fmt.Fprintln(os.Stderr, "  void deleteAllRow(Text tableName, Text row,  attributes)")
	fmt.Fprintln(os.Stderr, "  void increment(TIncrement increment)")
	fmt.Fprintln(os.Stderr, "  void incrementRows( increments)")
	fmt.Fprintln(os.Stderr, "  void deleteAllRowTs(Text tableName, Text row, i64 timestamp,  attributes)")
	fmt.Fprintln(os.Stderr, "  ScannerID scannerOpenWithScan(Text tableName, TScan scan,  attributes)")
	fmt.Fprintln(os.Stderr, "  ScannerID scannerOpen(Text tableName, Text startRow,  columns,  attributes)")
	fmt.Fprintln(os.Stderr, "  ScannerID scannerOpenWithStop(Text tableName, Text startRow, Text stopRow,  columns,  attributes)")
	fmt.Fprintln(os.Stderr, "  ScannerID scannerOpenWithPrefix(Text tableName, Text startAndPrefix,  columns,  attributes)")
	fmt.Fprintln(os.Stderr, "  ScannerID scannerOpenTs(Text tableName, Text startRow,  columns, i64 timestamp,  attributes)")
	fmt.Fprintln(os.Stderr, "  ScannerID scannerOpenWithStopTs(Text tableName, Text startRow, Text stopRow,  columns, i64 timestamp,  attributes)")
	fmt.Fprintln(os.Stderr, "   scannerGet(ScannerID id)")
	fmt.Fprintln(os.Stderr, "   scannerGetList(ScannerID id, i32 nbRows)")
	fmt.Fprintln(os.Stderr, "  void scannerClose(ScannerID id)")
	fmt.Fprintln(os.Stderr, "   getRowOrBefore(Text tableName, Text row, Text family)")
	fmt.Fprintln(os.Stderr, "  TRegionInfo getRegionInfo(Text row)")
	fmt.Fprintln(os.Stderr, "   getRowWithColumnsMaxVer(Text tableName, Text row,  columns, i32 numVersions,  attributes)")
	fmt.Fprintln(os.Stderr, "   getRowWithColumnsTsMaxVer(Text tableName, Text row,  columns, i64 timestamp, i32 numVersions,  attributes)")
	fmt.Fprintln(os.Stderr)
	os.Exit(0)
}

func main() {
	flag.Usage = Usage
	var host string
	var port int
	var protocol string
	var urlString string
	var framed bool
	var useHttp bool
	var parsedUrl url.URL
	var trans thrift.TTransport
	_ = math.MinInt32 // will become unneeded eventually
	_ = strconv.Atoi
	flag.Usage = Usage
	flag.StringVar(&host, "h", "localhost", "Specify host and port")
	flag.IntVar(&port, "p", 9090, "Specify port")
	flag.StringVar(&protocol, "P", "binary", "Specify the protocol (binary, compact, simplejson, json)")
	flag.StringVar(&urlString, "u", "", "Specify the url")
	flag.BoolVar(&framed, "framed", false, "Use framed transport")
	flag.BoolVar(&useHttp, "http", false, "Use http")
	flag.Parse()

	if len(urlString) > 0 {
		parsedUrl, err := url.Parse(urlString)
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
		host = parsedUrl.Host
		useHttp = len(parsedUrl.Scheme) <= 0 || parsedUrl.Scheme == "http"
	} else if useHttp {
		_, err := url.Parse(fmt.Sprint("http://", host, ":", port))
		if err != nil {
			fmt.Fprintln(os.Stderr, "Error parsing URL: ", err)
			flag.Usage()
		}
	}

	cmd := flag.Arg(0)
	var err error
	if useHttp {
		trans, err = thrift.NewTHttpClient(parsedUrl.String())
	} else {
		portStr := fmt.Sprint(port)
		if strings.Contains(host, ":") {
			host, portStr, err = net.SplitHostPort(host)
			if err != nil {
				fmt.Fprintln(os.Stderr, "error with host:", err)
				os.Exit(1)
			}
		}
		trans, err = thrift.NewTSocket(net.JoinHostPort(host, portStr))
		if err != nil {
			fmt.Fprintln(os.Stderr, "error resolving address:", err)
			os.Exit(1)
		}
		if framed {
			trans = thrift.NewTFramedTransport(trans)
		}
	}
	if err != nil {
		fmt.Fprintln(os.Stderr, "Error creating transport", err)
		os.Exit(1)
	}
	defer trans.Close()
	var protocolFactory thrift.TProtocolFactory
	switch protocol {
	case "compact":
		protocolFactory = thrift.NewTCompactProtocolFactory()
		break
	case "simplejson":
		protocolFactory = thrift.NewTSimpleJSONProtocolFactory()
		break
	case "json":
		protocolFactory = thrift.NewTJSONProtocolFactory()
		break
	case "binary", "":
		protocolFactory = thrift.NewTBinaryProtocolFactoryDefault()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid protocol specified: ", protocol)
		Usage()
		os.Exit(1)
	}
	client := Hbase.NewHbaseClientFactory(trans, protocolFactory)
	if err := trans.Open(); err != nil {
		fmt.Fprintln(os.Stderr, "Error opening socket to ", host, ":", port, " ", err)
		os.Exit(1)
	}

	switch cmd {
	case "enableTable":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "EnableTable requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Bytes(argvalue0)
		fmt.Print(client.EnableTable(value0))
		fmt.Print("\n")
		break
	case "disableTable":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DisableTable requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Bytes(argvalue0)
		fmt.Print(client.DisableTable(value0))
		fmt.Print("\n")
		break
	case "isTableEnabled":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "IsTableEnabled requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Bytes(argvalue0)
		fmt.Print(client.IsTableEnabled(value0))
		fmt.Print("\n")
		break
	case "compact":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Compact requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Bytes(argvalue0)
		fmt.Print(client.Compact(value0))
		fmt.Print("\n")
		break
	case "majorCompact":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "MajorCompact requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Bytes(argvalue0)
		fmt.Print(client.MajorCompact(value0))
		fmt.Print("\n")
		break
	case "getTableNames":
		if flag.NArg()-1 != 0 {
			fmt.Fprintln(os.Stderr, "GetTableNames requires 0 args")
			flag.Usage()
		}
		fmt.Print(client.GetTableNames())
		fmt.Print("\n")
		break
	case "getColumnDescriptors":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetColumnDescriptors requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		fmt.Print(client.GetColumnDescriptors(value0))
		fmt.Print("\n")
		break
	case "getTableRegions":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetTableRegions requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		fmt.Print(client.GetTableRegions(value0))
		fmt.Print("\n")
		break
	case "createTable":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "CreateTable requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		arg315 := flag.Arg(2)
		mbTrans316 := thrift.NewTMemoryBufferLen(len(arg315))
		defer mbTrans316.Close()
		_, err317 := mbTrans316.WriteString(arg315)
		if err317 != nil {
			Usage()
			return
		}
		factory318 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt319 := factory318.GetProtocol(mbTrans316)
		containerStruct1 := Hbase.NewCreateTableArgs()
		err320 := containerStruct1.ReadField2(jsProt319)
		if err320 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.ColumnFamilies
		value1 := argvalue1
		fmt.Print(client.CreateTable(value0, value1))
		fmt.Print("\n")
		break
	case "MTCreateTable":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "MTCreateTable requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		arg322 := flag.Arg(2)
		mbTrans323 := thrift.NewTMemoryBufferLen(len(arg322))
		defer mbTrans323.Close()
		_, err324 := mbTrans323.WriteString(arg322)
		if err324 != nil {
			Usage()
			return
		}
		factory325 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt326 := factory325.GetProtocol(mbTrans323)
		containerStruct1 := Hbase.NewMTCreateTableArgs()
		err327 := containerStruct1.ReadField2(jsProt326)
		if err327 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.SplitKeys
		value1 := argvalue1
		arg328 := flag.Arg(3)
		mbTrans329 := thrift.NewTMemoryBufferLen(len(arg328))
		defer mbTrans329.Close()
		_, err330 := mbTrans329.WriteString(arg328)
		if err330 != nil {
			Usage()
			return
		}
		factory331 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt332 := factory331.GetProtocol(mbTrans329)
		containerStruct2 := Hbase.NewMTCreateTableArgs()
		err333 := containerStruct2.ReadField3(jsProt332)
		if err333 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.ColumnFamilies
		value2 := argvalue2
		fmt.Print(client.MTCreateTable(value0, value1, value2))
		fmt.Print("\n")
		break
	case "MTAddColumn":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "MTAddColumn requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		arg335 := flag.Arg(2)
		mbTrans336 := thrift.NewTMemoryBufferLen(len(arg335))
		defer mbTrans336.Close()
		_, err337 := mbTrans336.WriteString(arg335)
		if err337 != nil {
			Usage()
			return
		}
		factory338 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt339 := factory338.GetProtocol(mbTrans336)
		containerStruct1 := Hbase.NewMTAddColumnArgs()
		err340 := containerStruct1.ReadField2(jsProt339)
		if err340 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.ColumnFamilies
		value1 := argvalue1
		fmt.Print(client.MTAddColumn(value0, value1))
		fmt.Print("\n")
		break
	case "MTModifyColumn":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "MTModifyColumn requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		arg342 := flag.Arg(2)
		mbTrans343 := thrift.NewTMemoryBufferLen(len(arg342))
		defer mbTrans343.Close()
		_, err344 := mbTrans343.WriteString(arg342)
		if err344 != nil {
			Usage()
			return
		}
		factory345 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt346 := factory345.GetProtocol(mbTrans343)
		containerStruct1 := Hbase.NewMTModifyColumnArgs()
		err347 := containerStruct1.ReadField2(jsProt346)
		if err347 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.ColumnFamilies
		value1 := argvalue1
		fmt.Print(client.MTModifyColumn(value0, value1))
		fmt.Print("\n")
		break
	case "MTDeleteColumn":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "MTDeleteColumn requires 2 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		arg349 := flag.Arg(2)
		mbTrans350 := thrift.NewTMemoryBufferLen(len(arg349))
		defer mbTrans350.Close()
		_, err351 := mbTrans350.WriteString(arg349)
		if err351 != nil {
			Usage()
			return
		}
		factory352 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt353 := factory352.GetProtocol(mbTrans350)
		containerStruct1 := Hbase.NewMTDeleteColumnArgs()
		err354 := containerStruct1.ReadField2(jsProt353)
		if err354 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.ColumnNames
		value1 := argvalue1
		fmt.Print(client.MTDeleteColumn(value0, value1))
		fmt.Print("\n")
		break
	case "deleteTable":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "DeleteTable requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		fmt.Print(client.DeleteTable(value0))
		fmt.Print("\n")
		break
	case "get":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "Get requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := Hbase.Text(argvalue2)
		arg359 := flag.Arg(4)
		mbTrans360 := thrift.NewTMemoryBufferLen(len(arg359))
		defer mbTrans360.Close()
		_, err361 := mbTrans360.WriteString(arg359)
		if err361 != nil {
			Usage()
			return
		}
		factory362 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt363 := factory362.GetProtocol(mbTrans360)
		containerStruct3 := Hbase.NewGetArgs()
		err364 := containerStruct3.ReadField4(jsProt363)
		if err364 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.Get(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getVer":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetVer requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := Hbase.Text(argvalue2)
		tmp3, err368 := (strconv.Atoi(flag.Arg(4)))
		if err368 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		arg369 := flag.Arg(5)
		mbTrans370 := thrift.NewTMemoryBufferLen(len(arg369))
		defer mbTrans370.Close()
		_, err371 := mbTrans370.WriteString(arg369)
		if err371 != nil {
			Usage()
			return
		}
		factory372 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt373 := factory372.GetProtocol(mbTrans370)
		containerStruct4 := Hbase.NewGetVerArgs()
		err374 := containerStruct4.ReadField5(jsProt373)
		if err374 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.Attributes
		value4 := argvalue4
		fmt.Print(client.GetVer(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "getVerTs":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GetVerTs requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := Hbase.Text(argvalue2)
		argvalue3, err378 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err378 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		tmp4, err379 := (strconv.Atoi(flag.Arg(5)))
		if err379 != nil {
			Usage()
			return
		}
		argvalue4 := int32(tmp4)
		value4 := argvalue4
		arg380 := flag.Arg(6)
		mbTrans381 := thrift.NewTMemoryBufferLen(len(arg380))
		defer mbTrans381.Close()
		_, err382 := mbTrans381.WriteString(arg380)
		if err382 != nil {
			Usage()
			return
		}
		factory383 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt384 := factory383.GetProtocol(mbTrans381)
		containerStruct5 := Hbase.NewGetVerTsArgs()
		err385 := containerStruct5.ReadField6(jsProt384)
		if err385 != nil {
			Usage()
			return
		}
		argvalue5 := containerStruct5.Attributes
		value5 := argvalue5
		fmt.Print(client.GetVerTs(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "getRow":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetRow requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		arg388 := flag.Arg(3)
		mbTrans389 := thrift.NewTMemoryBufferLen(len(arg388))
		defer mbTrans389.Close()
		_, err390 := mbTrans389.WriteString(arg388)
		if err390 != nil {
			Usage()
			return
		}
		factory391 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt392 := factory391.GetProtocol(mbTrans389)
		containerStruct2 := Hbase.NewGetRowArgs()
		err393 := containerStruct2.ReadField3(jsProt392)
		if err393 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Attributes
		value2 := argvalue2
		fmt.Print(client.GetRow(value0, value1, value2))
		fmt.Print("\n")
		break
	case "getRowWithColumns":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetRowWithColumns requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		arg396 := flag.Arg(3)
		mbTrans397 := thrift.NewTMemoryBufferLen(len(arg396))
		defer mbTrans397.Close()
		_, err398 := mbTrans397.WriteString(arg396)
		if err398 != nil {
			Usage()
			return
		}
		factory399 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt400 := factory399.GetProtocol(mbTrans397)
		containerStruct2 := Hbase.NewGetRowWithColumnsArgs()
		err401 := containerStruct2.ReadField3(jsProt400)
		if err401 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Columns
		value2 := argvalue2
		arg402 := flag.Arg(4)
		mbTrans403 := thrift.NewTMemoryBufferLen(len(arg402))
		defer mbTrans403.Close()
		_, err404 := mbTrans403.WriteString(arg402)
		if err404 != nil {
			Usage()
			return
		}
		factory405 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt406 := factory405.GetProtocol(mbTrans403)
		containerStruct3 := Hbase.NewGetRowWithColumnsArgs()
		err407 := containerStruct3.ReadField4(jsProt406)
		if err407 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.GetRowWithColumns(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getRowTs":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetRowTs requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		argvalue2, err410 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err410 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg411 := flag.Arg(4)
		mbTrans412 := thrift.NewTMemoryBufferLen(len(arg411))
		defer mbTrans412.Close()
		_, err413 := mbTrans412.WriteString(arg411)
		if err413 != nil {
			Usage()
			return
		}
		factory414 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt415 := factory414.GetProtocol(mbTrans412)
		containerStruct3 := Hbase.NewGetRowTsArgs()
		err416 := containerStruct3.ReadField4(jsProt415)
		if err416 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.GetRowTs(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getRowWithColumnsTs":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetRowWithColumnsTs requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		arg419 := flag.Arg(3)
		mbTrans420 := thrift.NewTMemoryBufferLen(len(arg419))
		defer mbTrans420.Close()
		_, err421 := mbTrans420.WriteString(arg419)
		if err421 != nil {
			Usage()
			return
		}
		factory422 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt423 := factory422.GetProtocol(mbTrans420)
		containerStruct2 := Hbase.NewGetRowWithColumnsTsArgs()
		err424 := containerStruct2.ReadField3(jsProt423)
		if err424 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Columns
		value2 := argvalue2
		argvalue3, err425 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err425 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		arg426 := flag.Arg(5)
		mbTrans427 := thrift.NewTMemoryBufferLen(len(arg426))
		defer mbTrans427.Close()
		_, err428 := mbTrans427.WriteString(arg426)
		if err428 != nil {
			Usage()
			return
		}
		factory429 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt430 := factory429.GetProtocol(mbTrans427)
		containerStruct4 := Hbase.NewGetRowWithColumnsTsArgs()
		err431 := containerStruct4.ReadField5(jsProt430)
		if err431 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.Attributes
		value4 := argvalue4
		fmt.Print(client.GetRowWithColumnsTs(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "getRows":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetRows requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		arg433 := flag.Arg(2)
		mbTrans434 := thrift.NewTMemoryBufferLen(len(arg433))
		defer mbTrans434.Close()
		_, err435 := mbTrans434.WriteString(arg433)
		if err435 != nil {
			Usage()
			return
		}
		factory436 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt437 := factory436.GetProtocol(mbTrans434)
		containerStruct1 := Hbase.NewGetRowsArgs()
		err438 := containerStruct1.ReadField2(jsProt437)
		if err438 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Rows
		value1 := argvalue1
		arg439 := flag.Arg(3)
		mbTrans440 := thrift.NewTMemoryBufferLen(len(arg439))
		defer mbTrans440.Close()
		_, err441 := mbTrans440.WriteString(arg439)
		if err441 != nil {
			Usage()
			return
		}
		factory442 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt443 := factory442.GetProtocol(mbTrans440)
		containerStruct2 := Hbase.NewGetRowsArgs()
		err444 := containerStruct2.ReadField3(jsProt443)
		if err444 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Attributes
		value2 := argvalue2
		fmt.Print(client.GetRows(value0, value1, value2))
		fmt.Print("\n")
		break
	case "getRowsWithColumns":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetRowsWithColumns requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		arg446 := flag.Arg(2)
		mbTrans447 := thrift.NewTMemoryBufferLen(len(arg446))
		defer mbTrans447.Close()
		_, err448 := mbTrans447.WriteString(arg446)
		if err448 != nil {
			Usage()
			return
		}
		factory449 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt450 := factory449.GetProtocol(mbTrans447)
		containerStruct1 := Hbase.NewGetRowsWithColumnsArgs()
		err451 := containerStruct1.ReadField2(jsProt450)
		if err451 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Rows
		value1 := argvalue1
		arg452 := flag.Arg(3)
		mbTrans453 := thrift.NewTMemoryBufferLen(len(arg452))
		defer mbTrans453.Close()
		_, err454 := mbTrans453.WriteString(arg452)
		if err454 != nil {
			Usage()
			return
		}
		factory455 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt456 := factory455.GetProtocol(mbTrans453)
		containerStruct2 := Hbase.NewGetRowsWithColumnsArgs()
		err457 := containerStruct2.ReadField3(jsProt456)
		if err457 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Columns
		value2 := argvalue2
		arg458 := flag.Arg(4)
		mbTrans459 := thrift.NewTMemoryBufferLen(len(arg458))
		defer mbTrans459.Close()
		_, err460 := mbTrans459.WriteString(arg458)
		if err460 != nil {
			Usage()
			return
		}
		factory461 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt462 := factory461.GetProtocol(mbTrans459)
		containerStruct3 := Hbase.NewGetRowsWithColumnsArgs()
		err463 := containerStruct3.ReadField4(jsProt462)
		if err463 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.GetRowsWithColumns(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getRowsTs":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "GetRowsTs requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		arg465 := flag.Arg(2)
		mbTrans466 := thrift.NewTMemoryBufferLen(len(arg465))
		defer mbTrans466.Close()
		_, err467 := mbTrans466.WriteString(arg465)
		if err467 != nil {
			Usage()
			return
		}
		factory468 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt469 := factory468.GetProtocol(mbTrans466)
		containerStruct1 := Hbase.NewGetRowsTsArgs()
		err470 := containerStruct1.ReadField2(jsProt469)
		if err470 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Rows
		value1 := argvalue1
		argvalue2, err471 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err471 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg472 := flag.Arg(4)
		mbTrans473 := thrift.NewTMemoryBufferLen(len(arg472))
		defer mbTrans473.Close()
		_, err474 := mbTrans473.WriteString(arg472)
		if err474 != nil {
			Usage()
			return
		}
		factory475 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt476 := factory475.GetProtocol(mbTrans473)
		containerStruct3 := Hbase.NewGetRowsTsArgs()
		err477 := containerStruct3.ReadField4(jsProt476)
		if err477 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.GetRowsTs(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "getRowsWithColumnsTs":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetRowsWithColumnsTs requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		arg479 := flag.Arg(2)
		mbTrans480 := thrift.NewTMemoryBufferLen(len(arg479))
		defer mbTrans480.Close()
		_, err481 := mbTrans480.WriteString(arg479)
		if err481 != nil {
			Usage()
			return
		}
		factory482 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt483 := factory482.GetProtocol(mbTrans480)
		containerStruct1 := Hbase.NewGetRowsWithColumnsTsArgs()
		err484 := containerStruct1.ReadField2(jsProt483)
		if err484 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.Rows
		value1 := argvalue1
		arg485 := flag.Arg(3)
		mbTrans486 := thrift.NewTMemoryBufferLen(len(arg485))
		defer mbTrans486.Close()
		_, err487 := mbTrans486.WriteString(arg485)
		if err487 != nil {
			Usage()
			return
		}
		factory488 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt489 := factory488.GetProtocol(mbTrans486)
		containerStruct2 := Hbase.NewGetRowsWithColumnsTsArgs()
		err490 := containerStruct2.ReadField3(jsProt489)
		if err490 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Columns
		value2 := argvalue2
		argvalue3, err491 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err491 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		arg492 := flag.Arg(5)
		mbTrans493 := thrift.NewTMemoryBufferLen(len(arg492))
		defer mbTrans493.Close()
		_, err494 := mbTrans493.WriteString(arg492)
		if err494 != nil {
			Usage()
			return
		}
		factory495 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt496 := factory495.GetProtocol(mbTrans493)
		containerStruct4 := Hbase.NewGetRowsWithColumnsTsArgs()
		err497 := containerStruct4.ReadField5(jsProt496)
		if err497 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.Attributes
		value4 := argvalue4
		fmt.Print(client.GetRowsWithColumnsTs(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "mutateRow":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "MutateRow requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		arg500 := flag.Arg(3)
		mbTrans501 := thrift.NewTMemoryBufferLen(len(arg500))
		defer mbTrans501.Close()
		_, err502 := mbTrans501.WriteString(arg500)
		if err502 != nil {
			Usage()
			return
		}
		factory503 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt504 := factory503.GetProtocol(mbTrans501)
		containerStruct2 := Hbase.NewMutateRowArgs()
		err505 := containerStruct2.ReadField3(jsProt504)
		if err505 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Mutations
		value2 := argvalue2
		arg506 := flag.Arg(4)
		mbTrans507 := thrift.NewTMemoryBufferLen(len(arg506))
		defer mbTrans507.Close()
		_, err508 := mbTrans507.WriteString(arg506)
		if err508 != nil {
			Usage()
			return
		}
		factory509 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt510 := factory509.GetProtocol(mbTrans507)
		containerStruct3 := Hbase.NewMutateRowArgs()
		err511 := containerStruct3.ReadField4(jsProt510)
		if err511 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.MutateRow(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "mutateRowTs":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "MutateRowTs requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		arg514 := flag.Arg(3)
		mbTrans515 := thrift.NewTMemoryBufferLen(len(arg514))
		defer mbTrans515.Close()
		_, err516 := mbTrans515.WriteString(arg514)
		if err516 != nil {
			Usage()
			return
		}
		factory517 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt518 := factory517.GetProtocol(mbTrans515)
		containerStruct2 := Hbase.NewMutateRowTsArgs()
		err519 := containerStruct2.ReadField3(jsProt518)
		if err519 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Mutations
		value2 := argvalue2
		argvalue3, err520 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err520 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		arg521 := flag.Arg(5)
		mbTrans522 := thrift.NewTMemoryBufferLen(len(arg521))
		defer mbTrans522.Close()
		_, err523 := mbTrans522.WriteString(arg521)
		if err523 != nil {
			Usage()
			return
		}
		factory524 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt525 := factory524.GetProtocol(mbTrans522)
		containerStruct4 := Hbase.NewMutateRowTsArgs()
		err526 := containerStruct4.ReadField5(jsProt525)
		if err526 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.Attributes
		value4 := argvalue4
		fmt.Print(client.MutateRowTs(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "mutateRows":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "MutateRows requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		arg528 := flag.Arg(2)
		mbTrans529 := thrift.NewTMemoryBufferLen(len(arg528))
		defer mbTrans529.Close()
		_, err530 := mbTrans529.WriteString(arg528)
		if err530 != nil {
			Usage()
			return
		}
		factory531 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt532 := factory531.GetProtocol(mbTrans529)
		containerStruct1 := Hbase.NewMutateRowsArgs()
		err533 := containerStruct1.ReadField2(jsProt532)
		if err533 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.RowBatches
		value1 := argvalue1
		arg534 := flag.Arg(3)
		mbTrans535 := thrift.NewTMemoryBufferLen(len(arg534))
		defer mbTrans535.Close()
		_, err536 := mbTrans535.WriteString(arg534)
		if err536 != nil {
			Usage()
			return
		}
		factory537 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt538 := factory537.GetProtocol(mbTrans535)
		containerStruct2 := Hbase.NewMutateRowsArgs()
		err539 := containerStruct2.ReadField3(jsProt538)
		if err539 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Attributes
		value2 := argvalue2
		fmt.Print(client.MutateRows(value0, value1, value2))
		fmt.Print("\n")
		break
	case "mutateRowsTs":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "MutateRowsTs requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		arg541 := flag.Arg(2)
		mbTrans542 := thrift.NewTMemoryBufferLen(len(arg541))
		defer mbTrans542.Close()
		_, err543 := mbTrans542.WriteString(arg541)
		if err543 != nil {
			Usage()
			return
		}
		factory544 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt545 := factory544.GetProtocol(mbTrans542)
		containerStruct1 := Hbase.NewMutateRowsTsArgs()
		err546 := containerStruct1.ReadField2(jsProt545)
		if err546 != nil {
			Usage()
			return
		}
		argvalue1 := containerStruct1.RowBatches
		value1 := argvalue1
		argvalue2, err547 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err547 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg548 := flag.Arg(4)
		mbTrans549 := thrift.NewTMemoryBufferLen(len(arg548))
		defer mbTrans549.Close()
		_, err550 := mbTrans549.WriteString(arg548)
		if err550 != nil {
			Usage()
			return
		}
		factory551 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt552 := factory551.GetProtocol(mbTrans549)
		containerStruct3 := Hbase.NewMutateRowsTsArgs()
		err553 := containerStruct3.ReadField4(jsProt552)
		if err553 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.MutateRowsTs(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "atomicIncrement":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "AtomicIncrement requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := Hbase.Text(argvalue2)
		argvalue3, err557 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err557 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		fmt.Print(client.AtomicIncrement(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "deleteAll":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DeleteAll requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := Hbase.Text(argvalue2)
		arg561 := flag.Arg(4)
		mbTrans562 := thrift.NewTMemoryBufferLen(len(arg561))
		defer mbTrans562.Close()
		_, err563 := mbTrans562.WriteString(arg561)
		if err563 != nil {
			Usage()
			return
		}
		factory564 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt565 := factory564.GetProtocol(mbTrans562)
		containerStruct3 := Hbase.NewDeleteAllArgs()
		err566 := containerStruct3.ReadField4(jsProt565)
		if err566 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.DeleteAll(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "deleteAllTs":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "DeleteAllTs requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := Hbase.Text(argvalue2)
		argvalue3, err570 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err570 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		arg571 := flag.Arg(5)
		mbTrans572 := thrift.NewTMemoryBufferLen(len(arg571))
		defer mbTrans572.Close()
		_, err573 := mbTrans572.WriteString(arg571)
		if err573 != nil {
			Usage()
			return
		}
		factory574 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt575 := factory574.GetProtocol(mbTrans572)
		containerStruct4 := Hbase.NewDeleteAllTsArgs()
		err576 := containerStruct4.ReadField5(jsProt575)
		if err576 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.Attributes
		value4 := argvalue4
		fmt.Print(client.DeleteAllTs(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "deleteAllRow":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "DeleteAllRow requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		arg579 := flag.Arg(3)
		mbTrans580 := thrift.NewTMemoryBufferLen(len(arg579))
		defer mbTrans580.Close()
		_, err581 := mbTrans580.WriteString(arg579)
		if err581 != nil {
			Usage()
			return
		}
		factory582 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt583 := factory582.GetProtocol(mbTrans580)
		containerStruct2 := Hbase.NewDeleteAllRowArgs()
		err584 := containerStruct2.ReadField3(jsProt583)
		if err584 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Attributes
		value2 := argvalue2
		fmt.Print(client.DeleteAllRow(value0, value1, value2))
		fmt.Print("\n")
		break
	case "increment":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "Increment requires 1 args")
			flag.Usage()
		}
		arg585 := flag.Arg(1)
		mbTrans586 := thrift.NewTMemoryBufferLen(len(arg585))
		defer mbTrans586.Close()
		_, err587 := mbTrans586.WriteString(arg585)
		if err587 != nil {
			Usage()
			return
		}
		factory588 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt589 := factory588.GetProtocol(mbTrans586)
		argvalue0 := Hbase.NewTIncrement()
		err590 := argvalue0.Read(jsProt589)
		if err590 != nil {
			Usage()
			return
		}
		value0 := argvalue0
		fmt.Print(client.Increment(value0))
		fmt.Print("\n")
		break
	case "incrementRows":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "IncrementRows requires 1 args")
			flag.Usage()
		}
		arg591 := flag.Arg(1)
		mbTrans592 := thrift.NewTMemoryBufferLen(len(arg591))
		defer mbTrans592.Close()
		_, err593 := mbTrans592.WriteString(arg591)
		if err593 != nil {
			Usage()
			return
		}
		factory594 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt595 := factory594.GetProtocol(mbTrans592)
		containerStruct0 := Hbase.NewIncrementRowsArgs()
		err596 := containerStruct0.ReadField1(jsProt595)
		if err596 != nil {
			Usage()
			return
		}
		argvalue0 := containerStruct0.Increments
		value0 := argvalue0
		fmt.Print(client.IncrementRows(value0))
		fmt.Print("\n")
		break
	case "deleteAllRowTs":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "DeleteAllRowTs requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		argvalue2, err599 := (strconv.ParseInt(flag.Arg(3), 10, 64))
		if err599 != nil {
			Usage()
			return
		}
		value2 := argvalue2
		arg600 := flag.Arg(4)
		mbTrans601 := thrift.NewTMemoryBufferLen(len(arg600))
		defer mbTrans601.Close()
		_, err602 := mbTrans601.WriteString(arg600)
		if err602 != nil {
			Usage()
			return
		}
		factory603 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt604 := factory603.GetProtocol(mbTrans601)
		containerStruct3 := Hbase.NewDeleteAllRowTsArgs()
		err605 := containerStruct3.ReadField4(jsProt604)
		if err605 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.DeleteAllRowTs(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "scannerOpenWithScan":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "ScannerOpenWithScan requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		arg607 := flag.Arg(2)
		mbTrans608 := thrift.NewTMemoryBufferLen(len(arg607))
		defer mbTrans608.Close()
		_, err609 := mbTrans608.WriteString(arg607)
		if err609 != nil {
			Usage()
			return
		}
		factory610 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt611 := factory610.GetProtocol(mbTrans608)
		argvalue1 := Hbase.NewTScan()
		err612 := argvalue1.Read(jsProt611)
		if err612 != nil {
			Usage()
			return
		}
		value1 := argvalue1
		arg613 := flag.Arg(3)
		mbTrans614 := thrift.NewTMemoryBufferLen(len(arg613))
		defer mbTrans614.Close()
		_, err615 := mbTrans614.WriteString(arg613)
		if err615 != nil {
			Usage()
			return
		}
		factory616 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt617 := factory616.GetProtocol(mbTrans614)
		containerStruct2 := Hbase.NewScannerOpenWithScanArgs()
		err618 := containerStruct2.ReadField3(jsProt617)
		if err618 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Attributes
		value2 := argvalue2
		fmt.Print(client.ScannerOpenWithScan(value0, value1, value2))
		fmt.Print("\n")
		break
	case "scannerOpen":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "ScannerOpen requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		arg621 := flag.Arg(3)
		mbTrans622 := thrift.NewTMemoryBufferLen(len(arg621))
		defer mbTrans622.Close()
		_, err623 := mbTrans622.WriteString(arg621)
		if err623 != nil {
			Usage()
			return
		}
		factory624 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt625 := factory624.GetProtocol(mbTrans622)
		containerStruct2 := Hbase.NewScannerOpenArgs()
		err626 := containerStruct2.ReadField3(jsProt625)
		if err626 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Columns
		value2 := argvalue2
		arg627 := flag.Arg(4)
		mbTrans628 := thrift.NewTMemoryBufferLen(len(arg627))
		defer mbTrans628.Close()
		_, err629 := mbTrans628.WriteString(arg627)
		if err629 != nil {
			Usage()
			return
		}
		factory630 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt631 := factory630.GetProtocol(mbTrans628)
		containerStruct3 := Hbase.NewScannerOpenArgs()
		err632 := containerStruct3.ReadField4(jsProt631)
		if err632 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.ScannerOpen(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "scannerOpenWithStop":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "ScannerOpenWithStop requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := Hbase.Text(argvalue2)
		arg636 := flag.Arg(4)
		mbTrans637 := thrift.NewTMemoryBufferLen(len(arg636))
		defer mbTrans637.Close()
		_, err638 := mbTrans637.WriteString(arg636)
		if err638 != nil {
			Usage()
			return
		}
		factory639 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt640 := factory639.GetProtocol(mbTrans637)
		containerStruct3 := Hbase.NewScannerOpenWithStopArgs()
		err641 := containerStruct3.ReadField4(jsProt640)
		if err641 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Columns
		value3 := argvalue3
		arg642 := flag.Arg(5)
		mbTrans643 := thrift.NewTMemoryBufferLen(len(arg642))
		defer mbTrans643.Close()
		_, err644 := mbTrans643.WriteString(arg642)
		if err644 != nil {
			Usage()
			return
		}
		factory645 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt646 := factory645.GetProtocol(mbTrans643)
		containerStruct4 := Hbase.NewScannerOpenWithStopArgs()
		err647 := containerStruct4.ReadField5(jsProt646)
		if err647 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.Attributes
		value4 := argvalue4
		fmt.Print(client.ScannerOpenWithStop(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "scannerOpenWithPrefix":
		if flag.NArg()-1 != 4 {
			fmt.Fprintln(os.Stderr, "ScannerOpenWithPrefix requires 4 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		arg650 := flag.Arg(3)
		mbTrans651 := thrift.NewTMemoryBufferLen(len(arg650))
		defer mbTrans651.Close()
		_, err652 := mbTrans651.WriteString(arg650)
		if err652 != nil {
			Usage()
			return
		}
		factory653 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt654 := factory653.GetProtocol(mbTrans651)
		containerStruct2 := Hbase.NewScannerOpenWithPrefixArgs()
		err655 := containerStruct2.ReadField3(jsProt654)
		if err655 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Columns
		value2 := argvalue2
		arg656 := flag.Arg(4)
		mbTrans657 := thrift.NewTMemoryBufferLen(len(arg656))
		defer mbTrans657.Close()
		_, err658 := mbTrans657.WriteString(arg656)
		if err658 != nil {
			Usage()
			return
		}
		factory659 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt660 := factory659.GetProtocol(mbTrans657)
		containerStruct3 := Hbase.NewScannerOpenWithPrefixArgs()
		err661 := containerStruct3.ReadField4(jsProt660)
		if err661 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Attributes
		value3 := argvalue3
		fmt.Print(client.ScannerOpenWithPrefix(value0, value1, value2, value3))
		fmt.Print("\n")
		break
	case "scannerOpenTs":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "ScannerOpenTs requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		arg664 := flag.Arg(3)
		mbTrans665 := thrift.NewTMemoryBufferLen(len(arg664))
		defer mbTrans665.Close()
		_, err666 := mbTrans665.WriteString(arg664)
		if err666 != nil {
			Usage()
			return
		}
		factory667 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt668 := factory667.GetProtocol(mbTrans665)
		containerStruct2 := Hbase.NewScannerOpenTsArgs()
		err669 := containerStruct2.ReadField3(jsProt668)
		if err669 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Columns
		value2 := argvalue2
		argvalue3, err670 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err670 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		arg671 := flag.Arg(5)
		mbTrans672 := thrift.NewTMemoryBufferLen(len(arg671))
		defer mbTrans672.Close()
		_, err673 := mbTrans672.WriteString(arg671)
		if err673 != nil {
			Usage()
			return
		}
		factory674 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt675 := factory674.GetProtocol(mbTrans672)
		containerStruct4 := Hbase.NewScannerOpenTsArgs()
		err676 := containerStruct4.ReadField5(jsProt675)
		if err676 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.Attributes
		value4 := argvalue4
		fmt.Print(client.ScannerOpenTs(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "scannerOpenWithStopTs":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "ScannerOpenWithStopTs requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := Hbase.Text(argvalue2)
		arg680 := flag.Arg(4)
		mbTrans681 := thrift.NewTMemoryBufferLen(len(arg680))
		defer mbTrans681.Close()
		_, err682 := mbTrans681.WriteString(arg680)
		if err682 != nil {
			Usage()
			return
		}
		factory683 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt684 := factory683.GetProtocol(mbTrans681)
		containerStruct3 := Hbase.NewScannerOpenWithStopTsArgs()
		err685 := containerStruct3.ReadField4(jsProt684)
		if err685 != nil {
			Usage()
			return
		}
		argvalue3 := containerStruct3.Columns
		value3 := argvalue3
		argvalue4, err686 := (strconv.ParseInt(flag.Arg(5), 10, 64))
		if err686 != nil {
			Usage()
			return
		}
		value4 := argvalue4
		arg687 := flag.Arg(6)
		mbTrans688 := thrift.NewTMemoryBufferLen(len(arg687))
		defer mbTrans688.Close()
		_, err689 := mbTrans688.WriteString(arg687)
		if err689 != nil {
			Usage()
			return
		}
		factory690 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt691 := factory690.GetProtocol(mbTrans688)
		containerStruct5 := Hbase.NewScannerOpenWithStopTsArgs()
		err692 := containerStruct5.ReadField6(jsProt691)
		if err692 != nil {
			Usage()
			return
		}
		argvalue5 := containerStruct5.Attributes
		value5 := argvalue5
		fmt.Print(client.ScannerOpenWithStopTs(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "scannerGet":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ScannerGet requires 1 args")
			flag.Usage()
		}
		tmp0, err693 := (strconv.Atoi(flag.Arg(1)))
		if err693 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := Hbase.ScannerID(argvalue0)
		fmt.Print(client.ScannerGet(value0))
		fmt.Print("\n")
		break
	case "scannerGetList":
		if flag.NArg()-1 != 2 {
			fmt.Fprintln(os.Stderr, "ScannerGetList requires 2 args")
			flag.Usage()
		}
		tmp0, err694 := (strconv.Atoi(flag.Arg(1)))
		if err694 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := Hbase.ScannerID(argvalue0)
		tmp1, err695 := (strconv.Atoi(flag.Arg(2)))
		if err695 != nil {
			Usage()
			return
		}
		argvalue1 := int32(tmp1)
		value1 := argvalue1
		fmt.Print(client.ScannerGetList(value0, value1))
		fmt.Print("\n")
		break
	case "scannerClose":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "ScannerClose requires 1 args")
			flag.Usage()
		}
		tmp0, err696 := (strconv.Atoi(flag.Arg(1)))
		if err696 != nil {
			Usage()
			return
		}
		argvalue0 := int32(tmp0)
		value0 := Hbase.ScannerID(argvalue0)
		fmt.Print(client.ScannerClose(value0))
		fmt.Print("\n")
		break
	case "getRowOrBefore":
		if flag.NArg()-1 != 3 {
			fmt.Fprintln(os.Stderr, "GetRowOrBefore requires 3 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		argvalue2 := flag.Arg(3)
		value2 := Hbase.Text(argvalue2)
		fmt.Print(client.GetRowOrBefore(value0, value1, value2))
		fmt.Print("\n")
		break
	case "getRegionInfo":
		if flag.NArg()-1 != 1 {
			fmt.Fprintln(os.Stderr, "GetRegionInfo requires 1 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		fmt.Print(client.GetRegionInfo(value0))
		fmt.Print("\n")
		break
	case "getRowWithColumnsMaxVer":
		if flag.NArg()-1 != 5 {
			fmt.Fprintln(os.Stderr, "GetRowWithColumnsMaxVer requires 5 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		arg703 := flag.Arg(3)
		mbTrans704 := thrift.NewTMemoryBufferLen(len(arg703))
		defer mbTrans704.Close()
		_, err705 := mbTrans704.WriteString(arg703)
		if err705 != nil {
			Usage()
			return
		}
		factory706 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt707 := factory706.GetProtocol(mbTrans704)
		containerStruct2 := Hbase.NewGetRowWithColumnsMaxVerArgs()
		err708 := containerStruct2.ReadField3(jsProt707)
		if err708 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Columns
		value2 := argvalue2
		tmp3, err709 := (strconv.Atoi(flag.Arg(4)))
		if err709 != nil {
			Usage()
			return
		}
		argvalue3 := int32(tmp3)
		value3 := argvalue3
		arg710 := flag.Arg(5)
		mbTrans711 := thrift.NewTMemoryBufferLen(len(arg710))
		defer mbTrans711.Close()
		_, err712 := mbTrans711.WriteString(arg710)
		if err712 != nil {
			Usage()
			return
		}
		factory713 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt714 := factory713.GetProtocol(mbTrans711)
		containerStruct4 := Hbase.NewGetRowWithColumnsMaxVerArgs()
		err715 := containerStruct4.ReadField5(jsProt714)
		if err715 != nil {
			Usage()
			return
		}
		argvalue4 := containerStruct4.Attributes
		value4 := argvalue4
		fmt.Print(client.GetRowWithColumnsMaxVer(value0, value1, value2, value3, value4))
		fmt.Print("\n")
		break
	case "getRowWithColumnsTsMaxVer":
		if flag.NArg()-1 != 6 {
			fmt.Fprintln(os.Stderr, "GetRowWithColumnsTsMaxVer requires 6 args")
			flag.Usage()
		}
		argvalue0 := flag.Arg(1)
		value0 := Hbase.Text(argvalue0)
		argvalue1 := flag.Arg(2)
		value1 := Hbase.Text(argvalue1)
		arg718 := flag.Arg(3)
		mbTrans719 := thrift.NewTMemoryBufferLen(len(arg718))
		defer mbTrans719.Close()
		_, err720 := mbTrans719.WriteString(arg718)
		if err720 != nil {
			Usage()
			return
		}
		factory721 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt722 := factory721.GetProtocol(mbTrans719)
		containerStruct2 := Hbase.NewGetRowWithColumnsTsMaxVerArgs()
		err723 := containerStruct2.ReadField3(jsProt722)
		if err723 != nil {
			Usage()
			return
		}
		argvalue2 := containerStruct2.Columns
		value2 := argvalue2
		argvalue3, err724 := (strconv.ParseInt(flag.Arg(4), 10, 64))
		if err724 != nil {
			Usage()
			return
		}
		value3 := argvalue3
		tmp4, err725 := (strconv.Atoi(flag.Arg(5)))
		if err725 != nil {
			Usage()
			return
		}
		argvalue4 := int32(tmp4)
		value4 := argvalue4
		arg726 := flag.Arg(6)
		mbTrans727 := thrift.NewTMemoryBufferLen(len(arg726))
		defer mbTrans727.Close()
		_, err728 := mbTrans727.WriteString(arg726)
		if err728 != nil {
			Usage()
			return
		}
		factory729 := thrift.NewTSimpleJSONProtocolFactory()
		jsProt730 := factory729.GetProtocol(mbTrans727)
		containerStruct5 := Hbase.NewGetRowWithColumnsTsMaxVerArgs()
		err731 := containerStruct5.ReadField6(jsProt730)
		if err731 != nil {
			Usage()
			return
		}
		argvalue5 := containerStruct5.Attributes
		value5 := argvalue5
		fmt.Print(client.GetRowWithColumnsTsMaxVer(value0, value1, value2, value3, value4, value5))
		fmt.Print("\n")
		break
	case "":
		Usage()
		break
	default:
		fmt.Fprintln(os.Stderr, "Invalid function ", cmd)
	}
}
