// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package Hbase

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int

type Text []byte

type Bytes []byte

type ScannerID int32

type TCell struct {
	Value     Bytes `thrift:"value,1"`
	Timestamp int64 `thrift:"timestamp,2"`
}

func NewTCell() *TCell {
	return &TCell{}
}

func (p *TCell) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TCell) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Value = Bytes(v)
	}
	return nil
}

func (p *TCell) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *TCell) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TCell"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TCell) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Value != nil {
		if err := oprot.WriteFieldBegin("value", thrift.BINARY, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:value: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Value); err != nil {
			return fmt.Errorf("%T.value (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:value: %s", p, err)
		}
	}
	return err
}

func (p *TCell) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:timestamp: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
		return fmt.Errorf("%T.timestamp (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:timestamp: %s", p, err)
	}
	return err
}

func (p *TCell) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TCell(%+v)", *p)
}

type ColumnDescriptor struct {
	Name                  Text   `thrift:"name,1"`
	MaxVersions           int32  `thrift:"maxVersions,2"`
	Compression           string `thrift:"compression,3"`
	InMemory              bool   `thrift:"inMemory,4"`
	BloomFilterType       string `thrift:"bloomFilterType,5"`
	BloomFilterVectorSize int32  `thrift:"bloomFilterVectorSize,6"`
	BloomFilterNbHashes   int32  `thrift:"bloomFilterNbHashes,7"`
	BlockCacheEnabled     bool   `thrift:"blockCacheEnabled,8"`
	TimeToLive            int32  `thrift:"timeToLive,9"`
}

func NewColumnDescriptor() *ColumnDescriptor {
	return &ColumnDescriptor{
		MaxVersions: 3,

		Compression: "NONE",

		InMemory: false,

		BloomFilterType: "NONE",

		BloomFilterVectorSize: 0,

		BloomFilterNbHashes: 0,

		BlockCacheEnabled: false,

		TimeToLive: -1,
	}
}

func (p *ColumnDescriptor) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *ColumnDescriptor) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Name = Text(v)
	}
	return nil
}

func (p *ColumnDescriptor) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.MaxVersions = v
	}
	return nil
}

func (p *ColumnDescriptor) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Compression = v
	}
	return nil
}

func (p *ColumnDescriptor) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.InMemory = v
	}
	return nil
}

func (p *ColumnDescriptor) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.BloomFilterType = v
	}
	return nil
}

func (p *ColumnDescriptor) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.BloomFilterVectorSize = v
	}
	return nil
}

func (p *ColumnDescriptor) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.BloomFilterNbHashes = v
	}
	return nil
}

func (p *ColumnDescriptor) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.BlockCacheEnabled = v
	}
	return nil
}

func (p *ColumnDescriptor) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.TimeToLive = v
	}
	return nil
}

func (p *ColumnDescriptor) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("ColumnDescriptor"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *ColumnDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Name != nil {
		if err := oprot.WriteFieldBegin("name", thrift.BINARY, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Name); err != nil {
			return fmt.Errorf("%T.name (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:name: %s", p, err)
		}
	}
	return err
}

func (p *ColumnDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxVersions", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:maxVersions: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MaxVersions)); err != nil {
		return fmt.Errorf("%T.maxVersions (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:maxVersions: %s", p, err)
	}
	return err
}

func (p *ColumnDescriptor) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("compression", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:compression: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Compression)); err != nil {
		return fmt.Errorf("%T.compression (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:compression: %s", p, err)
	}
	return err
}

func (p *ColumnDescriptor) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("inMemory", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:inMemory: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.InMemory)); err != nil {
		return fmt.Errorf("%T.inMemory (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:inMemory: %s", p, err)
	}
	return err
}

func (p *ColumnDescriptor) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bloomFilterType", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:bloomFilterType: %s", p, err)
	}
	if err := oprot.WriteString(string(p.BloomFilterType)); err != nil {
		return fmt.Errorf("%T.bloomFilterType (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:bloomFilterType: %s", p, err)
	}
	return err
}

func (p *ColumnDescriptor) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bloomFilterVectorSize", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:bloomFilterVectorSize: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.BloomFilterVectorSize)); err != nil {
		return fmt.Errorf("%T.bloomFilterVectorSize (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:bloomFilterVectorSize: %s", p, err)
	}
	return err
}

func (p *ColumnDescriptor) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bloomFilterNbHashes", thrift.I32, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:bloomFilterNbHashes: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.BloomFilterNbHashes)); err != nil {
		return fmt.Errorf("%T.bloomFilterNbHashes (7) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:bloomFilterNbHashes: %s", p, err)
	}
	return err
}

func (p *ColumnDescriptor) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blockCacheEnabled", thrift.BOOL, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:blockCacheEnabled: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.BlockCacheEnabled)); err != nil {
		return fmt.Errorf("%T.blockCacheEnabled (8) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:blockCacheEnabled: %s", p, err)
	}
	return err
}

func (p *ColumnDescriptor) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timeToLive", thrift.I32, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:timeToLive: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TimeToLive)); err != nil {
		return fmt.Errorf("%T.timeToLive (9) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:timeToLive: %s", p, err)
	}
	return err
}

func (p *ColumnDescriptor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("ColumnDescriptor(%+v)", *p)
}

type MTColumnDescriptor struct {
	Name              Text   `thrift:"name,1"`
	MaxVersions       int32  `thrift:"maxVersions,2"`
	Compression       string `thrift:"compression,3"`
	InMemory          bool   `thrift:"inMemory,4"`
	BloomFilterType   string `thrift:"bloomFilterType,5"`
	MinVersions       int32  `thrift:"minVersions,6"`
	BlockCacheEnabled bool   `thrift:"blockCacheEnabled,7"`
	TimeToLive        int32  `thrift:"timeToLive,8"`
	BlockSize         int32  `thrift:"blockSize,9"`
}

func NewMTColumnDescriptor() *MTColumnDescriptor {
	return &MTColumnDescriptor{
		MaxVersions: 3,

		Compression: "NONE",

		InMemory: false,

		BloomFilterType: "NONE",

		MinVersions: 0,

		BlockCacheEnabled: false,

		TimeToLive: -1,

		BlockSize: 65536,
	}
}

func (p *MTColumnDescriptor) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		case 9:
			if err := p.readField9(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *MTColumnDescriptor) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Name = Text(v)
	}
	return nil
}

func (p *MTColumnDescriptor) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.MaxVersions = v
	}
	return nil
}

func (p *MTColumnDescriptor) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Compression = v
	}
	return nil
}

func (p *MTColumnDescriptor) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.InMemory = v
	}
	return nil
}

func (p *MTColumnDescriptor) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.BloomFilterType = v
	}
	return nil
}

func (p *MTColumnDescriptor) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.MinVersions = v
	}
	return nil
}

func (p *MTColumnDescriptor) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.BlockCacheEnabled = v
	}
	return nil
}

func (p *MTColumnDescriptor) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.TimeToLive = v
	}
	return nil
}

func (p *MTColumnDescriptor) readField9(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 9: %s")
	} else {
		p.BlockSize = v
	}
	return nil
}

func (p *MTColumnDescriptor) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("MTColumnDescriptor"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := p.writeField9(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *MTColumnDescriptor) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Name != nil {
		if err := oprot.WriteFieldBegin("name", thrift.BINARY, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:name: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Name); err != nil {
			return fmt.Errorf("%T.name (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:name: %s", p, err)
		}
	}
	return err
}

func (p *MTColumnDescriptor) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("maxVersions", thrift.I32, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:maxVersions: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MaxVersions)); err != nil {
		return fmt.Errorf("%T.maxVersions (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:maxVersions: %s", p, err)
	}
	return err
}

func (p *MTColumnDescriptor) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("compression", thrift.STRING, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:compression: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Compression)); err != nil {
		return fmt.Errorf("%T.compression (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:compression: %s", p, err)
	}
	return err
}

func (p *MTColumnDescriptor) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("inMemory", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:inMemory: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.InMemory)); err != nil {
		return fmt.Errorf("%T.inMemory (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:inMemory: %s", p, err)
	}
	return err
}

func (p *MTColumnDescriptor) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("bloomFilterType", thrift.STRING, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:bloomFilterType: %s", p, err)
	}
	if err := oprot.WriteString(string(p.BloomFilterType)); err != nil {
		return fmt.Errorf("%T.bloomFilterType (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:bloomFilterType: %s", p, err)
	}
	return err
}

func (p *MTColumnDescriptor) writeField6(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("minVersions", thrift.I32, 6); err != nil {
		return fmt.Errorf("%T write field begin error 6:minVersions: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.MinVersions)); err != nil {
		return fmt.Errorf("%T.minVersions (6) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 6:minVersions: %s", p, err)
	}
	return err
}

func (p *MTColumnDescriptor) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blockCacheEnabled", thrift.BOOL, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:blockCacheEnabled: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.BlockCacheEnabled)); err != nil {
		return fmt.Errorf("%T.blockCacheEnabled (7) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:blockCacheEnabled: %s", p, err)
	}
	return err
}

func (p *MTColumnDescriptor) writeField8(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("timeToLive", thrift.I32, 8); err != nil {
		return fmt.Errorf("%T write field begin error 8:timeToLive: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.TimeToLive)); err != nil {
		return fmt.Errorf("%T.timeToLive (8) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 8:timeToLive: %s", p, err)
	}
	return err
}

func (p *MTColumnDescriptor) writeField9(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("blockSize", thrift.I32, 9); err != nil {
		return fmt.Errorf("%T write field begin error 9:blockSize: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.BlockSize)); err != nil {
		return fmt.Errorf("%T.blockSize (9) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 9:blockSize: %s", p, err)
	}
	return err
}

func (p *MTColumnDescriptor) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MTColumnDescriptor(%+v)", *p)
}

type TRegionInfo struct {
	StartKey   Text  `thrift:"startKey,1"`
	EndKey     Text  `thrift:"endKey,2"`
	Id         int64 `thrift:"id,3"`
	Name       Text  `thrift:"name,4"`
	Version    int8  `thrift:"version,5"`
	ServerName Text  `thrift:"serverName,6"`
	Port       int32 `thrift:"port,7"`
}

func NewTRegionInfo() *TRegionInfo {
	return &TRegionInfo{}
}

func (p *TRegionInfo) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TRegionInfo) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.StartKey = Text(v)
	}
	return nil
}

func (p *TRegionInfo) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.EndKey = Text(v)
	}
	return nil
}

func (p *TRegionInfo) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Id = v
	}
	return nil
}

func (p *TRegionInfo) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Name = Text(v)
	}
	return nil
}

func (p *TRegionInfo) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadByte(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Version = int8(v)
	}
	return nil
}

func (p *TRegionInfo) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.ServerName = Text(v)
	}
	return nil
}

func (p *TRegionInfo) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.Port = v
	}
	return nil
}

func (p *TRegionInfo) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRegionInfo"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TRegionInfo) writeField1(oprot thrift.TProtocol) (err error) {
	if p.StartKey != nil {
		if err := oprot.WriteFieldBegin("startKey", thrift.BINARY, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:startKey: %s", p, err)
		}
		if err := oprot.WriteBinary(p.StartKey); err != nil {
			return fmt.Errorf("%T.startKey (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:startKey: %s", p, err)
		}
	}
	return err
}

func (p *TRegionInfo) writeField2(oprot thrift.TProtocol) (err error) {
	if p.EndKey != nil {
		if err := oprot.WriteFieldBegin("endKey", thrift.BINARY, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:endKey: %s", p, err)
		}
		if err := oprot.WriteBinary(p.EndKey); err != nil {
			return fmt.Errorf("%T.endKey (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:endKey: %s", p, err)
		}
	}
	return err
}

func (p *TRegionInfo) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I64, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:id: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Id)); err != nil {
		return fmt.Errorf("%T.id (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:id: %s", p, err)
	}
	return err
}

func (p *TRegionInfo) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Name != nil {
		if err := oprot.WriteFieldBegin("name", thrift.BINARY, 4); err != nil {
			return fmt.Errorf("%T write field begin error 4:name: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Name); err != nil {
			return fmt.Errorf("%T.name (4) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 4:name: %s", p, err)
		}
	}
	return err
}

func (p *TRegionInfo) writeField5(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("version", thrift.BYTE, 5); err != nil {
		return fmt.Errorf("%T write field begin error 5:version: %s", p, err)
	}
	if err := oprot.WriteByte(byte(p.Version)); err != nil {
		return fmt.Errorf("%T.version (5) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 5:version: %s", p, err)
	}
	return err
}

func (p *TRegionInfo) writeField6(oprot thrift.TProtocol) (err error) {
	if p.ServerName != nil {
		if err := oprot.WriteFieldBegin("serverName", thrift.BINARY, 6); err != nil {
			return fmt.Errorf("%T write field begin error 6:serverName: %s", p, err)
		}
		if err := oprot.WriteBinary(p.ServerName); err != nil {
			return fmt.Errorf("%T.serverName (6) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 6:serverName: %s", p, err)
		}
	}
	return err
}

func (p *TRegionInfo) writeField7(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("port", thrift.I32, 7); err != nil {
		return fmt.Errorf("%T write field begin error 7:port: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Port)); err != nil {
		return fmt.Errorf("%T.port (7) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 7:port: %s", p, err)
	}
	return err
}

func (p *TRegionInfo) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRegionInfo(%+v)", *p)
}

type Mutation struct {
	IsDelete   bool `thrift:"isDelete,1"`
	Column     Text `thrift:"column,2"`
	Value      Text `thrift:"value,3"`
	WriteToWAL bool `thrift:"writeToWAL,4"`
}

func NewMutation() *Mutation {
	return &Mutation{
		IsDelete: false,

		WriteToWAL: true,
	}
}

func (p *Mutation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *Mutation) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.IsDelete = v
	}
	return nil
}

func (p *Mutation) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Column = Text(v)
	}
	return nil
}

func (p *Mutation) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Value = Text(v)
	}
	return nil
}

func (p *Mutation) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.WriteToWAL = v
	}
	return nil
}

func (p *Mutation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Mutation"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *Mutation) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("isDelete", thrift.BOOL, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:isDelete: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.IsDelete)); err != nil {
		return fmt.Errorf("%T.isDelete (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:isDelete: %s", p, err)
	}
	return err
}

func (p *Mutation) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Column != nil {
		if err := oprot.WriteFieldBegin("column", thrift.BINARY, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:column: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Column); err != nil {
			return fmt.Errorf("%T.column (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:column: %s", p, err)
		}
	}
	return err
}

func (p *Mutation) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Value != nil {
		if err := oprot.WriteFieldBegin("value", thrift.BINARY, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:value: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Value); err != nil {
			return fmt.Errorf("%T.value (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:value: %s", p, err)
		}
	}
	return err
}

func (p *Mutation) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("writeToWAL", thrift.BOOL, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:writeToWAL: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.WriteToWAL)); err != nil {
		return fmt.Errorf("%T.writeToWAL (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:writeToWAL: %s", p, err)
	}
	return err
}

func (p *Mutation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Mutation(%+v)", *p)
}

type BatchMutation struct {
	Row       Text        `thrift:"row,1"`
	Mutations []*Mutation `thrift:"mutations,2"`
}

func NewBatchMutation() *BatchMutation {
	return &BatchMutation{}
}

func (p *BatchMutation) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *BatchMutation) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Row = Text(v)
	}
	return nil
}

func (p *BatchMutation) readField2(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Mutations = make([]*Mutation, 0, size)
	for i := 0; i < size; i++ {
		_elem0 := NewMutation()
		if err := _elem0.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem0)
		}
		p.Mutations = append(p.Mutations, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *BatchMutation) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("BatchMutation"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *BatchMutation) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Row != nil {
		if err := oprot.WriteFieldBegin("row", thrift.BINARY, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:row: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Row); err != nil {
			return fmt.Errorf("%T.row (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:row: %s", p, err)
		}
	}
	return err
}

func (p *BatchMutation) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Mutations != nil {
		if err := oprot.WriteFieldBegin("mutations", thrift.LIST, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:mutations: %s", p, err)
		}
		if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Mutations)); err != nil {
			return fmt.Errorf("error writing list begin: %s")
		}
		for _, v := range p.Mutations {
			if err := v.Write(oprot); err != nil {
				return fmt.Errorf("%T error writing struct: %s", v)
			}
		}
		if err := oprot.WriteListEnd(); err != nil {
			return fmt.Errorf("error writing list end: %s")
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:mutations: %s", p, err)
		}
	}
	return err
}

func (p *BatchMutation) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BatchMutation(%+v)", *p)
}

type TIncrement struct {
	Table   Text  `thrift:"table,1"`
	Row     Text  `thrift:"row,2"`
	Column  Text  `thrift:"column,3"`
	Ammount int64 `thrift:"ammount,4"`
}

func NewTIncrement() *TIncrement {
	return &TIncrement{}
}

func (p *TIncrement) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TIncrement) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Table = Text(v)
	}
	return nil
}

func (p *TIncrement) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Row = Text(v)
	}
	return nil
}

func (p *TIncrement) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Column = Text(v)
	}
	return nil
}

func (p *TIncrement) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Ammount = v
	}
	return nil
}

func (p *TIncrement) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TIncrement"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TIncrement) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Table != nil {
		if err := oprot.WriteFieldBegin("table", thrift.BINARY, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:table: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Table); err != nil {
			return fmt.Errorf("%T.table (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:table: %s", p, err)
		}
	}
	return err
}

func (p *TIncrement) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Row != nil {
		if err := oprot.WriteFieldBegin("row", thrift.BINARY, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:row: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Row); err != nil {
			return fmt.Errorf("%T.row (2) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:row: %s", p, err)
		}
	}
	return err
}

func (p *TIncrement) writeField3(oprot thrift.TProtocol) (err error) {
	if p.Column != nil {
		if err := oprot.WriteFieldBegin("column", thrift.BINARY, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:column: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Column); err != nil {
			return fmt.Errorf("%T.column (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:column: %s", p, err)
		}
	}
	return err
}

func (p *TIncrement) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ammount", thrift.I64, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:ammount: %s", p, err)
	}
	if err := oprot.WriteI64(int64(p.Ammount)); err != nil {
		return fmt.Errorf("%T.ammount (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:ammount: %s", p, err)
	}
	return err
}

func (p *TIncrement) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TIncrement(%+v)", *p)
}

type TColumn struct {
	ColumnName Text   `thrift:"columnName,1"`
	Cell       *TCell `thrift:"cell,2"`
}

func NewTColumn() *TColumn {
	return &TColumn{}
}

func (p *TColumn) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TColumn) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.ColumnName = Text(v)
	}
	return nil
}

func (p *TColumn) readField2(iprot thrift.TProtocol) error {
	p.Cell = NewTCell()
	if err := p.Cell.Read(iprot); err != nil {
		return fmt.Errorf("%T error reading struct: %s", p.Cell)
	}
	return nil
}

func (p *TColumn) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TColumn"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TColumn) writeField1(oprot thrift.TProtocol) (err error) {
	if p.ColumnName != nil {
		if err := oprot.WriteFieldBegin("columnName", thrift.BINARY, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:columnName: %s", p, err)
		}
		if err := oprot.WriteBinary(p.ColumnName); err != nil {
			return fmt.Errorf("%T.columnName (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:columnName: %s", p, err)
		}
	}
	return err
}

func (p *TColumn) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Cell != nil {
		if err := oprot.WriteFieldBegin("cell", thrift.STRUCT, 2); err != nil {
			return fmt.Errorf("%T write field begin error 2:cell: %s", p, err)
		}
		if err := p.Cell.Write(oprot); err != nil {
			return fmt.Errorf("%T error writing struct: %s", p.Cell)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 2:cell: %s", p, err)
		}
	}
	return err
}

func (p *TColumn) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TColumn(%+v)", *p)
}

type TRowResult struct {
	Row           Text            `thrift:"row,1"`
	Columns       map[Text]*TCell `thrift:"columns,2"`
	SortedColumns []*TColumn      `thrift:"sortedColumns,3"`
}

func NewTRowResult() *TRowResult {
	return &TRowResult{}
}

func (p *TRowResult) IsSetColumns() bool {
	return p.Columns != nil && len(p.Columns) > 0
}

func (p *TRowResult) IsSetSortedColumns() bool {
	return p.SortedColumns != nil && len(p.SortedColumns) > 0
}

func (p *TRowResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TRowResult) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Row = Text(v)
	}
	return nil
}

func (p *TRowResult) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Columns = make(map[Text]*TCell, size)
	for i := 0; i < size; i++ {
		var _key1 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key1 = Text(v)
		}
		_val2 := NewTCell()
		if err := _val2.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _val2)
		}
		p.Columns[_key1] = _val2
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *TRowResult) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.SortedColumns = make([]*TColumn, 0, size)
	for i := 0; i < size; i++ {
		_elem3 := NewTColumn()
		if err := _elem3.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem3)
		}
		p.SortedColumns = append(p.SortedColumns, _elem3)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *TRowResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRowResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TRowResult) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Row != nil {
		if err := oprot.WriteFieldBegin("row", thrift.BINARY, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:row: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Row); err != nil {
			return fmt.Errorf("%T.row (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:row: %s", p, err)
		}
	}
	return err
}

func (p *TRowResult) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Columns != nil {
		if p.IsSetColumns() {
			if err := oprot.WriteFieldBegin("columns", thrift.MAP, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:columns: %s", p, err)
			}
			if err := oprot.WriteMapBegin(thrift.BINARY, thrift.STRUCT, len(p.Columns)); err != nil {
				return fmt.Errorf("error writing map begin: %s")
			}
			for k, v := range p.Columns {
				if err := oprot.WriteBinary(k); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return fmt.Errorf("error writing map end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:columns: %s", p, err)
			}
		}
	}
	return err
}

func (p *TRowResult) writeField3(oprot thrift.TProtocol) (err error) {
	if p.SortedColumns != nil {
		if p.IsSetSortedColumns() {
			if err := oprot.WriteFieldBegin("sortedColumns", thrift.LIST, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:sortedColumns: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SortedColumns)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.SortedColumns {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:sortedColumns: %s", p, err)
			}
		}
	}
	return err
}

func (p *TRowResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRowResult(%+v)", *p)
}

type TRowResultWithMultiColVer struct {
	Row           Text              `thrift:"row,1"`
	Columns       map[Text][]*TCell `thrift:"columns,2"`
	SortedColumns []*TColumn        `thrift:"sortedColumns,3"`
}

func NewTRowResultWithMultiColVer() *TRowResultWithMultiColVer {
	return &TRowResultWithMultiColVer{}
}

func (p *TRowResultWithMultiColVer) IsSetColumns() bool {
	return p.Columns != nil && len(p.Columns) > 0
}

func (p *TRowResultWithMultiColVer) IsSetSortedColumns() bool {
	return p.SortedColumns != nil && len(p.SortedColumns) > 0
}

func (p *TRowResultWithMultiColVer) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TRowResultWithMultiColVer) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Row = Text(v)
	}
	return nil
}

func (p *TRowResultWithMultiColVer) readField2(iprot thrift.TProtocol) error {
	_, _, size, err := iprot.ReadMapBegin()
	if err != nil {
		return fmt.Errorf("error reading map begin: %s")
	}
	p.Columns = make(map[Text][]*TCell, size)
	for i := 0; i < size; i++ {
		var _key4 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_key4 = Text(v)
		}
		_, size, err := iprot.ReadListBegin()
		if err != nil {
			return fmt.Errorf("error reading list being: %s")
		}
		_val5 := make([]*TCell, 0, size)
		for i := 0; i < size; i++ {
			_elem6 := NewTCell()
			if err := _elem6.Read(iprot); err != nil {
				return fmt.Errorf("%T error reading struct: %s", _elem6)
			}
			_val5 = append(_val5, _elem6)
		}
		if err := iprot.ReadListEnd(); err != nil {
			return fmt.Errorf("error reading list end: %s")
		}
		p.Columns[_key4] = _val5
	}
	if err := iprot.ReadMapEnd(); err != nil {
		return fmt.Errorf("error reading map end: %s")
	}
	return nil
}

func (p *TRowResultWithMultiColVer) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.SortedColumns = make([]*TColumn, 0, size)
	for i := 0; i < size; i++ {
		_elem7 := NewTColumn()
		if err := _elem7.Read(iprot); err != nil {
			return fmt.Errorf("%T error reading struct: %s", _elem7)
		}
		p.SortedColumns = append(p.SortedColumns, _elem7)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *TRowResultWithMultiColVer) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TRowResultWithMultiColVer"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TRowResultWithMultiColVer) writeField1(oprot thrift.TProtocol) (err error) {
	if p.Row != nil {
		if err := oprot.WriteFieldBegin("row", thrift.BINARY, 1); err != nil {
			return fmt.Errorf("%T write field begin error 1:row: %s", p, err)
		}
		if err := oprot.WriteBinary(p.Row); err != nil {
			return fmt.Errorf("%T.row (1) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 1:row: %s", p, err)
		}
	}
	return err
}

func (p *TRowResultWithMultiColVer) writeField2(oprot thrift.TProtocol) (err error) {
	if p.Columns != nil {
		if p.IsSetColumns() {
			if err := oprot.WriteFieldBegin("columns", thrift.MAP, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:columns: %s", p, err)
			}
			if err := oprot.WriteMapBegin(thrift.BINARY, thrift.LIST, len(p.Columns)); err != nil {
				return fmt.Errorf("error writing map begin: %s")
			}
			for k, v := range p.Columns {
				if err := oprot.WriteBinary(k); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
				if err := oprot.WriteListBegin(thrift.STRUCT, len(v)); err != nil {
					return fmt.Errorf("error writing list begin: %s")
				}
				for _, v := range v {
					if err := v.Write(oprot); err != nil {
						return fmt.Errorf("%T error writing struct: %s", v)
					}
				}
				if err := oprot.WriteListEnd(); err != nil {
					return fmt.Errorf("error writing list end: %s")
				}
			}
			if err := oprot.WriteMapEnd(); err != nil {
				return fmt.Errorf("error writing map end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:columns: %s", p, err)
			}
		}
	}
	return err
}

func (p *TRowResultWithMultiColVer) writeField3(oprot thrift.TProtocol) (err error) {
	if p.SortedColumns != nil {
		if p.IsSetSortedColumns() {
			if err := oprot.WriteFieldBegin("sortedColumns", thrift.LIST, 3); err != nil {
				return fmt.Errorf("%T write field begin error 3:sortedColumns: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.STRUCT, len(p.SortedColumns)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.SortedColumns {
				if err := v.Write(oprot); err != nil {
					return fmt.Errorf("%T error writing struct: %s", v)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 3:sortedColumns: %s", p, err)
			}
		}
	}
	return err
}

func (p *TRowResultWithMultiColVer) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TRowResultWithMultiColVer(%+v)", *p)
}

type TScan struct {
	StartRow     Text   `thrift:"startRow,1"`
	StopRow      Text   `thrift:"stopRow,2"`
	Timestamp    int64  `thrift:"timestamp,3"`
	Columns      []Text `thrift:"columns,4"`
	Caching      int32  `thrift:"caching,5"`
	FilterString Text   `thrift:"filterString,6"`
	BatchSize    int32  `thrift:"batchSize,7"`
	SortColumns  bool   `thrift:"sortColumns,8"`
}

func NewTScan() *TScan {
	return &TScan{}
}

func (p *TScan) IsSetStartRow() bool {
	return p.StartRow != nil
}

func (p *TScan) IsSetStopRow() bool {
	return p.StopRow != nil
}

func (p *TScan) IsSetTimestamp() bool {
	return p.Timestamp != 0
}

func (p *TScan) IsSetColumns() bool {
	return p.Columns != nil && len(p.Columns) > 0
}

func (p *TScan) IsSetCaching() bool {
	return p.Caching != 0
}

func (p *TScan) IsSetFilterString() bool {
	return p.FilterString != nil
}

func (p *TScan) IsSetBatchSize() bool {
	return p.BatchSize != 0
}

func (p *TScan) IsSetSortColumns() bool {
	return p.SortColumns != false
}

func (p *TScan) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		case 5:
			if err := p.readField5(iprot); err != nil {
				return err
			}
		case 6:
			if err := p.readField6(iprot); err != nil {
				return err
			}
		case 7:
			if err := p.readField7(iprot); err != nil {
				return err
			}
		case 8:
			if err := p.readField8(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *TScan) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.StartRow = Text(v)
	}
	return nil
}

func (p *TScan) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.StopRow = Text(v)
	}
	return nil
}

func (p *TScan) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI64(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Timestamp = v
	}
	return nil
}

func (p *TScan) readField4(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return fmt.Errorf("error reading list being: %s")
	}
	p.Columns = make([]Text, 0, size)
	for i := 0; i < size; i++ {
		var _elem8 Text
		if v, err := iprot.ReadBinary(); err != nil {
			return fmt.Errorf("error reading field 0: %s")
		} else {
			_elem8 = Text(v)
		}
		p.Columns = append(p.Columns, _elem8)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return fmt.Errorf("error reading list end: %s")
	}
	return nil
}

func (p *TScan) readField5(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 5: %s")
	} else {
		p.Caching = v
	}
	return nil
}

func (p *TScan) readField6(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBinary(); err != nil {
		return fmt.Errorf("error reading field 6: %s")
	} else {
		p.FilterString = Text(v)
	}
	return nil
}

func (p *TScan) readField7(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 7: %s")
	} else {
		p.BatchSize = v
	}
	return nil
}

func (p *TScan) readField8(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 8: %s")
	} else {
		p.SortColumns = v
	}
	return nil
}

func (p *TScan) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("TScan"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := p.writeField5(oprot); err != nil {
		return err
	}
	if err := p.writeField6(oprot); err != nil {
		return err
	}
	if err := p.writeField7(oprot); err != nil {
		return err
	}
	if err := p.writeField8(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *TScan) writeField1(oprot thrift.TProtocol) (err error) {
	if p.StartRow != nil {
		if p.IsSetStartRow() {
			if err := oprot.WriteFieldBegin("startRow", thrift.BINARY, 1); err != nil {
				return fmt.Errorf("%T write field begin error 1:startRow: %s", p, err)
			}
			if err := oprot.WriteBinary(p.StartRow); err != nil {
				return fmt.Errorf("%T.startRow (1) field write error: %s", p)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 1:startRow: %s", p, err)
			}
		}
	}
	return err
}

func (p *TScan) writeField2(oprot thrift.TProtocol) (err error) {
	if p.StopRow != nil {
		if p.IsSetStopRow() {
			if err := oprot.WriteFieldBegin("stopRow", thrift.BINARY, 2); err != nil {
				return fmt.Errorf("%T write field begin error 2:stopRow: %s", p, err)
			}
			if err := oprot.WriteBinary(p.StopRow); err != nil {
				return fmt.Errorf("%T.stopRow (2) field write error: %s", p)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 2:stopRow: %s", p, err)
			}
		}
	}
	return err
}

func (p *TScan) writeField3(oprot thrift.TProtocol) (err error) {
	if p.IsSetTimestamp() {
		if err := oprot.WriteFieldBegin("timestamp", thrift.I64, 3); err != nil {
			return fmt.Errorf("%T write field begin error 3:timestamp: %s", p, err)
		}
		if err := oprot.WriteI64(int64(p.Timestamp)); err != nil {
			return fmt.Errorf("%T.timestamp (3) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 3:timestamp: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField4(oprot thrift.TProtocol) (err error) {
	if p.Columns != nil {
		if p.IsSetColumns() {
			if err := oprot.WriteFieldBegin("columns", thrift.LIST, 4); err != nil {
				return fmt.Errorf("%T write field begin error 4:columns: %s", p, err)
			}
			if err := oprot.WriteListBegin(thrift.BINARY, len(p.Columns)); err != nil {
				return fmt.Errorf("error writing list begin: %s")
			}
			for _, v := range p.Columns {
				if err := oprot.WriteBinary(v); err != nil {
					return fmt.Errorf("%T. (0) field write error: %s", p)
				}
			}
			if err := oprot.WriteListEnd(); err != nil {
				return fmt.Errorf("error writing list end: %s")
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 4:columns: %s", p, err)
			}
		}
	}
	return err
}

func (p *TScan) writeField5(oprot thrift.TProtocol) (err error) {
	if p.IsSetCaching() {
		if err := oprot.WriteFieldBegin("caching", thrift.I32, 5); err != nil {
			return fmt.Errorf("%T write field begin error 5:caching: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.Caching)); err != nil {
			return fmt.Errorf("%T.caching (5) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 5:caching: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField6(oprot thrift.TProtocol) (err error) {
	if p.FilterString != nil {
		if p.IsSetFilterString() {
			if err := oprot.WriteFieldBegin("filterString", thrift.BINARY, 6); err != nil {
				return fmt.Errorf("%T write field begin error 6:filterString: %s", p, err)
			}
			if err := oprot.WriteBinary(p.FilterString); err != nil {
				return fmt.Errorf("%T.filterString (6) field write error: %s", p)
			}
			if err := oprot.WriteFieldEnd(); err != nil {
				return fmt.Errorf("%T write field end error 6:filterString: %s", p, err)
			}
		}
	}
	return err
}

func (p *TScan) writeField7(oprot thrift.TProtocol) (err error) {
	if p.IsSetBatchSize() {
		if err := oprot.WriteFieldBegin("batchSize", thrift.I32, 7); err != nil {
			return fmt.Errorf("%T write field begin error 7:batchSize: %s", p, err)
		}
		if err := oprot.WriteI32(int32(p.BatchSize)); err != nil {
			return fmt.Errorf("%T.batchSize (7) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 7:batchSize: %s", p, err)
		}
	}
	return err
}

func (p *TScan) writeField8(oprot thrift.TProtocol) (err error) {
	if p.IsSetSortColumns() {
		if err := oprot.WriteFieldBegin("sortColumns", thrift.BOOL, 8); err != nil {
			return fmt.Errorf("%T write field begin error 8:sortColumns: %s", p, err)
		}
		if err := oprot.WriteBool(bool(p.SortColumns)); err != nil {
			return fmt.Errorf("%T.sortColumns (8) field write error: %s", p)
		}
		if err := oprot.WriteFieldEnd(); err != nil {
			return fmt.Errorf("%T write field end error 8:sortColumns: %s", p, err)
		}
	}
	return err
}

func (p *TScan) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("TScan(%+v)", *p)
}

type IOError struct {
	Message string `thrift:"message,1"`
}

func NewIOError() *IOError {
	return &IOError{}
}

func (p *IOError) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IOError) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Message = v
	}
	return nil
}

func (p *IOError) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IOError"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *IOError) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *IOError) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IOError(%+v)", *p)
}

type IllegalArgument struct {
	Message string `thrift:"message,1"`
}

func NewIllegalArgument() *IllegalArgument {
	return &IllegalArgument{}
}

func (p *IllegalArgument) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *IllegalArgument) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Message = v
	}
	return nil
}

func (p *IllegalArgument) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("IllegalArgument"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *IllegalArgument) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *IllegalArgument) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IllegalArgument(%+v)", *p)
}

type AlreadyExists struct {
	Message string `thrift:"message,1"`
}

func NewAlreadyExists() *AlreadyExists {
	return &AlreadyExists{}
}

func (p *AlreadyExists) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *AlreadyExists) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Message = v
	}
	return nil
}

func (p *AlreadyExists) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("AlreadyExists"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *AlreadyExists) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("message", thrift.STRING, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:message: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Message)); err != nil {
		return fmt.Errorf("%T.message (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:message: %s", p, err)
	}
	return err
}

func (p *AlreadyExists) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("AlreadyExists(%+v)", *p)
}
